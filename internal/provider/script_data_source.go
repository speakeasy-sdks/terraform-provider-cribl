// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"Cribl/internal/sdk"
	"Cribl/internal/sdk/pkg/models/operations"
	"context"
	"fmt"

	"Cribl/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ScriptDataSource{}
var _ datasource.DataSourceWithConfigure = &ScriptDataSource{}

func NewScriptDataSource() datasource.DataSource {
	return &ScriptDataSource{}
}

// ScriptDataSource is the data source implementation.
type ScriptDataSource struct {
	client *sdk.CriblTerraform
}

// ScriptDataSourceModel describes the data model.
type ScriptDataSourceModel struct {
	Args                 []types.String          `tfsdk:"args"`
	Command              types.String            `tfsdk:"command"`
	Description          types.String            `tfsdk:"description"`
	Env                  map[string]types.String `tfsdk:"env"`
	ID                   types.String            `tfsdk:"id"`
	AdditionalProperties types.String            `tfsdk:"additional_properties"`
}

// Metadata returns the data source type name.
func (r *ScriptDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_script"
}

// Schema defines the schema for the data source.
func (r *ScriptDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Script DataSource",

		Attributes: map[string]schema.Attribute{
			"args": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Arguments to pass when executing this script`,
			},
			"command": schema.StringAttribute{
				Computed:    true,
				Description: `Command to execute for this script`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `Brief description of this script. Optional.`,
			},
			"env": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Extra environment variables to set when executing script`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `Unique ID`,
			},
			"additional_properties": schema.StringAttribute{
				Optional: true,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
				Description: `Parsed as JSON.`,
			},
		},
	}
}

func (r *ScriptDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.CriblTerraform)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.CriblTerraform, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ScriptDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ScriptDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.GetScriptRequest{
		ID: id,
	}
	res, err := r.client.Scripts.GetScript(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ScriptLibEntry == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.ScriptLibEntry)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
