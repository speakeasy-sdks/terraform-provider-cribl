// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DistributedUpgradeRequestPackageUrls struct {
	// Package's MD5 or SHA256 hash HTTP URL or local path.
	PackageHashURL *string `json:"packageHashUrl,omitempty"`
	// Package HTTP URL or local path.
	PackageURL string `json:"packageUrl"`
}

type DistributedUpgradeRequestUpgradeMode string

const (
	DistributedUpgradeRequestUpgradeModeRolling DistributedUpgradeRequestUpgradeMode = "rolling"
	DistributedUpgradeRequestUpgradeModeRegular DistributedUpgradeRequestUpgradeMode = "regular"
)

func (e DistributedUpgradeRequestUpgradeMode) ToPointer() *DistributedUpgradeRequestUpgradeMode {
	return &e
}

func (e *DistributedUpgradeRequestUpgradeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rolling":
		fallthrough
	case "regular":
		*e = DistributedUpgradeRequestUpgradeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributedUpgradeRequestUpgradeMode: %v", v)
	}
}

// DistributedUpgradeRequest - distributedUpgrade object
type DistributedUpgradeRequest struct {
	// Provide your own URLs or local paths for platform-specific Cribl packages.
	PackageUrls []DistributedUpgradeRequestPackageUrls `json:"packageUrls,omitempty"`
	UpgradeMode *DistributedUpgradeRequestUpgradeMode  `json:"upgradeMode,omitempty"`
	// Percentage of the total worker nodes on the group to run the upgrade on
	UpgradePercentage *int64 `json:"upgradePercentage,omitempty"`
	// Number of times to retry conncecting to a worker node before marking the upgrade as failed.
	WorkerRetries *int64 `json:"workerRetries,omitempty"`
	// Delay between retries
	WorkerRetryDelay *int64 `json:"workerRetryDelay,omitempty"`
}
