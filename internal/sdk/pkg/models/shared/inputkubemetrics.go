// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputKubeMetricsConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputKubeMetricsMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputKubeMetricsPersistenceCompression - Select data compression format. Optional.
type InputKubeMetricsPersistenceCompression string

const (
	InputKubeMetricsPersistenceCompressionNone InputKubeMetricsPersistenceCompression = "none"
	InputKubeMetricsPersistenceCompressionGzip InputKubeMetricsPersistenceCompression = "gzip"
)

func (e InputKubeMetricsPersistenceCompression) ToPointer() *InputKubeMetricsPersistenceCompression {
	return &e
}

func (e *InputKubeMetricsPersistenceCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputKubeMetricsPersistenceCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsPersistenceCompression: %v", v)
	}
}

type InputKubeMetricsPersistence struct {
	// Select data compression format. Optional.
	Compress *InputKubeMetricsPersistenceCompression `json:"compress,omitempty"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/<id>
	DestPath *string `json:"destPath,omitempty"`
	// Spool metrics on disk for Cribl Search
	Enable *bool `json:"enable,omitempty"`
	// Maximum disk space allowed to be consumed (e.g., 420MB or 4GB). Once reached, older data will be deleted.
	MaxDataSize *string `json:"maxDataSize,omitempty"`
	// Maximum amount of time to retain data (e.g., 2h or 4d). Once reached, older data will be deleted.
	MaxDataTime *string `json:"maxDataTime,omitempty"`
	// Time span for each file bucket
	TimeWindow *string `json:"timeWindow,omitempty"`
}

// InputKubeMetricsPqCompression - Codec to use to compress the persisted data.
type InputKubeMetricsPqCompression string

const (
	InputKubeMetricsPqCompressionNone InputKubeMetricsPqCompression = "none"
	InputKubeMetricsPqCompressionGzip InputKubeMetricsPqCompression = "gzip"
)

func (e InputKubeMetricsPqCompression) ToPointer() *InputKubeMetricsPqCompression {
	return &e
}

func (e *InputKubeMetricsPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputKubeMetricsPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsPqCompression: %v", v)
	}
}

// InputKubeMetricsPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputKubeMetricsPqMode string

const (
	InputKubeMetricsPqModeSmart  InputKubeMetricsPqMode = "smart"
	InputKubeMetricsPqModeAlways InputKubeMetricsPqMode = "always"
)

func (e InputKubeMetricsPqMode) ToPointer() *InputKubeMetricsPqMode {
	return &e
}

func (e *InputKubeMetricsPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputKubeMetricsPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsPqMode: %v", v)
	}
}

type InputKubeMetricsPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputKubeMetricsPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputKubeMetricsPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputKubeMetricsRules struct {
	// Optional description of this rule's purpose
	Description *string `json:"description,omitempty"`
	// JavaScript expression applied to Kubernetes objects. Return 'true' to include it.
	Filter string `json:"filter"`
}

type InputKubeMetricsInputType string

const (
	InputKubeMetricsInputTypeSplunk            InputKubeMetricsInputType = "splunk"
	InputKubeMetricsInputTypeSplunkHec         InputKubeMetricsInputType = "splunk_hec"
	InputKubeMetricsInputTypeSyslog            InputKubeMetricsInputType = "syslog"
	InputKubeMetricsInputTypeTcpjson           InputKubeMetricsInputType = "tcpjson"
	InputKubeMetricsInputTypeGrafana           InputKubeMetricsInputType = "grafana"
	InputKubeMetricsInputTypeLoki              InputKubeMetricsInputType = "loki"
	InputKubeMetricsInputTypeHTTP              InputKubeMetricsInputType = "http"
	InputKubeMetricsInputTypeHTTPRaw           InputKubeMetricsInputType = "http_raw"
	InputKubeMetricsInputTypeFirehose          InputKubeMetricsInputType = "firehose"
	InputKubeMetricsInputTypeElastic           InputKubeMetricsInputType = "elastic"
	InputKubeMetricsInputTypeKafka             InputKubeMetricsInputType = "kafka"
	InputKubeMetricsInputTypeConfluentCloud    InputKubeMetricsInputType = "confluent_cloud"
	InputKubeMetricsInputTypeMsk               InputKubeMetricsInputType = "msk"
	InputKubeMetricsInputTypeKinesis           InputKubeMetricsInputType = "kinesis"
	InputKubeMetricsInputTypeEventhub          InputKubeMetricsInputType = "eventhub"
	InputKubeMetricsInputTypeAzureBlob         InputKubeMetricsInputType = "azure_blob"
	InputKubeMetricsInputTypeMetrics           InputKubeMetricsInputType = "metrics"
	InputKubeMetricsInputTypeSqs               InputKubeMetricsInputType = "sqs"
	InputKubeMetricsInputTypeS3                InputKubeMetricsInputType = "s3"
	InputKubeMetricsInputTypeSnmp              InputKubeMetricsInputType = "snmp"
	InputKubeMetricsInputTypeCrowdstrike       InputKubeMetricsInputType = "crowdstrike"
	InputKubeMetricsInputTypeTCP               InputKubeMetricsInputType = "tcp"
	InputKubeMetricsInputTypeRawUDP            InputKubeMetricsInputType = "raw_udp"
	InputKubeMetricsInputTypeOffice365Service  InputKubeMetricsInputType = "office365_service"
	InputKubeMetricsInputTypeOffice365Mgmt     InputKubeMetricsInputType = "office365_mgmt"
	InputKubeMetricsInputTypeOffice365MsgTrace InputKubeMetricsInputType = "office365_msg_trace"
	InputKubeMetricsInputTypePrometheus        InputKubeMetricsInputType = "prometheus"
	InputKubeMetricsInputTypeEdgePrometheus    InputKubeMetricsInputType = "edge_prometheus"
	InputKubeMetricsInputTypePrometheusRw      InputKubeMetricsInputType = "prometheus_rw"
	InputKubeMetricsInputTypeAppscope          InputKubeMetricsInputType = "appscope"
	InputKubeMetricsInputTypeGooglePubsub      InputKubeMetricsInputType = "google_pubsub"
	InputKubeMetricsInputTypeOpenTelemetry     InputKubeMetricsInputType = "open_telemetry"
	InputKubeMetricsInputTypeDatadogAgent      InputKubeMetricsInputType = "datadog_agent"
	InputKubeMetricsInputTypeWef               InputKubeMetricsInputType = "wef"
	InputKubeMetricsInputTypeDatagen           InputKubeMetricsInputType = "datagen"
	InputKubeMetricsInputTypeCribl             InputKubeMetricsInputType = "cribl"
	InputKubeMetricsInputTypeCriblmetrics      InputKubeMetricsInputType = "criblmetrics"
	InputKubeMetricsInputTypeCriblHTTP         InputKubeMetricsInputType = "cribl_http"
	InputKubeMetricsInputTypeCriblTCP          InputKubeMetricsInputType = "cribl_tcp"
	InputKubeMetricsInputTypeWinEventLogs      InputKubeMetricsInputType = "win_event_logs"
	InputKubeMetricsInputTypeSystemMetrics     InputKubeMetricsInputType = "system_metrics"
	InputKubeMetricsInputTypeWindowsMetrics    InputKubeMetricsInputType = "windows_metrics"
	InputKubeMetricsInputTypeSystemState       InputKubeMetricsInputType = "system_state"
	InputKubeMetricsInputTypeKubeMetrics       InputKubeMetricsInputType = "kube_metrics"
	InputKubeMetricsInputTypeKubeLogs          InputKubeMetricsInputType = "kube_logs"
	InputKubeMetricsInputTypeKubeEvents        InputKubeMetricsInputType = "kube_events"
	InputKubeMetricsInputTypeExec              InputKubeMetricsInputType = "exec"
	InputKubeMetricsInputTypeSplunkSearch      InputKubeMetricsInputType = "splunk_search"
	InputKubeMetricsInputTypeFile              InputKubeMetricsInputType = "file"
	InputKubeMetricsInputTypeJournalFiles      InputKubeMetricsInputType = "journal_files"
)

func (e InputKubeMetricsInputType) ToPointer() *InputKubeMetricsInputType {
	return &e
}

func (e *InputKubeMetricsInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		*e = InputKubeMetricsInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsInputType: %v", v)
	}
}

type InputKubeMetrics struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputKubeMetricsConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this input
	ID string `json:"id"`
	// Time, in seconds, between consecutive metrics collections. Default is 15 secs.
	Interval *int64 `json:"interval,omitempty"`
	// Fields to add to events from this input.
	Metadata    []InputKubeMetricsMetadata   `json:"metadata,omitempty"`
	Persistence *InputKubeMetricsPersistence `json:"persistence,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string             `json:"pipeline,omitempty"`
	Pq       *InputKubeMetricsPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Add rules to decide which Kubernetes objects to generate metrics for. Events are generated if no rules are given or of all the rules' expressions evaluate to true.
	Rules []InputKubeMetricsRules `json:"rules,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                  `json:"streamtags,omitempty"`
	Type       InputKubeMetricsInputType `json:"type"`
}
