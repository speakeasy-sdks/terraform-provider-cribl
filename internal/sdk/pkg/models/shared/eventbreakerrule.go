// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EventBreakerRuleTimestampType string

const (
	EventBreakerRuleTimestampTypeAuto    EventBreakerRuleTimestampType = "auto"
	EventBreakerRuleTimestampTypeFormat  EventBreakerRuleTimestampType = "format"
	EventBreakerRuleTimestampTypeCurrent EventBreakerRuleTimestampType = "current"
)

func (e EventBreakerRuleTimestampType) ToPointer() *EventBreakerRuleTimestampType {
	return &e
}

func (e *EventBreakerRuleTimestampType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "format":
		fallthrough
	case "current":
		*e = EventBreakerRuleTimestampType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventBreakerRuleTimestampType: %v", v)
	}
}

type EventBreakerRuleTimestamp struct {
	Format *string                       `json:"format,omitempty"`
	Length *int64                        `json:"length,omitempty"`
	Type   EventBreakerRuleTimestampType `json:"type"`
}

type EventBreakerRuleType string

const (
	EventBreakerRuleTypeRegex     EventBreakerRuleType = "regex"
	EventBreakerRuleTypeJSON      EventBreakerRuleType = "json"
	EventBreakerRuleTypeJSONArray EventBreakerRuleType = "json_array"
	EventBreakerRuleTypeHeader    EventBreakerRuleType = "header"
	EventBreakerRuleTypeTimestamp EventBreakerRuleType = "timestamp"
	EventBreakerRuleTypeCsv       EventBreakerRuleType = "csv"
)

func (e EventBreakerRuleType) ToPointer() *EventBreakerRuleType {
	return &e
}

func (e *EventBreakerRuleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regex":
		fallthrough
	case "json":
		fallthrough
	case "json_array":
		fallthrough
	case "header":
		fallthrough
	case "timestamp":
		fallthrough
	case "csv":
		*e = EventBreakerRuleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventBreakerRuleType: %v", v)
	}
}

type EventBreakerRule struct {
	CleanFields          *bool                     `json:"cleanFields,omitempty"`
	Condition            string                    `json:"condition"`
	Delimiter            *string                   `json:"delimiter,omitempty"`
	DelimiterRegex       *string                   `json:"delimiterRegex,omitempty"`
	Disabled             *bool                     `json:"disabled,omitempty"`
	EscapeChar           *string                   `json:"escapeChar,omitempty"`
	EventBreakerRegex    *string                   `json:"eventBreakerRegex,omitempty"`
	Fields               []EventBreakerRuleFields  `json:"fields,omitempty"`
	FieldsLineRegex      *string                   `json:"fieldsLineRegex,omitempty"`
	HeaderLineRegex      *string                   `json:"headerLineRegex,omitempty"`
	JSONArrayField       *string                   `json:"jsonArrayField,omitempty"`
	JSONExtractAll       *bool                     `json:"jsonExtractAll,omitempty"`
	JSONTimeField        *string                   `json:"jsonTimeField,omitempty"`
	MaxEventBytes        int64                     `json:"maxEventBytes"`
	Name                 string                    `json:"name"`
	NullFieldVal         *string                   `json:"nullFieldVal,omitempty"`
	Parser               interface{}               `json:"parser,omitempty"`
	ParserEnabled        *bool                     `json:"parserEnabled,omitempty"`
	QuoteChar            *string                   `json:"quoteChar,omitempty"`
	TimeField            *string                   `json:"timeField,omitempty"`
	Timestamp            EventBreakerRuleTimestamp `json:"timestamp"`
	TimestampAnchorRegex string                    `json:"timestampAnchorRegex"`
	TimestampEarliest    *string                   `json:"timestampEarliest,omitempty"`
	TimestampLatest      *string                   `json:"timestampLatest,omitempty"`
	TimestampTimezone    string                    `json:"timestampTimezone"`
	Type                 *EventBreakerRuleType     `json:"type,omitempty"`
}
