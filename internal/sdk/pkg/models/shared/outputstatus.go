// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OutputStatusStatusHealth string

const (
	OutputStatusStatusHealthGreen  OutputStatusStatusHealth = "Green"
	OutputStatusStatusHealthYellow OutputStatusStatusHealth = "Yellow"
	OutputStatusStatusHealthRed    OutputStatusStatusHealth = "Red"
)

func (e OutputStatusStatusHealth) ToPointer() *OutputStatusStatusHealth {
	return &e
}

func (e *OutputStatusStatusHealth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Green":
		fallthrough
	case "Yellow":
		fallthrough
	case "Red":
		*e = OutputStatusStatusHealth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputStatusStatusHealth: %v", v)
	}
}

type OutputStatusStatus struct {
	Health    OutputStatusStatusHealth `json:"health"`
	Metrics   map[string]interface{}   `json:"metrics"`
	Timestamp int64                    `json:"timestamp"`
}

type OutputStatus struct {
	ID     string             `json:"id"`
	Status OutputStatusStatus `json:"status"`
}
