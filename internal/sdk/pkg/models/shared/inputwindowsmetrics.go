// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputWindowsMetricsConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

// InputWindowsMetricsHostCustomCPUMode - Select the level of details for CPU metrics
type InputWindowsMetricsHostCustomCPUMode string

const (
	InputWindowsMetricsHostCustomCPUModeDisabled InputWindowsMetricsHostCustomCPUMode = "disabled"
	InputWindowsMetricsHostCustomCPUModeAll      InputWindowsMetricsHostCustomCPUMode = "all"
	InputWindowsMetricsHostCustomCPUModeCustom   InputWindowsMetricsHostCustomCPUMode = "custom"
)

func (e InputWindowsMetricsHostCustomCPUMode) ToPointer() *InputWindowsMetricsHostCustomCPUMode {
	return &e
}

func (e *InputWindowsMetricsHostCustomCPUMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputWindowsMetricsHostCustomCPUMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsHostCustomCPUMode: %v", v)
	}
}

type InputWindowsMetricsHostCustomCPU struct {
	// Generate metrics for all CPU states
	Detail *bool `json:"detail,omitempty"`
	// Select the level of details for CPU metrics
	Mode *InputWindowsMetricsHostCustomCPUMode `json:"mode,omitempty"`
	// Generate metrics for each CPU
	PerCPU *bool `json:"perCpu,omitempty"`
	// Generate raw, monotonic CPU time counters
	Time *bool `json:"time,omitempty"`
}

// InputWindowsMetricsHostCustomDiskMode - Select the level of details for disk metrics
type InputWindowsMetricsHostCustomDiskMode string

const (
	InputWindowsMetricsHostCustomDiskModeDisabled InputWindowsMetricsHostCustomDiskMode = "disabled"
	InputWindowsMetricsHostCustomDiskModeAll      InputWindowsMetricsHostCustomDiskMode = "all"
	InputWindowsMetricsHostCustomDiskModeCustom   InputWindowsMetricsHostCustomDiskMode = "custom"
)

func (e InputWindowsMetricsHostCustomDiskMode) ToPointer() *InputWindowsMetricsHostCustomDiskMode {
	return &e
}

func (e *InputWindowsMetricsHostCustomDiskMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputWindowsMetricsHostCustomDiskMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsHostCustomDiskMode: %v", v)
	}
}

type InputWindowsMetricsHostCustomDisk struct {
	// Select the level of details for disk metrics
	Mode *InputWindowsMetricsHostCustomDiskMode `json:"mode,omitempty"`
	// Generate separate metrics for each volume
	PerVolume *bool `json:"perVolume,omitempty"`
	// Windows volumes to include/exclude. E.g.: C:, !E:, etc. Wildcards and ! (not) operators are supported. All volumes are included if this list is empty.
	Volumes []string `json:"volumes,omitempty"`
}

// InputWindowsMetricsHostCustomMemoryMode - Select the level of details for memory metrics
type InputWindowsMetricsHostCustomMemoryMode string

const (
	InputWindowsMetricsHostCustomMemoryModeDisabled InputWindowsMetricsHostCustomMemoryMode = "disabled"
	InputWindowsMetricsHostCustomMemoryModeAll      InputWindowsMetricsHostCustomMemoryMode = "all"
	InputWindowsMetricsHostCustomMemoryModeCustom   InputWindowsMetricsHostCustomMemoryMode = "custom"
)

func (e InputWindowsMetricsHostCustomMemoryMode) ToPointer() *InputWindowsMetricsHostCustomMemoryMode {
	return &e
}

func (e *InputWindowsMetricsHostCustomMemoryMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputWindowsMetricsHostCustomMemoryMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsHostCustomMemoryMode: %v", v)
	}
}

type InputWindowsMetricsHostCustomMemory struct {
	// Generate metrics for all memory states
	Detail *bool `json:"detail,omitempty"`
	// Select the level of details for memory metrics
	Mode *InputWindowsMetricsHostCustomMemoryMode `json:"mode,omitempty"`
}

// InputWindowsMetricsHostCustomNetworkMode - Select the level of details for network metrics
type InputWindowsMetricsHostCustomNetworkMode string

const (
	InputWindowsMetricsHostCustomNetworkModeDisabled InputWindowsMetricsHostCustomNetworkMode = "disabled"
	InputWindowsMetricsHostCustomNetworkModeAll      InputWindowsMetricsHostCustomNetworkMode = "all"
	InputWindowsMetricsHostCustomNetworkModeCustom   InputWindowsMetricsHostCustomNetworkMode = "custom"
)

func (e InputWindowsMetricsHostCustomNetworkMode) ToPointer() *InputWindowsMetricsHostCustomNetworkMode {
	return &e
}

func (e *InputWindowsMetricsHostCustomNetworkMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputWindowsMetricsHostCustomNetworkMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsHostCustomNetworkMode: %v", v)
	}
}

type InputWindowsMetricsHostCustomNetwork struct {
	// Generate full network metrics
	Detail *bool `json:"detail,omitempty"`
	// Network interfaces to include/exclude. All interfaces are included if this list is empty.
	Devices []string `json:"devices,omitempty"`
	// Select the level of details for network metrics
	Mode *InputWindowsMetricsHostCustomNetworkMode `json:"mode,omitempty"`
	// Generate separate metrics for each interface
	PerInterface *bool `json:"perInterface,omitempty"`
}

// InputWindowsMetricsHostCustomSystemMode - Select the level of details for system metrics
type InputWindowsMetricsHostCustomSystemMode string

const (
	InputWindowsMetricsHostCustomSystemModeDisabled InputWindowsMetricsHostCustomSystemMode = "disabled"
	InputWindowsMetricsHostCustomSystemModeAll      InputWindowsMetricsHostCustomSystemMode = "all"
	InputWindowsMetricsHostCustomSystemModeCustom   InputWindowsMetricsHostCustomSystemMode = "custom"
)

func (e InputWindowsMetricsHostCustomSystemMode) ToPointer() *InputWindowsMetricsHostCustomSystemMode {
	return &e
}

func (e *InputWindowsMetricsHostCustomSystemMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputWindowsMetricsHostCustomSystemMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsHostCustomSystemMode: %v", v)
	}
}

type InputWindowsMetricsHostCustomSystem struct {
	// Generate metrics for all system information
	Detail *bool `json:"detail,omitempty"`
	// Select the level of details for system metrics
	Mode *InputWindowsMetricsHostCustomSystemMode `json:"mode,omitempty"`
}

type InputWindowsMetricsHostCustom struct {
	CPU     *InputWindowsMetricsHostCustomCPU     `json:"cpu,omitempty"`
	Disk    *InputWindowsMetricsHostCustomDisk    `json:"disk,omitempty"`
	Memory  *InputWindowsMetricsHostCustomMemory  `json:"memory,omitempty"`
	Network *InputWindowsMetricsHostCustomNetwork `json:"network,omitempty"`
	System  *InputWindowsMetricsHostCustomSystem  `json:"system,omitempty"`
}

// InputWindowsMetricsHostMode - Select level of detail for host metrics
type InputWindowsMetricsHostMode string

const (
	InputWindowsMetricsHostModeDisabled InputWindowsMetricsHostMode = "disabled"
	InputWindowsMetricsHostModeAll      InputWindowsMetricsHostMode = "all"
	InputWindowsMetricsHostModeCustom   InputWindowsMetricsHostMode = "custom"
)

func (e InputWindowsMetricsHostMode) ToPointer() *InputWindowsMetricsHostMode {
	return &e
}

func (e *InputWindowsMetricsHostMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputWindowsMetricsHostMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsHostMode: %v", v)
	}
}

type InputWindowsMetricsHost struct {
	Custom *InputWindowsMetricsHostCustom `json:"custom,omitempty"`
	// Select level of detail for host metrics
	Mode *InputWindowsMetricsHostMode `json:"mode,omitempty"`
}

type InputWindowsMetricsMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputWindowsMetricsPersistenceCompression - Select data compression format. Optional.
type InputWindowsMetricsPersistenceCompression string

const (
	InputWindowsMetricsPersistenceCompressionNone InputWindowsMetricsPersistenceCompression = "none"
	InputWindowsMetricsPersistenceCompressionGzip InputWindowsMetricsPersistenceCompression = "gzip"
)

func (e InputWindowsMetricsPersistenceCompression) ToPointer() *InputWindowsMetricsPersistenceCompression {
	return &e
}

func (e *InputWindowsMetricsPersistenceCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputWindowsMetricsPersistenceCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsPersistenceCompression: %v", v)
	}
}

type InputWindowsMetricsPersistence struct {
	// Select data compression format. Optional.
	Compress *InputWindowsMetricsPersistenceCompression `json:"compress,omitempty"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/windows_metrics
	DestPath *string `json:"destPath,omitempty"`
	// Spool metrics to disk for Cribl Edge and Search
	Enable *bool `json:"enable,omitempty"`
	// Maximum disk space allowed to be consumed (e.g., 420MB or 4GB). Once reached, older data will be deleted.
	MaxDataSize *string `json:"maxDataSize,omitempty"`
	// Maximum amount of time to retain data (e.g., 2h or 4d). Once reached, older data will be deleted.
	MaxDataTime *string `json:"maxDataTime,omitempty"`
	// Time span for each file bucket
	TimeWindow *string `json:"timeWindow,omitempty"`
}

// InputWindowsMetricsPqCompression - Codec to use to compress the persisted data.
type InputWindowsMetricsPqCompression string

const (
	InputWindowsMetricsPqCompressionNone InputWindowsMetricsPqCompression = "none"
	InputWindowsMetricsPqCompressionGzip InputWindowsMetricsPqCompression = "gzip"
)

func (e InputWindowsMetricsPqCompression) ToPointer() *InputWindowsMetricsPqCompression {
	return &e
}

func (e *InputWindowsMetricsPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputWindowsMetricsPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsPqCompression: %v", v)
	}
}

// InputWindowsMetricsPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputWindowsMetricsPqMode string

const (
	InputWindowsMetricsPqModeSmart  InputWindowsMetricsPqMode = "smart"
	InputWindowsMetricsPqModeAlways InputWindowsMetricsPqMode = "always"
)

func (e InputWindowsMetricsPqMode) ToPointer() *InputWindowsMetricsPqMode {
	return &e
}

func (e *InputWindowsMetricsPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputWindowsMetricsPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsPqMode: %v", v)
	}
}

type InputWindowsMetricsPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputWindowsMetricsPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputWindowsMetricsPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputWindowsMetricsInputType string

const (
	InputWindowsMetricsInputTypeSplunk            InputWindowsMetricsInputType = "splunk"
	InputWindowsMetricsInputTypeSplunkHec         InputWindowsMetricsInputType = "splunk_hec"
	InputWindowsMetricsInputTypeSyslog            InputWindowsMetricsInputType = "syslog"
	InputWindowsMetricsInputTypeTcpjson           InputWindowsMetricsInputType = "tcpjson"
	InputWindowsMetricsInputTypeGrafana           InputWindowsMetricsInputType = "grafana"
	InputWindowsMetricsInputTypeLoki              InputWindowsMetricsInputType = "loki"
	InputWindowsMetricsInputTypeHTTP              InputWindowsMetricsInputType = "http"
	InputWindowsMetricsInputTypeHTTPRaw           InputWindowsMetricsInputType = "http_raw"
	InputWindowsMetricsInputTypeFirehose          InputWindowsMetricsInputType = "firehose"
	InputWindowsMetricsInputTypeElastic           InputWindowsMetricsInputType = "elastic"
	InputWindowsMetricsInputTypeKafka             InputWindowsMetricsInputType = "kafka"
	InputWindowsMetricsInputTypeConfluentCloud    InputWindowsMetricsInputType = "confluent_cloud"
	InputWindowsMetricsInputTypeMsk               InputWindowsMetricsInputType = "msk"
	InputWindowsMetricsInputTypeKinesis           InputWindowsMetricsInputType = "kinesis"
	InputWindowsMetricsInputTypeEventhub          InputWindowsMetricsInputType = "eventhub"
	InputWindowsMetricsInputTypeAzureBlob         InputWindowsMetricsInputType = "azure_blob"
	InputWindowsMetricsInputTypeMetrics           InputWindowsMetricsInputType = "metrics"
	InputWindowsMetricsInputTypeSqs               InputWindowsMetricsInputType = "sqs"
	InputWindowsMetricsInputTypeS3                InputWindowsMetricsInputType = "s3"
	InputWindowsMetricsInputTypeSnmp              InputWindowsMetricsInputType = "snmp"
	InputWindowsMetricsInputTypeCrowdstrike       InputWindowsMetricsInputType = "crowdstrike"
	InputWindowsMetricsInputTypeTCP               InputWindowsMetricsInputType = "tcp"
	InputWindowsMetricsInputTypeRawUDP            InputWindowsMetricsInputType = "raw_udp"
	InputWindowsMetricsInputTypeOffice365Service  InputWindowsMetricsInputType = "office365_service"
	InputWindowsMetricsInputTypeOffice365Mgmt     InputWindowsMetricsInputType = "office365_mgmt"
	InputWindowsMetricsInputTypeOffice365MsgTrace InputWindowsMetricsInputType = "office365_msg_trace"
	InputWindowsMetricsInputTypePrometheus        InputWindowsMetricsInputType = "prometheus"
	InputWindowsMetricsInputTypeEdgePrometheus    InputWindowsMetricsInputType = "edge_prometheus"
	InputWindowsMetricsInputTypePrometheusRw      InputWindowsMetricsInputType = "prometheus_rw"
	InputWindowsMetricsInputTypeAppscope          InputWindowsMetricsInputType = "appscope"
	InputWindowsMetricsInputTypeGooglePubsub      InputWindowsMetricsInputType = "google_pubsub"
	InputWindowsMetricsInputTypeOpenTelemetry     InputWindowsMetricsInputType = "open_telemetry"
	InputWindowsMetricsInputTypeDatadogAgent      InputWindowsMetricsInputType = "datadog_agent"
	InputWindowsMetricsInputTypeWef               InputWindowsMetricsInputType = "wef"
	InputWindowsMetricsInputTypeDatagen           InputWindowsMetricsInputType = "datagen"
	InputWindowsMetricsInputTypeCribl             InputWindowsMetricsInputType = "cribl"
	InputWindowsMetricsInputTypeCriblmetrics      InputWindowsMetricsInputType = "criblmetrics"
	InputWindowsMetricsInputTypeCriblHTTP         InputWindowsMetricsInputType = "cribl_http"
	InputWindowsMetricsInputTypeCriblTCP          InputWindowsMetricsInputType = "cribl_tcp"
	InputWindowsMetricsInputTypeWinEventLogs      InputWindowsMetricsInputType = "win_event_logs"
	InputWindowsMetricsInputTypeSystemMetrics     InputWindowsMetricsInputType = "system_metrics"
	InputWindowsMetricsInputTypeWindowsMetrics    InputWindowsMetricsInputType = "windows_metrics"
	InputWindowsMetricsInputTypeSystemState       InputWindowsMetricsInputType = "system_state"
	InputWindowsMetricsInputTypeKubeMetrics       InputWindowsMetricsInputType = "kube_metrics"
	InputWindowsMetricsInputTypeKubeLogs          InputWindowsMetricsInputType = "kube_logs"
	InputWindowsMetricsInputTypeKubeEvents        InputWindowsMetricsInputType = "kube_events"
	InputWindowsMetricsInputTypeExec              InputWindowsMetricsInputType = "exec"
	InputWindowsMetricsInputTypeSplunkSearch      InputWindowsMetricsInputType = "splunk_search"
	InputWindowsMetricsInputTypeFile              InputWindowsMetricsInputType = "file"
	InputWindowsMetricsInputTypeJournalFiles      InputWindowsMetricsInputType = "journal_files"
)

func (e InputWindowsMetricsInputType) ToPointer() *InputWindowsMetricsInputType {
	return &e
}

func (e *InputWindowsMetricsInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		*e = InputWindowsMetricsInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWindowsMetricsInputType: %v", v)
	}
}

type InputWindowsMetrics struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputWindowsMetricsConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string                  `json:"environment,omitempty"`
	Host        *InputWindowsMetricsHost `json:"host,omitempty"`
	// Unique ID for this input
	ID string `json:"id"`
	// Time, in seconds, between consecutive metric collections. Default is 10 seconds.
	Interval *int64 `json:"interval,omitempty"`
	// Fields to add to events from this input.
	Metadata    []InputWindowsMetricsMetadata   `json:"metadata,omitempty"`
	Persistence *InputWindowsMetricsPersistence `json:"persistence,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string                `json:"pipeline,omitempty"`
	Pq       *InputWindowsMetricsPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                     `json:"streamtags,omitempty"`
	Type       InputWindowsMetricsInputType `json:"type"`
}
