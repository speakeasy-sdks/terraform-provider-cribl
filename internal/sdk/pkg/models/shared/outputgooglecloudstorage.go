// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OutputGoogleCloudStorageAuthenticationMethod string

const (
	OutputGoogleCloudStorageAuthenticationMethodSecret OutputGoogleCloudStorageAuthenticationMethod = "secret"
	OutputGoogleCloudStorageAuthenticationMethodManual OutputGoogleCloudStorageAuthenticationMethod = "manual"
)

func (e OutputGoogleCloudStorageAuthenticationMethod) ToPointer() *OutputGoogleCloudStorageAuthenticationMethod {
	return &e
}

func (e *OutputGoogleCloudStorageAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = OutputGoogleCloudStorageAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageAuthenticationMethod: %v", v)
	}
}

// OutputGoogleCloudStorageCompress - Choose data compression format to apply before moving files to final destination.
type OutputGoogleCloudStorageCompress string

const (
	OutputGoogleCloudStorageCompressNone OutputGoogleCloudStorageCompress = "none"
	OutputGoogleCloudStorageCompressGzip OutputGoogleCloudStorageCompress = "gzip"
)

func (e OutputGoogleCloudStorageCompress) ToPointer() *OutputGoogleCloudStorageCompress {
	return &e
}

func (e *OutputGoogleCloudStorageCompress) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputGoogleCloudStorageCompress(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageCompress: %v", v)
	}
}

// OutputGoogleCloudStorageDataFormat - Format of the output data.
type OutputGoogleCloudStorageDataFormat string

const (
	OutputGoogleCloudStorageDataFormatParquet OutputGoogleCloudStorageDataFormat = "parquet"
	OutputGoogleCloudStorageDataFormatRaw     OutputGoogleCloudStorageDataFormat = "raw"
	OutputGoogleCloudStorageDataFormatJSON    OutputGoogleCloudStorageDataFormat = "json"
)

func (e OutputGoogleCloudStorageDataFormat) ToPointer() *OutputGoogleCloudStorageDataFormat {
	return &e
}

func (e *OutputGoogleCloudStorageDataFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parquet":
		fallthrough
	case "raw":
		fallthrough
	case "json":
		*e = OutputGoogleCloudStorageDataFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageDataFormat: %v", v)
	}
}

// OutputGoogleCloudStorageObjectACL - Object ACL to assign to uploaded objects.
type OutputGoogleCloudStorageObjectACL string

const (
	OutputGoogleCloudStorageObjectACLPrivate                OutputGoogleCloudStorageObjectACL = "private"
	OutputGoogleCloudStorageObjectACLBucketOwnerRead        OutputGoogleCloudStorageObjectACL = "bucket-owner-read"
	OutputGoogleCloudStorageObjectACLBucketOwnerFullControl OutputGoogleCloudStorageObjectACL = "bucket-owner-full-control"
	OutputGoogleCloudStorageObjectACLProjectPrivate         OutputGoogleCloudStorageObjectACL = "project-private"
	OutputGoogleCloudStorageObjectACLAuthenticatedRead      OutputGoogleCloudStorageObjectACL = "authenticated-read"
	OutputGoogleCloudStorageObjectACLPublicRead             OutputGoogleCloudStorageObjectACL = "public-read"
)

func (e OutputGoogleCloudStorageObjectACL) ToPointer() *OutputGoogleCloudStorageObjectACL {
	return &e
}

func (e *OutputGoogleCloudStorageObjectACL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "bucket-owner-read":
		fallthrough
	case "bucket-owner-full-control":
		fallthrough
	case "project-private":
		fallthrough
	case "authenticated-read":
		fallthrough
	case "public-read":
		*e = OutputGoogleCloudStorageObjectACL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageObjectACL: %v", v)
	}
}

// OutputGoogleCloudStorageBackpressureBehavior - Whether to block or drop events when all receivers are exerting backpressure.
type OutputGoogleCloudStorageBackpressureBehavior string

const (
	OutputGoogleCloudStorageBackpressureBehaviorBlock OutputGoogleCloudStorageBackpressureBehavior = "block"
	OutputGoogleCloudStorageBackpressureBehaviorDrop  OutputGoogleCloudStorageBackpressureBehavior = "drop"
)

func (e OutputGoogleCloudStorageBackpressureBehavior) ToPointer() *OutputGoogleCloudStorageBackpressureBehavior {
	return &e
}

func (e *OutputGoogleCloudStorageBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputGoogleCloudStorageBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageBackpressureBehavior: %v", v)
	}
}

// OutputGoogleCloudStorageDataPageVersion - Serialization format of data pages. Note that not all reader implentations support Data page V2.
type OutputGoogleCloudStorageDataPageVersion string

const (
	OutputGoogleCloudStorageDataPageVersionDataPageV1 OutputGoogleCloudStorageDataPageVersion = "DATA_PAGE_V1"
	OutputGoogleCloudStorageDataPageVersionDataPageV2 OutputGoogleCloudStorageDataPageVersion = "DATA_PAGE_V2"
)

func (e OutputGoogleCloudStorageDataPageVersion) ToPointer() *OutputGoogleCloudStorageDataPageVersion {
	return &e
}

func (e *OutputGoogleCloudStorageDataPageVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATA_PAGE_V1":
		fallthrough
	case "DATA_PAGE_V2":
		*e = OutputGoogleCloudStorageDataPageVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageDataPageVersion: %v", v)
	}
}

// OutputGoogleCloudStorageParquetVersion - Determines which data types are supported and how they are represented.
type OutputGoogleCloudStorageParquetVersion string

const (
	OutputGoogleCloudStorageParquetVersionParquet10 OutputGoogleCloudStorageParquetVersion = "PARQUET_1_0"
	OutputGoogleCloudStorageParquetVersionParquet24 OutputGoogleCloudStorageParquetVersion = "PARQUET_2_4"
	OutputGoogleCloudStorageParquetVersionParquet26 OutputGoogleCloudStorageParquetVersion = "PARQUET_2_6"
)

func (e OutputGoogleCloudStorageParquetVersion) ToPointer() *OutputGoogleCloudStorageParquetVersion {
	return &e
}

func (e *OutputGoogleCloudStorageParquetVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARQUET_1_0":
		fallthrough
	case "PARQUET_2_4":
		fallthrough
	case "PARQUET_2_6":
		*e = OutputGoogleCloudStorageParquetVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageParquetVersion: %v", v)
	}
}

// OutputGoogleCloudStorageRegion - Region where the bucket is located.
type OutputGoogleCloudStorageRegion string

const (
	OutputGoogleCloudStorageRegionNorthamericaNortheast1 OutputGoogleCloudStorageRegion = "NORTHAMERICA-NORTHEAST1"
	OutputGoogleCloudStorageRegionNorthamericaNortheast2 OutputGoogleCloudStorageRegion = "NORTHAMERICA-NORTHEAST2"
	OutputGoogleCloudStorageRegionUsCentral1             OutputGoogleCloudStorageRegion = "US-CENTRAL1"
	OutputGoogleCloudStorageRegionUsEast1                OutputGoogleCloudStorageRegion = "US-EAST1"
	OutputGoogleCloudStorageRegionUsEast4                OutputGoogleCloudStorageRegion = "US-EAST4"
	OutputGoogleCloudStorageRegionUsEast5                OutputGoogleCloudStorageRegion = "US-EAST5"
	OutputGoogleCloudStorageRegionUsSouth1               OutputGoogleCloudStorageRegion = "US-SOUTH1"
	OutputGoogleCloudStorageRegionUsWest1                OutputGoogleCloudStorageRegion = "US-WEST1"
	OutputGoogleCloudStorageRegionUsWest2                OutputGoogleCloudStorageRegion = "US-WEST2"
	OutputGoogleCloudStorageRegionUsWest3                OutputGoogleCloudStorageRegion = "US-WEST3"
	OutputGoogleCloudStorageRegionUsWest4                OutputGoogleCloudStorageRegion = "US-WEST4"
	OutputGoogleCloudStorageRegionSouthamericaEast1      OutputGoogleCloudStorageRegion = "SOUTHAMERICA-EAST1"
	OutputGoogleCloudStorageRegionSouthamericaWest1      OutputGoogleCloudStorageRegion = "SOUTHAMERICA-WEST1"
	OutputGoogleCloudStorageRegionEuropeCentral2         OutputGoogleCloudStorageRegion = "EUROPE-CENTRAL2"
	OutputGoogleCloudStorageRegionEuropeSouthwest1       OutputGoogleCloudStorageRegion = "EUROPE-SOUTHWEST1"
	OutputGoogleCloudStorageRegionEuropeNorth1           OutputGoogleCloudStorageRegion = "EUROPE-NORTH1"
	OutputGoogleCloudStorageRegionEuropeWest1            OutputGoogleCloudStorageRegion = "EUROPE-WEST1"
	OutputGoogleCloudStorageRegionEuropeWest2            OutputGoogleCloudStorageRegion = "EUROPE-WEST2"
	OutputGoogleCloudStorageRegionEuropeWest3            OutputGoogleCloudStorageRegion = "EUROPE-WEST3"
	OutputGoogleCloudStorageRegionEuropeWest4            OutputGoogleCloudStorageRegion = "EUROPE-WEST4"
	OutputGoogleCloudStorageRegionEuropeWest6            OutputGoogleCloudStorageRegion = "EUROPE-WEST6"
	OutputGoogleCloudStorageRegionEuropeWest8            OutputGoogleCloudStorageRegion = "EUROPE-WEST8"
	OutputGoogleCloudStorageRegionEuropeWest9            OutputGoogleCloudStorageRegion = "EUROPE-WEST9"
	OutputGoogleCloudStorageRegionEuropeWest12           OutputGoogleCloudStorageRegion = "EUROPE-WEST12"
	OutputGoogleCloudStorageRegionAsiaEast1              OutputGoogleCloudStorageRegion = "ASIA-EAST1"
	OutputGoogleCloudStorageRegionAsiaEast2              OutputGoogleCloudStorageRegion = "ASIA-EAST2"
	OutputGoogleCloudStorageRegionAsiaNortheast1         OutputGoogleCloudStorageRegion = "ASIA-NORTHEAST1"
	OutputGoogleCloudStorageRegionAsiaNortheast2         OutputGoogleCloudStorageRegion = "ASIA-NORTHEAST2"
	OutputGoogleCloudStorageRegionAsiaNortheast3         OutputGoogleCloudStorageRegion = "ASIA-NORTHEAST3"
	OutputGoogleCloudStorageRegionAsiaSouth1             OutputGoogleCloudStorageRegion = "ASIA-SOUTH1"
	OutputGoogleCloudStorageRegionAsiaSouth2             OutputGoogleCloudStorageRegion = "ASIA-SOUTH2"
	OutputGoogleCloudStorageRegionAsiaSoutheast1         OutputGoogleCloudStorageRegion = "ASIA-SOUTHEAST1"
	OutputGoogleCloudStorageRegionAsiaSoutheast2         OutputGoogleCloudStorageRegion = "ASIA-SOUTHEAST2"
	OutputGoogleCloudStorageRegionAustraliaSoutheast1    OutputGoogleCloudStorageRegion = "AUSTRALIA-SOUTHEAST1"
	OutputGoogleCloudStorageRegionAustraliaSoutheast2    OutputGoogleCloudStorageRegion = "AUSTRALIA-SOUTHEAST2"
	OutputGoogleCloudStorageRegionMeCentral1             OutputGoogleCloudStorageRegion = "ME-CENTRAL1"
	OutputGoogleCloudStorageRegionMeWest1                OutputGoogleCloudStorageRegion = "ME-WEST1"
	OutputGoogleCloudStorageRegionAsia                   OutputGoogleCloudStorageRegion = "ASIA"
	OutputGoogleCloudStorageRegionEu                     OutputGoogleCloudStorageRegion = "EU"
	OutputGoogleCloudStorageRegionUs                     OutputGoogleCloudStorageRegion = "US"
	OutputGoogleCloudStorageRegionAsia1                  OutputGoogleCloudStorageRegion = "ASIA1"
	OutputGoogleCloudStorageRegionEur4                   OutputGoogleCloudStorageRegion = "EUR4"
	OutputGoogleCloudStorageRegionNam4                   OutputGoogleCloudStorageRegion = "NAM4"
)

func (e OutputGoogleCloudStorageRegion) ToPointer() *OutputGoogleCloudStorageRegion {
	return &e
}

func (e *OutputGoogleCloudStorageRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NORTHAMERICA-NORTHEAST1":
		fallthrough
	case "NORTHAMERICA-NORTHEAST2":
		fallthrough
	case "US-CENTRAL1":
		fallthrough
	case "US-EAST1":
		fallthrough
	case "US-EAST4":
		fallthrough
	case "US-EAST5":
		fallthrough
	case "US-SOUTH1":
		fallthrough
	case "US-WEST1":
		fallthrough
	case "US-WEST2":
		fallthrough
	case "US-WEST3":
		fallthrough
	case "US-WEST4":
		fallthrough
	case "SOUTHAMERICA-EAST1":
		fallthrough
	case "SOUTHAMERICA-WEST1":
		fallthrough
	case "EUROPE-CENTRAL2":
		fallthrough
	case "EUROPE-SOUTHWEST1":
		fallthrough
	case "EUROPE-NORTH1":
		fallthrough
	case "EUROPE-WEST1":
		fallthrough
	case "EUROPE-WEST2":
		fallthrough
	case "EUROPE-WEST3":
		fallthrough
	case "EUROPE-WEST4":
		fallthrough
	case "EUROPE-WEST6":
		fallthrough
	case "EUROPE-WEST8":
		fallthrough
	case "EUROPE-WEST9":
		fallthrough
	case "EUROPE-WEST12":
		fallthrough
	case "ASIA-EAST1":
		fallthrough
	case "ASIA-EAST2":
		fallthrough
	case "ASIA-NORTHEAST1":
		fallthrough
	case "ASIA-NORTHEAST2":
		fallthrough
	case "ASIA-NORTHEAST3":
		fallthrough
	case "ASIA-SOUTH1":
		fallthrough
	case "ASIA-SOUTH2":
		fallthrough
	case "ASIA-SOUTHEAST1":
		fallthrough
	case "ASIA-SOUTHEAST2":
		fallthrough
	case "AUSTRALIA-SOUTHEAST1":
		fallthrough
	case "AUSTRALIA-SOUTHEAST2":
		fallthrough
	case "ME-CENTRAL1":
		fallthrough
	case "ME-WEST1":
		fallthrough
	case "ASIA":
		fallthrough
	case "EU":
		fallthrough
	case "US":
		fallthrough
	case "ASIA1":
		fallthrough
	case "EUR4":
		fallthrough
	case "NAM4":
		*e = OutputGoogleCloudStorageRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageRegion: %v", v)
	}
}

// OutputGoogleCloudStorageSignatureVersion - Signature version to use for signing Google Cloud Storage requests.
type OutputGoogleCloudStorageSignatureVersion string

const (
	OutputGoogleCloudStorageSignatureVersionV2 OutputGoogleCloudStorageSignatureVersion = "v2"
	OutputGoogleCloudStorageSignatureVersionV4 OutputGoogleCloudStorageSignatureVersion = "v4"
)

func (e OutputGoogleCloudStorageSignatureVersion) ToPointer() *OutputGoogleCloudStorageSignatureVersion {
	return &e
}

func (e *OutputGoogleCloudStorageSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = OutputGoogleCloudStorageSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageSignatureVersion: %v", v)
	}
}

// OutputGoogleCloudStorageStorageClass - Storage class to select for uploaded objects.
type OutputGoogleCloudStorageStorageClass string

const (
	OutputGoogleCloudStorageStorageClassStandard OutputGoogleCloudStorageStorageClass = "STANDARD"
	OutputGoogleCloudStorageStorageClassNearline OutputGoogleCloudStorageStorageClass = "NEARLINE"
	OutputGoogleCloudStorageStorageClassColdline OutputGoogleCloudStorageStorageClass = "COLDLINE"
	OutputGoogleCloudStorageStorageClassArchive  OutputGoogleCloudStorageStorageClass = "ARCHIVE"
)

func (e OutputGoogleCloudStorageStorageClass) ToPointer() *OutputGoogleCloudStorageStorageClass {
	return &e
}

func (e *OutputGoogleCloudStorageStorageClass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STANDARD":
		fallthrough
	case "NEARLINE":
		fallthrough
	case "COLDLINE":
		fallthrough
	case "ARCHIVE":
		*e = OutputGoogleCloudStorageStorageClass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageStorageClass: %v", v)
	}
}

type OutputGoogleCloudStorageType string

const (
	OutputGoogleCloudStorageTypeGoogleCloudStorage OutputGoogleCloudStorageType = "google_cloud_storage"
)

func (e OutputGoogleCloudStorageType) ToPointer() *OutputGoogleCloudStorageType {
	return &e
}

func (e *OutputGoogleCloudStorageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google_cloud_storage":
		*e = OutputGoogleCloudStorageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputGoogleCloudStorageType: %v", v)
	}
}

type OutputGoogleCloudStorage struct {
	// Append output's ID to staging location.
	AddIDToStagePath *bool `json:"addIdToStagePath,omitempty"`
	// HMAC access Key. This value can be a constant or a JavaScript expression(e.g., `${C.env.GCS_ACCESS_KEY}`).
	AwsAPIKey               *string                                       `json:"awsApiKey,omitempty"`
	AwsAuthenticationMethod *OutputGoogleCloudStorageAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// Select (or create) a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
	// HMAC secret. This value can be a constant or a JavaScript expression(e.g., `${C.env.GCS_SECRET}`).
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// JavaScript expression to define the output filename prefix (can be constant).
	BaseFileName *string `json:"baseFileName,omitempty"`
	// Name of the destination Bucket. This value can be a constant or a JavaScript expression that can only be evaluated at init time. E.g. referencing a Global Variable: `myBucket-${C.vars.myVar}`.
	Bucket string `json:"bucket"`
	// Choose data compression format to apply before moving files to final destination.
	Compress *OutputGoogleCloudStorageCompress `json:"compress,omitempty"`
	// Prefix to append to files before uploading. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. E.g., referencing a Global Variable: `myKeyPrefix-${C.vars.myVar}`.
	DestPath string `json:"destPath"`
	// How often (secs) to clean-up empty directories when 'Remove Staging Dirs' is enabled.
	EmptyDirCleanupSec *int64 `json:"emptyDirCleanupSec,omitempty"`
	// Google Cloud Storage service endpoint.
	Endpoint string `json:"endpoint"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`)
	FileNameSuffix *string `json:"fileNameSuffix,omitempty"`
	// Format of the output data.
	Format *OutputGoogleCloudStorageDataFormat `json:"format,omitempty"`
	// Unique ID for this output
	ID *string `json:"id,omitempty"`
	// Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location.
	MaxFileIdleTimeSec *int64 `json:"maxFileIdleTimeSec,omitempty"`
	// Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location.
	MaxFileOpenTimeSec *int64 `json:"maxFileOpenTimeSec,omitempty"`
	// Maximum uncompressed output file size. Files of this size will be closed and moved to final output location.
	MaxFileSizeMB *int64 `json:"maxFileSizeMB,omitempty"`
	// Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location.
	MaxOpenFiles *int64 `json:"maxOpenFiles,omitempty"`
	// Object ACL to assign to uploaded objects.
	ObjectACL *OutputGoogleCloudStorageObjectACL `json:"objectACL,omitempty"`
	// Whether to block or drop events when all receivers are exerting backpressure.
	OnBackpressure *OutputGoogleCloudStorageBackpressureBehavior `json:"onBackpressure,omitempty"`
	// Serialization format of data pages. Note that not all reader implentations support Data page V2.
	ParquetDataPageVersion *OutputGoogleCloudStorageDataPageVersion `json:"parquetDataPageVersion,omitempty"`
	// Ideal memory size for page segments. E.g., 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression. Imposes a target, not a strict limit; the final size of a row group may be larger or smaller.
	ParquetPageSize *string `json:"parquetPageSize,omitempty"`
	// Ideal memory size for row group segments. E.g., 128MB or 1GB. Affects memory use when writing. Imposes a target, not a strict limit; the final size of a row group may be larger or smaller.
	ParquetRowGroupSize *string `json:"parquetRowGroupSize,omitempty"`
	// Determines which data types are supported and how they are represented.
	ParquetVersion *OutputGoogleCloudStorageParquetVersion `json:"parquetVersion,omitempty"`
	// JS expression defining how files are partitioned and organized. Default is date-based. If blank, Stream will fall back to the event's __partition field value – if present – otherwise to each location's root directory.
	PartitionExpr *string `json:"partitionExpr,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// Region where the bucket is located.
	Region OutputGoogleCloudStorageRegion `json:"region"`
	// Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Remove empty staging directories after moving files.
	RemoveEmptyDirs *bool `json:"removeEmptyDirs,omitempty"`
	// Whether to reuse connections between requests, which can improve performance.
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// To log rows that @{product} skips due to data mismatch, first set logging to Debug, then toggle this on. Logs up to 20 unique rows.
	ShouldLogInvalidRows *bool `json:"shouldLogInvalidRows,omitempty"`
	// Signature version to use for signing Google Cloud Storage requests.
	SignatureVersion *OutputGoogleCloudStorageSignatureVersion `json:"signatureVersion,omitempty"`
	Spacer           *string                                   `json:"spacer,omitempty"`
	// Filesystem location in which to buffer files, before compressing and moving to final destination. Use performant stable storage.
	StagePath string `json:"stagePath"`
	// Storage class to select for uploaded objects.
	StorageClass *OutputGoogleCloudStorageStorageClass `json:"storageClass,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string                      `json:"systemFields,omitempty"`
	Type         *OutputGoogleCloudStorageType `json:"type,omitempty"`
}
