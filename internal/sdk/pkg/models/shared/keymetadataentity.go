// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type KeyMetadataEntityEncryptionAlgorithm string

const (
	KeyMetadataEntityEncryptionAlgorithmAes256Cbc KeyMetadataEntityEncryptionAlgorithm = "aes-256-cbc"
	KeyMetadataEntityEncryptionAlgorithmAes256Gcm KeyMetadataEntityEncryptionAlgorithm = "aes-256-gcm"
)

func (e KeyMetadataEntityEncryptionAlgorithm) ToPointer() *KeyMetadataEntityEncryptionAlgorithm {
	return &e
}

func (e *KeyMetadataEntityEncryptionAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aes-256-cbc":
		fallthrough
	case "aes-256-gcm":
		*e = KeyMetadataEntityEncryptionAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeyMetadataEntityEncryptionAlgorithm: %v", v)
	}
}

type KeyMetadataEntityKMSForThisKey string

const (
	KeyMetadataEntityKMSForThisKeyLocal KeyMetadataEntityKMSForThisKey = "local"
)

func (e KeyMetadataEntityKMSForThisKey) ToPointer() *KeyMetadataEntityKMSForThisKey {
	return &e
}

func (e *KeyMetadataEntityKMSForThisKey) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "local":
		*e = KeyMetadataEntityKMSForThisKey(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeyMetadataEntityKMSForThisKey: %v", v)
	}
}

// KeyMetadataEntity - New KeyMetadataEntity object
type KeyMetadataEntity struct {
	Algorithm   KeyMetadataEntityEncryptionAlgorithm `json:"algorithm"`
	CipherKey   *string                              `json:"cipherKey,omitempty"`
	Created     *int64                               `json:"created,omitempty"`
	Description *string                              `json:"description,omitempty"`
	Expires     *int64                               `json:"expires,omitempty"`
	KeyID       string                               `json:"keyId"`
	Keyclass    int64                                `json:"keyclass"`
	Kms         KeyMetadataEntityKMSForThisKey       `json:"kms"`
	PlainKey    *string                              `json:"plainKey,omitempty"`
	// Seed encryption with a [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) to make the key more random and unique. Must be toggled on with the aes-256-gcm algorithm.
	UseIV *bool `json:"useIV,omitempty"`
}
