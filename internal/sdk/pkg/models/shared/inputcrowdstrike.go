// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputCrowdstrikeAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputCrowdstrikeAuthenticationMethod string

const (
	InputCrowdstrikeAuthenticationMethodSecret InputCrowdstrikeAuthenticationMethod = "secret"
	InputCrowdstrikeAuthenticationMethodManual InputCrowdstrikeAuthenticationMethod = "manual"
)

func (e InputCrowdstrikeAuthenticationMethod) ToPointer() *InputCrowdstrikeAuthenticationMethod {
	return &e
}

func (e *InputCrowdstrikeAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputCrowdstrikeAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeAuthenticationMethod: %v", v)
	}
}

type InputCrowdstrikeConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputCrowdstrikeMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputCrowdstrikePqCompression - Codec to use to compress the persisted data.
type InputCrowdstrikePqCompression string

const (
	InputCrowdstrikePqCompressionNone InputCrowdstrikePqCompression = "none"
	InputCrowdstrikePqCompressionGzip InputCrowdstrikePqCompression = "gzip"
)

func (e InputCrowdstrikePqCompression) ToPointer() *InputCrowdstrikePqCompression {
	return &e
}

func (e *InputCrowdstrikePqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputCrowdstrikePqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikePqCompression: %v", v)
	}
}

// InputCrowdstrikePqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputCrowdstrikePqMode string

const (
	InputCrowdstrikePqModeSmart  InputCrowdstrikePqMode = "smart"
	InputCrowdstrikePqModeAlways InputCrowdstrikePqMode = "always"
)

func (e InputCrowdstrikePqMode) ToPointer() *InputCrowdstrikePqMode {
	return &e
}

func (e *InputCrowdstrikePqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputCrowdstrikePqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikePqMode: %v", v)
	}
}

type InputCrowdstrikePq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputCrowdstrikePqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputCrowdstrikePqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputCrowdstrikePreprocess struct {
	// Arguments
	Args []string `json:"args,omitempty"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Enable Custom Command
	Disabled bool `json:"disabled"`
}

// InputCrowdstrikeRegion - AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
type InputCrowdstrikeRegion string

const (
	InputCrowdstrikeRegionUsEast1      InputCrowdstrikeRegion = "us-east-1"
	InputCrowdstrikeRegionUsEast2      InputCrowdstrikeRegion = "us-east-2"
	InputCrowdstrikeRegionUsWest1      InputCrowdstrikeRegion = "us-west-1"
	InputCrowdstrikeRegionUsWest2      InputCrowdstrikeRegion = "us-west-2"
	InputCrowdstrikeRegionAfSouth1     InputCrowdstrikeRegion = "af-south-1"
	InputCrowdstrikeRegionCaCentral1   InputCrowdstrikeRegion = "ca-central-1"
	InputCrowdstrikeRegionEuWest1      InputCrowdstrikeRegion = "eu-west-1"
	InputCrowdstrikeRegionEuCentral1   InputCrowdstrikeRegion = "eu-central-1"
	InputCrowdstrikeRegionEuWest2      InputCrowdstrikeRegion = "eu-west-2"
	InputCrowdstrikeRegionEuSouth1     InputCrowdstrikeRegion = "eu-south-1"
	InputCrowdstrikeRegionEuWest3      InputCrowdstrikeRegion = "eu-west-3"
	InputCrowdstrikeRegionEuNorth1     InputCrowdstrikeRegion = "eu-north-1"
	InputCrowdstrikeRegionApEast1      InputCrowdstrikeRegion = "ap-east-1"
	InputCrowdstrikeRegionApNortheast1 InputCrowdstrikeRegion = "ap-northeast-1"
	InputCrowdstrikeRegionApNortheast2 InputCrowdstrikeRegion = "ap-northeast-2"
	InputCrowdstrikeRegionApSoutheast1 InputCrowdstrikeRegion = "ap-southeast-1"
	InputCrowdstrikeRegionApSoutheast2 InputCrowdstrikeRegion = "ap-southeast-2"
	InputCrowdstrikeRegionApSouth1     InputCrowdstrikeRegion = "ap-south-1"
	InputCrowdstrikeRegionMeSouth1     InputCrowdstrikeRegion = "me-south-1"
	InputCrowdstrikeRegionSaEast1      InputCrowdstrikeRegion = "sa-east-1"
	InputCrowdstrikeRegionUsGovEast1   InputCrowdstrikeRegion = "us-gov-east-1"
	InputCrowdstrikeRegionUsGovWest1   InputCrowdstrikeRegion = "us-gov-west-1"
)

func (e InputCrowdstrikeRegion) ToPointer() *InputCrowdstrikeRegion {
	return &e
}

func (e *InputCrowdstrikeRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = InputCrowdstrikeRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeRegion: %v", v)
	}
}

// InputCrowdstrikeSignatureVersion - Signature version to use for signing S3 requests.
type InputCrowdstrikeSignatureVersion string

const (
	InputCrowdstrikeSignatureVersionV2 InputCrowdstrikeSignatureVersion = "v2"
	InputCrowdstrikeSignatureVersionV4 InputCrowdstrikeSignatureVersion = "v4"
)

func (e InputCrowdstrikeSignatureVersion) ToPointer() *InputCrowdstrikeSignatureVersion {
	return &e
}

func (e *InputCrowdstrikeSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputCrowdstrikeSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeSignatureVersion: %v", v)
	}
}

type InputCrowdstrikeType string

const (
	InputCrowdstrikeTypeCrowdstrike InputCrowdstrikeType = "crowdstrike"
)

func (e InputCrowdstrikeType) ToPointer() *InputCrowdstrikeType {
	return &e
}

func (e *InputCrowdstrikeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crowdstrike":
		*e = InputCrowdstrikeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeType: %v", v)
	}
}

type InputCrowdstrike struct {
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
	AwsAccountID *string `json:"awsAccountId,omitempty"`
	// Access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputCrowdstrikeAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// Select (or create) a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// A list of event breaking rulesets that will be applied, in order, to the input data stream.
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputCrowdstrikeConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Use Assume Role credentials to access S3
	EnableAssumeRole *bool `json:"enableAssumeRole,omitempty"`
	// Use Assume Role credentials when accessing SQS.
	EnableSQSAssumeRole *bool `json:"enableSQSAssumeRole,omitempty"`
	// S3 service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Regex matching file names to download and process. Defaults to: .*
	FileFilter *string `json:"fileFilter,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
	MaxMessages *int64 `json:"maxMessages,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputCrowdstrikeMetadata `json:"metadata,omitempty"`
	// The Number of receiver processes to run, the higher the number the better throughput at the expense of CPU overhead
	NumReceivers *int64 `json:"numReceivers,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// The amount of time to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
	PollTimeout *int64              `json:"pollTimeout,omitempty"`
	Pq          *InputCrowdstrikePq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled  *bool                       `json:"pqEnabled,omitempty"`
	Preprocess *InputCrowdstrikePreprocess `json:"preprocess,omitempty"`
	// The name, URL, or ARN of the SQS queue to read notifications from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. E.g., 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. E.g., referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	QueueName string `json:"queueName"`
	// AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
	Region *InputCrowdstrikeRegion `json:"region,omitempty"`
	// Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Whether to reuse connections between requests, which can improve performance.
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Signature version to use for signing S3 requests.
	SignatureVersion *InputCrowdstrikeSignatureVersion `json:"signatureVersion,omitempty"`
	// Toggle to Yes to skip files that trigger a processing error. Defaults to No, which enables retries after processing errors.
	SkipOnError *bool `json:"skipOnError,omitempty"`
	// Socket inactivity timeout (in seconds). Increase this value if timeouts occur due to backpressure.
	SocketTimeout *int64 `json:"socketTimeout,omitempty"`
	// The amount of time (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel, before flushing the data stream out, as-is, to the Pipelines.
	StaleChannelFlushMs *int64 `json:"staleChannelFlushMs,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string             `json:"streamtags,omitempty"`
	Type       InputCrowdstrikeType `json:"type"`
	// After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
	VisibilityTimeout *int64 `json:"visibilityTimeout,omitempty"`
}
