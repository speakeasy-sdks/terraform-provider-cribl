// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LicenseCls string

const (
	LicenseClsProd  LicenseCls = "prod"
	LicenseClsTrial LicenseCls = "trial"
	LicenseClsFree  LicenseCls = "free"
)

func (e LicenseCls) ToPointer() *LicenseCls {
	return &e
}

func (e *LicenseCls) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prod":
		fallthrough
	case "trial":
		fallthrough
	case "free":
		*e = LicenseCls(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseCls: %v", v)
	}
}

// License - New License object
type License struct {
	Cls     LicenseCls             `json:"cls"`
	Email   string                 `json:"email"`
	Exp     int64                  `json:"exp"`
	FPh     int64                  `json:"f_ph"`
	FPhg    int64                  `json:"f_phg"`
	GUID    string                 `json:"guid"`
	Iat     int64                  `json:"iat"`
	ID      string                 `json:"id"`
	Iss     string                 `json:"iss"`
	License string                 `json:"license"`
	Limits  map[string]interface{} `json:"limits,omitempty"`
	Quota   int64                  `json:"quota"`
	Title   string                 `json:"title"`
}
