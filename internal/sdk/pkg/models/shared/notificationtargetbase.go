// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotificationTargetBaseOutputType string

const (
	NotificationTargetBaseOutputTypeDefault          NotificationTargetBaseOutputType = "default"
	NotificationTargetBaseOutputTypeWebhook          NotificationTargetBaseOutputType = "webhook"
	NotificationTargetBaseOutputTypeBulletinMessage  NotificationTargetBaseOutputType = "bulletin_message"
	NotificationTargetBaseOutputTypeRouter           NotificationTargetBaseOutputType = "router"
	NotificationTargetBaseOutputTypeNotificationsLog NotificationTargetBaseOutputType = "notifications_log"
	NotificationTargetBaseOutputTypePagerDuty        NotificationTargetBaseOutputType = "pager_duty"
)

func (e NotificationTargetBaseOutputType) ToPointer() *NotificationTargetBaseOutputType {
	return &e
}

func (e *NotificationTargetBaseOutputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "webhook":
		fallthrough
	case "bulletin_message":
		fallthrough
	case "router":
		fallthrough
	case "notifications_log":
		fallthrough
	case "pager_duty":
		*e = NotificationTargetBaseOutputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationTargetBaseOutputType: %v", v)
	}
}

type NotificationTargetBase struct {
	// Unique ID for this output
	ID string `json:"id"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string                         `json:"systemFields,omitempty"`
	Type         NotificationTargetBaseOutputType `json:"type"`
}
