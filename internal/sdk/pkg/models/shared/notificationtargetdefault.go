// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotificationTargetDefaultType string

const (
	NotificationTargetDefaultTypeDefault NotificationTargetDefaultType = "default"
)

func (e NotificationTargetDefaultType) ToPointer() *NotificationTargetDefaultType {
	return &e
}

func (e *NotificationTargetDefaultType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		*e = NotificationTargetDefaultType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationTargetDefaultType: %v", v)
	}
}

type NotificationTargetDefault struct {
	// ID of the default output. This will be used whenever a nonexistent/deleted output is referenced.
	DefaultID string `json:"defaultId"`
	// Unique ID for this output
	ID string `json:"id"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string                      `json:"systemFields,omitempty"`
	Type         NotificationTargetDefaultType `json:"type"`
}
