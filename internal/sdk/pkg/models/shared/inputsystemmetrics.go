// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputSystemMetricsConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputSystemMetricsContainerFilters struct {
	Expr string `json:"expr"`
}

// InputSystemMetricsContainerMode - Select the level of detail for container metrics
type InputSystemMetricsContainerMode string

const (
	InputSystemMetricsContainerModeDisabled InputSystemMetricsContainerMode = "disabled"
	InputSystemMetricsContainerModeAll      InputSystemMetricsContainerMode = "all"
	InputSystemMetricsContainerModeCustom   InputSystemMetricsContainerMode = "custom"
)

func (e InputSystemMetricsContainerMode) ToPointer() *InputSystemMetricsContainerMode {
	return &e
}

func (e *InputSystemMetricsContainerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputSystemMetricsContainerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsContainerMode: %v", v)
	}
}

type InputSystemMetricsContainer struct {
	// Include stopped and paused containers
	AllContainers *bool `json:"allContainers,omitempty"`
	// Generate full container metrics
	Detail *bool `json:"detail,omitempty"`
	// Full paths for Docker's UNIX-domain socket
	DockerSocket []string `json:"dockerSocket,omitempty"`
	// Timeout, in seconds, for the Docker API
	DockerTimeout *int64 `json:"dockerTimeout,omitempty"`
	// Containers matching any of these will be included. All are included if this is empty.
	Filters []InputSystemMetricsContainerFilters `json:"filters,omitempty"`
	// Select the level of detail for container metrics
	Mode *InputSystemMetricsContainerMode `json:"mode,omitempty"`
	// Generate separate metrics for each device
	PerDevice *bool `json:"perDevice,omitempty"`
}

// InputSystemMetricsHostCustomCPUMode - Select the level of details for CPU metrics
type InputSystemMetricsHostCustomCPUMode string

const (
	InputSystemMetricsHostCustomCPUModeDisabled InputSystemMetricsHostCustomCPUMode = "disabled"
	InputSystemMetricsHostCustomCPUModeAll      InputSystemMetricsHostCustomCPUMode = "all"
	InputSystemMetricsHostCustomCPUModeCustom   InputSystemMetricsHostCustomCPUMode = "custom"
)

func (e InputSystemMetricsHostCustomCPUMode) ToPointer() *InputSystemMetricsHostCustomCPUMode {
	return &e
}

func (e *InputSystemMetricsHostCustomCPUMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputSystemMetricsHostCustomCPUMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsHostCustomCPUMode: %v", v)
	}
}

type InputSystemMetricsHostCustomCPU struct {
	// Generate metrics for all CPU states
	Detail *bool `json:"detail,omitempty"`
	// Select the level of details for CPU metrics
	Mode *InputSystemMetricsHostCustomCPUMode `json:"mode,omitempty"`
	// Generate metrics for each CPU
	PerCPU *bool `json:"perCpu,omitempty"`
	// Generate raw, monotonic CPU time counters
	Time *bool `json:"time,omitempty"`
}

// InputSystemMetricsHostCustomDiskMode - Select the level of details for disk metrics
type InputSystemMetricsHostCustomDiskMode string

const (
	InputSystemMetricsHostCustomDiskModeDisabled InputSystemMetricsHostCustomDiskMode = "disabled"
	InputSystemMetricsHostCustomDiskModeAll      InputSystemMetricsHostCustomDiskMode = "all"
	InputSystemMetricsHostCustomDiskModeCustom   InputSystemMetricsHostCustomDiskMode = "custom"
)

func (e InputSystemMetricsHostCustomDiskMode) ToPointer() *InputSystemMetricsHostCustomDiskMode {
	return &e
}

func (e *InputSystemMetricsHostCustomDiskMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputSystemMetricsHostCustomDiskMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsHostCustomDiskMode: %v", v)
	}
}

type InputSystemMetricsHostCustomDisk struct {
	// Generate full disk metrics
	Detail *bool `json:"detail,omitempty"`
	// Block devices to include/exclude. E.g.: sda*, !loop*, etc. Wildcards and ! (not) operators are supported. All devices are included if this list is empty.
	Devices []string `json:"devices,omitempty"`
	// Filesystem types to include/exclude. E.g.: ext4, !*tmpfs, !squashfs, etc. Wildcards and ! (not) operators are supported. All types are included if this list is empty.
	Fstypes []string `json:"fstypes,omitempty"`
	// Select the level of details for disk metrics
	Mode *InputSystemMetricsHostCustomDiskMode `json:"mode,omitempty"`
	// Filesystem mountpoints to include/exclude. E.g.: /, /home, !/proc*, !/tmp, etc. Wildcards and ! (not) operators are supported. All mountpoints are included if this list is empty.
	Mountpoints []string `json:"mountpoints,omitempty"`
	// Generate separate metrics for each device
	PerDevice *bool `json:"perDevice,omitempty"`
}

// InputSystemMetricsHostCustomMemoryMode - Select the level of details for memory metrics
type InputSystemMetricsHostCustomMemoryMode string

const (
	InputSystemMetricsHostCustomMemoryModeDisabled InputSystemMetricsHostCustomMemoryMode = "disabled"
	InputSystemMetricsHostCustomMemoryModeAll      InputSystemMetricsHostCustomMemoryMode = "all"
	InputSystemMetricsHostCustomMemoryModeCustom   InputSystemMetricsHostCustomMemoryMode = "custom"
)

func (e InputSystemMetricsHostCustomMemoryMode) ToPointer() *InputSystemMetricsHostCustomMemoryMode {
	return &e
}

func (e *InputSystemMetricsHostCustomMemoryMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputSystemMetricsHostCustomMemoryMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsHostCustomMemoryMode: %v", v)
	}
}

type InputSystemMetricsHostCustomMemory struct {
	// Generate metrics for all memory states
	Detail *bool `json:"detail,omitempty"`
	// Select the level of details for memory metrics
	Mode *InputSystemMetricsHostCustomMemoryMode `json:"mode,omitempty"`
}

// InputSystemMetricsHostCustomNetworkMode - Select the level of details for network metrics
type InputSystemMetricsHostCustomNetworkMode string

const (
	InputSystemMetricsHostCustomNetworkModeDisabled InputSystemMetricsHostCustomNetworkMode = "disabled"
	InputSystemMetricsHostCustomNetworkModeAll      InputSystemMetricsHostCustomNetworkMode = "all"
	InputSystemMetricsHostCustomNetworkModeCustom   InputSystemMetricsHostCustomNetworkMode = "custom"
)

func (e InputSystemMetricsHostCustomNetworkMode) ToPointer() *InputSystemMetricsHostCustomNetworkMode {
	return &e
}

func (e *InputSystemMetricsHostCustomNetworkMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputSystemMetricsHostCustomNetworkMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsHostCustomNetworkMode: %v", v)
	}
}

type InputSystemMetricsHostCustomNetwork struct {
	// Generate full network metrics
	Detail *bool `json:"detail,omitempty"`
	// Network interfaces to include/exclude. E.g.: eth0, !lo, etc. All interfaces are included if this list is empty.
	Devices []string `json:"devices,omitempty"`
	// Select the level of details for network metrics
	Mode *InputSystemMetricsHostCustomNetworkMode `json:"mode,omitempty"`
	// Generate separate metrics for each interface
	PerInterface *bool `json:"perInterface,omitempty"`
}

// InputSystemMetricsHostCustomSystemMode - Select the level of details for system metrics
type InputSystemMetricsHostCustomSystemMode string

const (
	InputSystemMetricsHostCustomSystemModeDisabled InputSystemMetricsHostCustomSystemMode = "disabled"
	InputSystemMetricsHostCustomSystemModeAll      InputSystemMetricsHostCustomSystemMode = "all"
	InputSystemMetricsHostCustomSystemModeCustom   InputSystemMetricsHostCustomSystemMode = "custom"
)

func (e InputSystemMetricsHostCustomSystemMode) ToPointer() *InputSystemMetricsHostCustomSystemMode {
	return &e
}

func (e *InputSystemMetricsHostCustomSystemMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputSystemMetricsHostCustomSystemMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsHostCustomSystemMode: %v", v)
	}
}

type InputSystemMetricsHostCustomSystem struct {
	// Select the level of details for system metrics
	Mode *InputSystemMetricsHostCustomSystemMode `json:"mode,omitempty"`
	// Generate metrics for the numbers of processes in various states
	Processes *bool `json:"processes,omitempty"`
}

type InputSystemMetricsHostCustom struct {
	CPU     *InputSystemMetricsHostCustomCPU     `json:"cpu,omitempty"`
	Disk    *InputSystemMetricsHostCustomDisk    `json:"disk,omitempty"`
	Memory  *InputSystemMetricsHostCustomMemory  `json:"memory,omitempty"`
	Network *InputSystemMetricsHostCustomNetwork `json:"network,omitempty"`
	System  *InputSystemMetricsHostCustomSystem  `json:"system,omitempty"`
}

// InputSystemMetricsHostMode - Select level of detail for host metrics
type InputSystemMetricsHostMode string

const (
	InputSystemMetricsHostModeDisabled InputSystemMetricsHostMode = "disabled"
	InputSystemMetricsHostModeAll      InputSystemMetricsHostMode = "all"
	InputSystemMetricsHostModeCustom   InputSystemMetricsHostMode = "custom"
)

func (e InputSystemMetricsHostMode) ToPointer() *InputSystemMetricsHostMode {
	return &e
}

func (e *InputSystemMetricsHostMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "all":
		fallthrough
	case "custom":
		*e = InputSystemMetricsHostMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsHostMode: %v", v)
	}
}

type InputSystemMetricsHost struct {
	Custom *InputSystemMetricsHostCustom `json:"custom,omitempty"`
	// Select level of detail for host metrics
	Mode *InputSystemMetricsHostMode `json:"mode,omitempty"`
}

type InputSystemMetricsMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputSystemMetricsPersistenceCompression - Select data compression format. Optional.
type InputSystemMetricsPersistenceCompression string

const (
	InputSystemMetricsPersistenceCompressionNone InputSystemMetricsPersistenceCompression = "none"
	InputSystemMetricsPersistenceCompressionGzip InputSystemMetricsPersistenceCompression = "gzip"
)

func (e InputSystemMetricsPersistenceCompression) ToPointer() *InputSystemMetricsPersistenceCompression {
	return &e
}

func (e *InputSystemMetricsPersistenceCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSystemMetricsPersistenceCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsPersistenceCompression: %v", v)
	}
}

type InputSystemMetricsPersistence struct {
	// Select data compression format. Optional.
	Compress *InputSystemMetricsPersistenceCompression `json:"compress,omitempty"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/system_metrics
	DestPath *string `json:"destPath,omitempty"`
	// Spool metrics to disk for Cribl Edge and Search
	Enable *bool `json:"enable,omitempty"`
	// Maximum disk space allowed to be consumed (e.g., 420MB or 4GB). Once reached, older data will be deleted.
	MaxDataSize *string `json:"maxDataSize,omitempty"`
	// Maximum amount of time to retain data (e.g., 2h or 4d). Once reached, older data will be deleted.
	MaxDataTime *string `json:"maxDataTime,omitempty"`
	// Time span for each file bucket
	TimeWindow *string `json:"timeWindow,omitempty"`
}

// InputSystemMetricsPqCompression - Codec to use to compress the persisted data.
type InputSystemMetricsPqCompression string

const (
	InputSystemMetricsPqCompressionNone InputSystemMetricsPqCompression = "none"
	InputSystemMetricsPqCompressionGzip InputSystemMetricsPqCompression = "gzip"
)

func (e InputSystemMetricsPqCompression) ToPointer() *InputSystemMetricsPqCompression {
	return &e
}

func (e *InputSystemMetricsPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSystemMetricsPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsPqCompression: %v", v)
	}
}

// InputSystemMetricsPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSystemMetricsPqMode string

const (
	InputSystemMetricsPqModeSmart  InputSystemMetricsPqMode = "smart"
	InputSystemMetricsPqModeAlways InputSystemMetricsPqMode = "always"
)

func (e InputSystemMetricsPqMode) ToPointer() *InputSystemMetricsPqMode {
	return &e
}

func (e *InputSystemMetricsPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputSystemMetricsPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsPqMode: %v", v)
	}
}

type InputSystemMetricsPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputSystemMetricsPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSystemMetricsPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputSystemMetricsInputType string

const (
	InputSystemMetricsInputTypeSplunk            InputSystemMetricsInputType = "splunk"
	InputSystemMetricsInputTypeSplunkHec         InputSystemMetricsInputType = "splunk_hec"
	InputSystemMetricsInputTypeSyslog            InputSystemMetricsInputType = "syslog"
	InputSystemMetricsInputTypeTcpjson           InputSystemMetricsInputType = "tcpjson"
	InputSystemMetricsInputTypeGrafana           InputSystemMetricsInputType = "grafana"
	InputSystemMetricsInputTypeLoki              InputSystemMetricsInputType = "loki"
	InputSystemMetricsInputTypeHTTP              InputSystemMetricsInputType = "http"
	InputSystemMetricsInputTypeHTTPRaw           InputSystemMetricsInputType = "http_raw"
	InputSystemMetricsInputTypeFirehose          InputSystemMetricsInputType = "firehose"
	InputSystemMetricsInputTypeElastic           InputSystemMetricsInputType = "elastic"
	InputSystemMetricsInputTypeKafka             InputSystemMetricsInputType = "kafka"
	InputSystemMetricsInputTypeConfluentCloud    InputSystemMetricsInputType = "confluent_cloud"
	InputSystemMetricsInputTypeMsk               InputSystemMetricsInputType = "msk"
	InputSystemMetricsInputTypeKinesis           InputSystemMetricsInputType = "kinesis"
	InputSystemMetricsInputTypeEventhub          InputSystemMetricsInputType = "eventhub"
	InputSystemMetricsInputTypeAzureBlob         InputSystemMetricsInputType = "azure_blob"
	InputSystemMetricsInputTypeMetrics           InputSystemMetricsInputType = "metrics"
	InputSystemMetricsInputTypeSqs               InputSystemMetricsInputType = "sqs"
	InputSystemMetricsInputTypeS3                InputSystemMetricsInputType = "s3"
	InputSystemMetricsInputTypeSnmp              InputSystemMetricsInputType = "snmp"
	InputSystemMetricsInputTypeCrowdstrike       InputSystemMetricsInputType = "crowdstrike"
	InputSystemMetricsInputTypeTCP               InputSystemMetricsInputType = "tcp"
	InputSystemMetricsInputTypeRawUDP            InputSystemMetricsInputType = "raw_udp"
	InputSystemMetricsInputTypeOffice365Service  InputSystemMetricsInputType = "office365_service"
	InputSystemMetricsInputTypeOffice365Mgmt     InputSystemMetricsInputType = "office365_mgmt"
	InputSystemMetricsInputTypeOffice365MsgTrace InputSystemMetricsInputType = "office365_msg_trace"
	InputSystemMetricsInputTypePrometheus        InputSystemMetricsInputType = "prometheus"
	InputSystemMetricsInputTypeEdgePrometheus    InputSystemMetricsInputType = "edge_prometheus"
	InputSystemMetricsInputTypePrometheusRw      InputSystemMetricsInputType = "prometheus_rw"
	InputSystemMetricsInputTypeAppscope          InputSystemMetricsInputType = "appscope"
	InputSystemMetricsInputTypeGooglePubsub      InputSystemMetricsInputType = "google_pubsub"
	InputSystemMetricsInputTypeOpenTelemetry     InputSystemMetricsInputType = "open_telemetry"
	InputSystemMetricsInputTypeDatadogAgent      InputSystemMetricsInputType = "datadog_agent"
	InputSystemMetricsInputTypeWef               InputSystemMetricsInputType = "wef"
	InputSystemMetricsInputTypeDatagen           InputSystemMetricsInputType = "datagen"
	InputSystemMetricsInputTypeCribl             InputSystemMetricsInputType = "cribl"
	InputSystemMetricsInputTypeCriblmetrics      InputSystemMetricsInputType = "criblmetrics"
	InputSystemMetricsInputTypeCriblHTTP         InputSystemMetricsInputType = "cribl_http"
	InputSystemMetricsInputTypeCriblTCP          InputSystemMetricsInputType = "cribl_tcp"
	InputSystemMetricsInputTypeWinEventLogs      InputSystemMetricsInputType = "win_event_logs"
	InputSystemMetricsInputTypeSystemMetrics     InputSystemMetricsInputType = "system_metrics"
	InputSystemMetricsInputTypeWindowsMetrics    InputSystemMetricsInputType = "windows_metrics"
	InputSystemMetricsInputTypeSystemState       InputSystemMetricsInputType = "system_state"
	InputSystemMetricsInputTypeKubeMetrics       InputSystemMetricsInputType = "kube_metrics"
	InputSystemMetricsInputTypeKubeLogs          InputSystemMetricsInputType = "kube_logs"
	InputSystemMetricsInputTypeKubeEvents        InputSystemMetricsInputType = "kube_events"
	InputSystemMetricsInputTypeExec              InputSystemMetricsInputType = "exec"
	InputSystemMetricsInputTypeSplunkSearch      InputSystemMetricsInputType = "splunk_search"
	InputSystemMetricsInputTypeFile              InputSystemMetricsInputType = "file"
	InputSystemMetricsInputTypeJournalFiles      InputSystemMetricsInputType = "journal_files"
)

func (e InputSystemMetricsInputType) ToPointer() *InputSystemMetricsInputType {
	return &e
}

func (e *InputSystemMetricsInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		*e = InputSystemMetricsInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemMetricsInputType: %v", v)
	}
}

type InputSystemMetrics struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputSystemMetricsConnections `json:"connections,omitempty"`
	Container   *InputSystemMetricsContainer    `json:"container,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string                 `json:"environment,omitempty"`
	Host        *InputSystemMetricsHost `json:"host,omitempty"`
	// Unique ID for this input
	ID string `json:"id"`
	// Time, in seconds, between consecutive metric collections. Default is 10 seconds.
	Interval *int64 `json:"interval,omitempty"`
	// Fields to add to events from this input.
	Metadata    []InputSystemMetricsMetadata   `json:"metadata,omitempty"`
	Persistence *InputSystemMetricsPersistence `json:"persistence,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string               `json:"pipeline,omitempty"`
	Pq       *InputSystemMetricsPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                    `json:"streamtags,omitempty"`
	Type       InputSystemMetricsInputType `json:"type"`
}
