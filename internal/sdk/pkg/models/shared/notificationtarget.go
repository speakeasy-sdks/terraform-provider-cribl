// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type NotificationTargetType string

const (
	NotificationTargetTypeNotificationTargetBase             NotificationTargetType = "NotificationTargetBase"
	NotificationTargetTypeNotificationTargetDefault          NotificationTargetType = "NotificationTargetDefault"
	NotificationTargetTypeNotificationTargetWebhook          NotificationTargetType = "NotificationTargetWebhook"
	NotificationTargetTypeNotificationTargetBulletinMessage  NotificationTargetType = "NotificationTargetBulletinMessage"
	NotificationTargetTypeNotificationTargetRouter           NotificationTargetType = "NotificationTargetRouter"
	NotificationTargetTypeNotificationTargetNotificationsLog NotificationTargetType = "NotificationTargetNotificationsLog"
	NotificationTargetTypeNotificationTargetPagerDuty        NotificationTargetType = "NotificationTargetPagerDuty"
)

type NotificationTarget struct {
	NotificationTargetBase             *NotificationTargetBase
	NotificationTargetDefault          *NotificationTargetDefault
	NotificationTargetWebhook          *NotificationTargetWebhook
	NotificationTargetBulletinMessage  *NotificationTargetBulletinMessage
	NotificationTargetRouter           *NotificationTargetRouter
	NotificationTargetNotificationsLog *NotificationTargetNotificationsLog
	NotificationTargetPagerDuty        *NotificationTargetPagerDuty

	Type NotificationTargetType
}

func CreateNotificationTargetNotificationTargetBase(notificationTargetBase NotificationTargetBase) NotificationTarget {
	typ := NotificationTargetTypeNotificationTargetBase

	return NotificationTarget{
		NotificationTargetBase: &notificationTargetBase,
		Type:                   typ,
	}
}

func CreateNotificationTargetNotificationTargetDefault(notificationTargetDefault NotificationTargetDefault) NotificationTarget {
	typ := NotificationTargetTypeNotificationTargetDefault

	return NotificationTarget{
		NotificationTargetDefault: &notificationTargetDefault,
		Type:                      typ,
	}
}

func CreateNotificationTargetNotificationTargetWebhook(notificationTargetWebhook NotificationTargetWebhook) NotificationTarget {
	typ := NotificationTargetTypeNotificationTargetWebhook

	return NotificationTarget{
		NotificationTargetWebhook: &notificationTargetWebhook,
		Type:                      typ,
	}
}

func CreateNotificationTargetNotificationTargetBulletinMessage(notificationTargetBulletinMessage NotificationTargetBulletinMessage) NotificationTarget {
	typ := NotificationTargetTypeNotificationTargetBulletinMessage

	return NotificationTarget{
		NotificationTargetBulletinMessage: &notificationTargetBulletinMessage,
		Type:                              typ,
	}
}

func CreateNotificationTargetNotificationTargetRouter(notificationTargetRouter NotificationTargetRouter) NotificationTarget {
	typ := NotificationTargetTypeNotificationTargetRouter

	return NotificationTarget{
		NotificationTargetRouter: &notificationTargetRouter,
		Type:                     typ,
	}
}

func CreateNotificationTargetNotificationTargetNotificationsLog(notificationTargetNotificationsLog NotificationTargetNotificationsLog) NotificationTarget {
	typ := NotificationTargetTypeNotificationTargetNotificationsLog

	return NotificationTarget{
		NotificationTargetNotificationsLog: &notificationTargetNotificationsLog,
		Type:                               typ,
	}
}

func CreateNotificationTargetNotificationTargetPagerDuty(notificationTargetPagerDuty NotificationTargetPagerDuty) NotificationTarget {
	typ := NotificationTargetTypeNotificationTargetPagerDuty

	return NotificationTarget{
		NotificationTargetPagerDuty: &notificationTargetPagerDuty,
		Type:                        typ,
	}
}

func (u *NotificationTarget) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	notificationTargetBase := new(NotificationTargetBase)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationTargetBase); err == nil {
		u.NotificationTargetBase = notificationTargetBase
		u.Type = NotificationTargetTypeNotificationTargetBase
		return nil
	}

	notificationTargetDefault := new(NotificationTargetDefault)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationTargetDefault); err == nil {
		u.NotificationTargetDefault = notificationTargetDefault
		u.Type = NotificationTargetTypeNotificationTargetDefault
		return nil
	}

	notificationTargetWebhook := new(NotificationTargetWebhook)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationTargetWebhook); err == nil {
		u.NotificationTargetWebhook = notificationTargetWebhook
		u.Type = NotificationTargetTypeNotificationTargetWebhook
		return nil
	}

	notificationTargetBulletinMessage := new(NotificationTargetBulletinMessage)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationTargetBulletinMessage); err == nil {
		u.NotificationTargetBulletinMessage = notificationTargetBulletinMessage
		u.Type = NotificationTargetTypeNotificationTargetBulletinMessage
		return nil
	}

	notificationTargetRouter := new(NotificationTargetRouter)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationTargetRouter); err == nil {
		u.NotificationTargetRouter = notificationTargetRouter
		u.Type = NotificationTargetTypeNotificationTargetRouter
		return nil
	}

	notificationTargetNotificationsLog := new(NotificationTargetNotificationsLog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationTargetNotificationsLog); err == nil {
		u.NotificationTargetNotificationsLog = notificationTargetNotificationsLog
		u.Type = NotificationTargetTypeNotificationTargetNotificationsLog
		return nil
	}

	notificationTargetPagerDuty := new(NotificationTargetPagerDuty)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationTargetPagerDuty); err == nil {
		u.NotificationTargetPagerDuty = notificationTargetPagerDuty
		u.Type = NotificationTargetTypeNotificationTargetPagerDuty
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u NotificationTarget) MarshalJSON() ([]byte, error) {
	if u.NotificationTargetBase != nil {
		return json.Marshal(u.NotificationTargetBase)
	}

	if u.NotificationTargetDefault != nil {
		return json.Marshal(u.NotificationTargetDefault)
	}

	if u.NotificationTargetWebhook != nil {
		return json.Marshal(u.NotificationTargetWebhook)
	}

	if u.NotificationTargetBulletinMessage != nil {
		return json.Marshal(u.NotificationTargetBulletinMessage)
	}

	if u.NotificationTargetRouter != nil {
		return json.Marshal(u.NotificationTargetRouter)
	}

	if u.NotificationTargetNotificationsLog != nil {
		return json.Marshal(u.NotificationTargetNotificationsLog)
	}

	if u.NotificationTargetPagerDuty != nil {
		return json.Marshal(u.NotificationTargetPagerDuty)
	}

	return nil, nil
}
