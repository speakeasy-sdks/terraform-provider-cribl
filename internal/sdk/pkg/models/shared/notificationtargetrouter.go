// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotificationTargetRouterRules struct {
	// Description of this rule's purpose
	Description *string `json:"description,omitempty"`
	// JavaScript expression to select events to send to output
	Filter string `json:"filter"`
	// Flag to control whether to stop the event from being checked against other rules
	Final *bool `json:"final,omitempty"`
	// Output to send matching events to
	Output string `json:"output"`
}

type NotificationTargetRouterType string

const (
	NotificationTargetRouterTypeRouter NotificationTargetRouterType = "router"
)

func (e NotificationTargetRouterType) ToPointer() *NotificationTargetRouterType {
	return &e
}

func (e *NotificationTargetRouterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "router":
		*e = NotificationTargetRouterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationTargetRouterType: %v", v)
	}
}

type NotificationTargetRouter struct {
	// Unique ID for this output
	ID string `json:"id"`
	// Event routing rules
	Rules []NotificationTargetRouterRules `json:"rules"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string                     `json:"systemFields,omitempty"`
	Type         NotificationTargetRouterType `json:"type"`
}
