// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputMetricsConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputMetricsMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

type InputMetricsOptionalFieldsInGeneralSection string

const (
	InputMetricsOptionalFieldsInGeneralSectionUDPPort InputMetricsOptionalFieldsInGeneralSection = "udpPort"
	InputMetricsOptionalFieldsInGeneralSectionTCPPort InputMetricsOptionalFieldsInGeneralSection = "tcpPort"
)

func (e InputMetricsOptionalFieldsInGeneralSection) ToPointer() *InputMetricsOptionalFieldsInGeneralSection {
	return &e
}

func (e *InputMetricsOptionalFieldsInGeneralSection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "udpPort":
		fallthrough
	case "tcpPort":
		*e = InputMetricsOptionalFieldsInGeneralSection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputMetricsOptionalFieldsInGeneralSection: %v", v)
	}
}

// InputMetricsPqCompression - Codec to use to compress the persisted data.
type InputMetricsPqCompression string

const (
	InputMetricsPqCompressionNone InputMetricsPqCompression = "none"
	InputMetricsPqCompressionGzip InputMetricsPqCompression = "gzip"
)

func (e InputMetricsPqCompression) ToPointer() *InputMetricsPqCompression {
	return &e
}

func (e *InputMetricsPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputMetricsPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputMetricsPqCompression: %v", v)
	}
}

// InputMetricsPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputMetricsPqMode string

const (
	InputMetricsPqModeSmart  InputMetricsPqMode = "smart"
	InputMetricsPqModeAlways InputMetricsPqMode = "always"
)

func (e InputMetricsPqMode) ToPointer() *InputMetricsPqMode {
	return &e
}

func (e *InputMetricsPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputMetricsPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputMetricsPqMode: %v", v)
	}
}

type InputMetricsPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputMetricsPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputMetricsPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

// InputMetricsTLSSettingsServerSideMaximumTLSVersion - Maximum TLS version to accept from connections.
type InputMetricsTLSSettingsServerSideMaximumTLSVersion string

const (
	InputMetricsTLSSettingsServerSideMaximumTLSVersionTlSv1  InputMetricsTLSSettingsServerSideMaximumTLSVersion = "TLSv1"
	InputMetricsTLSSettingsServerSideMaximumTLSVersionTlSv11 InputMetricsTLSSettingsServerSideMaximumTLSVersion = "TLSv1.1"
	InputMetricsTLSSettingsServerSideMaximumTLSVersionTlSv12 InputMetricsTLSSettingsServerSideMaximumTLSVersion = "TLSv1.2"
	InputMetricsTLSSettingsServerSideMaximumTLSVersionTlSv13 InputMetricsTLSSettingsServerSideMaximumTLSVersion = "TLSv1.3"
)

func (e InputMetricsTLSSettingsServerSideMaximumTLSVersion) ToPointer() *InputMetricsTLSSettingsServerSideMaximumTLSVersion {
	return &e
}

func (e *InputMetricsTLSSettingsServerSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputMetricsTLSSettingsServerSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputMetricsTLSSettingsServerSideMaximumTLSVersion: %v", v)
	}
}

// InputMetricsTLSSettingsServerSideMinimumTLSVersion - Minimum TLS version to accept from connections.
type InputMetricsTLSSettingsServerSideMinimumTLSVersion string

const (
	InputMetricsTLSSettingsServerSideMinimumTLSVersionTlSv1  InputMetricsTLSSettingsServerSideMinimumTLSVersion = "TLSv1"
	InputMetricsTLSSettingsServerSideMinimumTLSVersionTlSv11 InputMetricsTLSSettingsServerSideMinimumTLSVersion = "TLSv1.1"
	InputMetricsTLSSettingsServerSideMinimumTLSVersionTlSv12 InputMetricsTLSSettingsServerSideMinimumTLSVersion = "TLSv1.2"
	InputMetricsTLSSettingsServerSideMinimumTLSVersionTlSv13 InputMetricsTLSSettingsServerSideMinimumTLSVersion = "TLSv1.3"
)

func (e InputMetricsTLSSettingsServerSideMinimumTLSVersion) ToPointer() *InputMetricsTLSSettingsServerSideMinimumTLSVersion {
	return &e
}

func (e *InputMetricsTLSSettingsServerSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputMetricsTLSSettingsServerSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputMetricsTLSSettingsServerSideMinimumTLSVersion: %v", v)
	}
}

type InputMetricsTLSSettingsServerSide struct {
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string     `json:"certificateName,omitempty"`
	CommonNameRegex interface{} `json:"commonNameRegex,omitempty"`
	Disabled        *bool       `json:"disabled,omitempty"`
	// Maximum TLS version to accept from connections.
	MaxVersion *InputMetricsTLSSettingsServerSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to accept from connections.
	MinVersion *InputMetricsTLSSettingsServerSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath        *string     `json:"privKeyPath,omitempty"`
	RejectUnauthorized interface{} `json:"rejectUnauthorized,omitempty"`
	// Whether to require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert *bool `json:"requestCert,omitempty"`
}

type InputMetricsType string

const (
	InputMetricsTypeMetrics InputMetricsType = "metrics"
)

func (e InputMetricsType) ToPointer() *InputMetricsType {
	return &e
}

func (e *InputMetricsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "metrics":
		*e = InputMetricsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputMetricsType: %v", v)
	}
}

type InputMetrics struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputMetricsConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2
	EnableProxyHeader *bool `json:"enableProxyHeader,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address.
	Host string `json:"host"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// Regex matching IP addresses that are allowed to send data
	IPWhitelistRegex *string `json:"ipWhitelistRegex,omitempty"`
	// Maximum number of events to buffer when downstream is blocking. Only applies to UDP.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// Fields to add to events from this input.
	Metadata                       []InputMetricsMetadata                      `json:"metadata,omitempty"`
	OptionalFieldsInGeneralSection *InputMetricsOptionalFieldsInGeneralSection `json:"optionalFieldsInGeneralSection,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string         `json:"pipeline,omitempty"`
	Pq       *InputMetricsPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Enter TCP port number to listen on. Not required if listening on UDP.
	TCPPort *int64                             `json:"tcpPort,omitempty"`
	TLS     *InputMetricsTLSSettingsServerSide `json:"tls,omitempty"`
	Type    InputMetricsType                   `json:"type"`
	// Enter UDP port number to listen on. Not required if listening on TCP.
	UDPPort *int64 `json:"udpPort,omitempty"`
}
