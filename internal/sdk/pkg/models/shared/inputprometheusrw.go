// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputPrometheusRwAuthenticationType - Remote Write authentication type
type InputPrometheusRwAuthenticationType string

const (
	InputPrometheusRwAuthenticationTypeOauth             InputPrometheusRwAuthenticationType = "oauth"
	InputPrometheusRwAuthenticationTypeBasic             InputPrometheusRwAuthenticationType = "basic"
	InputPrometheusRwAuthenticationTypeCredentialsSecret InputPrometheusRwAuthenticationType = "credentialsSecret"
	InputPrometheusRwAuthenticationTypeToken             InputPrometheusRwAuthenticationType = "token"
	InputPrometheusRwAuthenticationTypeTextSecret        InputPrometheusRwAuthenticationType = "textSecret"
)

func (e InputPrometheusRwAuthenticationType) ToPointer() *InputPrometheusRwAuthenticationType {
	return &e
}

func (e *InputPrometheusRwAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		*e = InputPrometheusRwAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusRwAuthenticationType: %v", v)
	}
}

type InputPrometheusRwConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputPrometheusRwMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

type InputPrometheusRwOauthHeaders struct {
	// OAuth header name
	Name string `json:"name"`
	// OAuth header value
	Value string `json:"value"`
}

type InputPrometheusRwOauthParams struct {
	// OAuth parameter name
	Name string `json:"name"`
	// OAuth parameter value
	Value string `json:"value"`
}

// InputPrometheusRwPqCompression - Codec to use to compress the persisted data.
type InputPrometheusRwPqCompression string

const (
	InputPrometheusRwPqCompressionNone InputPrometheusRwPqCompression = "none"
	InputPrometheusRwPqCompressionGzip InputPrometheusRwPqCompression = "gzip"
)

func (e InputPrometheusRwPqCompression) ToPointer() *InputPrometheusRwPqCompression {
	return &e
}

func (e *InputPrometheusRwPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputPrometheusRwPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusRwPqCompression: %v", v)
	}
}

// InputPrometheusRwPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputPrometheusRwPqMode string

const (
	InputPrometheusRwPqModeSmart  InputPrometheusRwPqMode = "smart"
	InputPrometheusRwPqModeAlways InputPrometheusRwPqMode = "always"
)

func (e InputPrometheusRwPqMode) ToPointer() *InputPrometheusRwPqMode {
	return &e
}

func (e *InputPrometheusRwPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputPrometheusRwPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusRwPqMode: %v", v)
	}
}

type InputPrometheusRwPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputPrometheusRwPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputPrometheusRwPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

// InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion - Maximum TLS version to accept from connections.
type InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion string

const (
	InputPrometheusRwTLSSettingsServerSideMaximumTLSVersionTlSv1  InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion = "TLSv1"
	InputPrometheusRwTLSSettingsServerSideMaximumTLSVersionTlSv11 InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion = "TLSv1.1"
	InputPrometheusRwTLSSettingsServerSideMaximumTLSVersionTlSv12 InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion = "TLSv1.2"
	InputPrometheusRwTLSSettingsServerSideMaximumTLSVersionTlSv13 InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion = "TLSv1.3"
)

func (e InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion) ToPointer() *InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion {
	return &e
}

func (e *InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion: %v", v)
	}
}

// InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion - Minimum TLS version to accept from connections.
type InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion string

const (
	InputPrometheusRwTLSSettingsServerSideMinimumTLSVersionTlSv1  InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion = "TLSv1"
	InputPrometheusRwTLSSettingsServerSideMinimumTLSVersionTlSv11 InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion = "TLSv1.1"
	InputPrometheusRwTLSSettingsServerSideMinimumTLSVersionTlSv12 InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion = "TLSv1.2"
	InputPrometheusRwTLSSettingsServerSideMinimumTLSVersionTlSv13 InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion = "TLSv1.3"
)

func (e InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion) ToPointer() *InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion {
	return &e
}

func (e *InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion: %v", v)
	}
}

type InputPrometheusRwTLSSettingsServerSide struct {
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string     `json:"certificateName,omitempty"`
	CommonNameRegex interface{} `json:"commonNameRegex,omitempty"`
	Disabled        *bool       `json:"disabled,omitempty"`
	// Maximum TLS version to accept from connections.
	MaxVersion *InputPrometheusRwTLSSettingsServerSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to accept from connections.
	MinVersion *InputPrometheusRwTLSSettingsServerSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath        *string     `json:"privKeyPath,omitempty"`
	RejectUnauthorized interface{} `json:"rejectUnauthorized,omitempty"`
	// Whether to require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert *bool `json:"requestCert,omitempty"`
}

type InputPrometheusRwType string

const (
	InputPrometheusRwTypePrometheusRw InputPrometheusRwType = "prometheus_rw"
)

func (e InputPrometheusRwType) ToPointer() *InputPrometheusRwType {
	return &e
}

func (e *InputPrometheusRwType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prometheus_rw":
		*e = InputPrometheusRwType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputPrometheusRwType: %v", v)
	}
}

type InputPrometheusRw struct {
	// How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
	ActivityLogSampleRate *int64 `json:"activityLogSampleRate,omitempty"`
	// JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
	AuthHeaderExpr *string `json:"authHeaderExpr,omitempty"`
	// Remote Write authentication type
	AuthType *InputPrometheusRwAuthenticationType `json:"authType,omitempty"`
	// Toggle this to Yes to add request headers to events, in the __headers field.
	CaptureHeaders *bool `json:"captureHeaders,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputPrometheusRwConnections `json:"connections,omitempty"`
	// Select (or create) a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2.
	EnableProxyHeader *bool `json:"enableProxyHeader,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host string `json:"host"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 sec.; maximum 600 sec. (10 min.).
	KeepAliveTimeout *int64 `json:"keepAliveTimeout,omitempty"`
	// URL for OAuth
	LoginURL *string `json:"loginUrl,omitempty"`
	// Maximum number of active requests per Worker Process. Use 0 for unlimited.
	MaxActiveReq *int64 `json:"maxActiveReq,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputPrometheusRwMetadata `json:"metadata,omitempty"`
	// Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthHeaders []InputPrometheusRwOauthHeaders `json:"oauthHeaders,omitempty"`
	// Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthParams []InputPrometheusRwOauthParams `json:"oauthParams,omitempty"`
	// Password for Basic authentication
	Password *string `json:"password,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// Port to listen on.
	Port int64                `json:"port"`
	Pq   *InputPrometheusRwPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Absolute path on which to listen for Prometheus requests. Defaults to /write, which will expand as: http://<your‑upstream‑URL>:<your‑port>/write.
	PrometheusAPI string `json:"prometheusAPI"`
	// How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
	RequestTimeout *int64 `json:"requestTimeout,omitempty"`
	// Secret parameter value to pass in request body
	Secret *string `json:"secret,omitempty"`
	// Secret parameter name to pass in request body
	SecretParamName *string `json:"secretParamName,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
	SocketTimeout *int64  `json:"socketTimeout,omitempty"`
	Spacer        *string `json:"spacer,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Select (or create) a stored text secret
	TextSecret *string                                 `json:"textSecret,omitempty"`
	TLS        *InputPrometheusRwTLSSettingsServerSide `json:"tls,omitempty"`
	// Bearer token to include in the authorization header
	Token *string `json:"token,omitempty"`
	// Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
	TokenAttributeName *string `json:"tokenAttributeName,omitempty"`
	// How often the OAuth token should be refreshed.
	TokenTimeoutSecs *int64                 `json:"tokenTimeoutSecs,omitempty"`
	Type             *InputPrometheusRwType `json:"type,omitempty"`
	// Username for Basic authentication
	Username *string `json:"username,omitempty"`
}
