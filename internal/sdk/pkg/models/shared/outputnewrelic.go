// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputNewrelicAuthenticationMethod - Enter API key directly, or select a stored secret
type OutputNewrelicAuthenticationMethod string

const (
	OutputNewrelicAuthenticationMethodSecret OutputNewrelicAuthenticationMethod = "secret"
	OutputNewrelicAuthenticationMethodManual OutputNewrelicAuthenticationMethod = "manual"
)

func (e OutputNewrelicAuthenticationMethod) ToPointer() *OutputNewrelicAuthenticationMethod {
	return &e
}

func (e *OutputNewrelicAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = OutputNewrelicAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicAuthenticationMethod: %v", v)
	}
}

type OutputNewrelicExtraHTTPHeaders struct {
	// Field name
	Name *string `json:"name,omitempty"`
	// Field value
	Value string `json:"value"`
}

// OutputNewrelicFailedRequestLoggingMode - Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`.
type OutputNewrelicFailedRequestLoggingMode string

const (
	OutputNewrelicFailedRequestLoggingModePayload           OutputNewrelicFailedRequestLoggingMode = "payload"
	OutputNewrelicFailedRequestLoggingModePayloadAndHeaders OutputNewrelicFailedRequestLoggingMode = "payloadAndHeaders"
	OutputNewrelicFailedRequestLoggingModeNone              OutputNewrelicFailedRequestLoggingMode = "none"
)

func (e OutputNewrelicFailedRequestLoggingMode) ToPointer() *OutputNewrelicFailedRequestLoggingMode {
	return &e
}

func (e *OutputNewrelicFailedRequestLoggingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payload":
		fallthrough
	case "payloadAndHeaders":
		fallthrough
	case "none":
		*e = OutputNewrelicFailedRequestLoggingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicFailedRequestLoggingMode: %v", v)
	}
}

// OutputNewrelicMetadataName - Field name
type OutputNewrelicMetadataName string

const (
	OutputNewrelicMetadataNameService   OutputNewrelicMetadataName = "service"
	OutputNewrelicMetadataNameHostname  OutputNewrelicMetadataName = "hostname"
	OutputNewrelicMetadataNameTimestamp OutputNewrelicMetadataName = "timestamp"
	OutputNewrelicMetadataNameAuditID   OutputNewrelicMetadataName = "auditId"
)

func (e OutputNewrelicMetadataName) ToPointer() *OutputNewrelicMetadataName {
	return &e
}

func (e *OutputNewrelicMetadataName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service":
		fallthrough
	case "hostname":
		fallthrough
	case "timestamp":
		fallthrough
	case "auditId":
		*e = OutputNewrelicMetadataName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicMetadataName: %v", v)
	}
}

type OutputNewrelicMetadata struct {
	// Field name
	Name OutputNewrelicMetadataName `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// OutputNewrelicBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputNewrelicBackpressureBehavior string

const (
	OutputNewrelicBackpressureBehaviorQueue OutputNewrelicBackpressureBehavior = "queue"
	OutputNewrelicBackpressureBehaviorDrop  OutputNewrelicBackpressureBehavior = "drop"
	OutputNewrelicBackpressureBehaviorBlock OutputNewrelicBackpressureBehavior = "block"
)

func (e OutputNewrelicBackpressureBehavior) ToPointer() *OutputNewrelicBackpressureBehavior {
	return &e
}

func (e *OutputNewrelicBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue":
		fallthrough
	case "drop":
		fallthrough
	case "block":
		*e = OutputNewrelicBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicBackpressureBehavior: %v", v)
	}
}

// OutputNewrelicCompression - Codec to use to compress the persisted data.
type OutputNewrelicCompression string

const (
	OutputNewrelicCompressionNone OutputNewrelicCompression = "none"
	OutputNewrelicCompressionGzip OutputNewrelicCompression = "gzip"
)

func (e OutputNewrelicCompression) ToPointer() *OutputNewrelicCompression {
	return &e
}

func (e *OutputNewrelicCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputNewrelicCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicCompression: %v", v)
	}
}

type OutputNewrelicPqControls struct {
}

// OutputNewrelicQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputNewrelicQueueFullBehavior string

const (
	OutputNewrelicQueueFullBehaviorBlock OutputNewrelicQueueFullBehavior = "block"
	OutputNewrelicQueueFullBehaviorDrop  OutputNewrelicQueueFullBehavior = "drop"
)

func (e OutputNewrelicQueueFullBehavior) ToPointer() *OutputNewrelicQueueFullBehavior {
	return &e
}

func (e *OutputNewrelicQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputNewrelicQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicQueueFullBehavior: %v", v)
	}
}

// OutputNewrelicRegion - Which New Relic region endpoint to use.
type OutputNewrelicRegion string

const (
	OutputNewrelicRegionUs OutputNewrelicRegion = "US"
	OutputNewrelicRegionEu OutputNewrelicRegion = "EU"
)

func (e OutputNewrelicRegion) ToPointer() *OutputNewrelicRegion {
	return &e
}

func (e *OutputNewrelicRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "US":
		fallthrough
	case "EU":
		*e = OutputNewrelicRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicRegion: %v", v)
	}
}

type OutputNewrelicType string

const (
	OutputNewrelicTypeNewrelic OutputNewrelicType = "newrelic"
)

func (e OutputNewrelicType) ToPointer() *OutputNewrelicType {
	return &e
}

func (e *OutputNewrelicType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "newrelic":
		*e = OutputNewrelicType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputNewrelicType: %v", v)
	}
}

type OutputNewrelic struct {
	// New Relic API key. Can be overridden using __newRelic_apiKey field.
	APIKey *string `json:"apiKey,omitempty"`
	// Enter API key directly, or select a stored secret
	AuthType *OutputNewrelicAuthenticationMethod `json:"authType,omitempty"`
	// Whether to compress the payload body before sending.
	Compress *bool `json:"compress,omitempty"`
	// Maximum number of ongoing requests before blocking.
	Concurrency *int64 `json:"concurrency,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Headers to add to all events.
	ExtraHTTPHeaders []OutputNewrelicExtraHTTPHeaders `json:"extraHttpHeaders,omitempty"`
	// Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`.
	FailedRequestLoggingMode *OutputNewrelicFailedRequestLoggingMode `json:"failedRequestLoggingMode,omitempty"`
	// Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max body size.
	FlushPeriodSec *int64 `json:"flushPeriodSec,omitempty"`
	// Unique ID for this output
	ID *string `json:"id,omitempty"`
	// Name of the logtype to send with events, e.g.: observability, access_log. The event's 'sourcetype' field (if set) will override this value.
	LogType *string `json:"logType,omitempty"`
	// Max number of events to include in the request body. Default is 0 (unlimited).
	MaxPayloadEvents *int64 `json:"maxPayloadEvents,omitempty"`
	// Maximum size, in KB, of the request body.
	MaxPayloadSizeKB *int64 `json:"maxPayloadSizeKB,omitempty"`
	// Name of field to send as log message value. If not present, event will be serialized and sent as JSON.
	MessageField *string `json:"messageField,omitempty"`
	// Fields to add to events from this input.
	Metadata []OutputNewrelicMetadata `json:"metadata,omitempty"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure *OutputNewrelicBackpressureBehavior `json:"onBackpressure,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputNewrelicCompression `json:"pqCompress,omitempty"`
	PqControls *OutputNewrelicPqControls  `json:"pqControls,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `json:"pqMaxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `json:"pqMaxSize,omitempty"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputNewrelicQueueFullBehavior `json:"pqOnBackpressure,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `json:"pqPath,omitempty"`
	// Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out).
	PqStrictOrdering *bool `json:"pqStrictOrdering,omitempty"`
	// Which New Relic region endpoint to use.
	Region OutputNewrelicRegion `json:"region"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another trusted CA (e.g., the system's CA). Defaults to Yes.
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// List of headers that are safe to log in plain text.
	SafeHeaders []string `json:"safeHeaders,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string `json:"systemFields,omitempty"`
	// Select (or create) a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// Amount of time, in seconds, to wait for a request to complete before aborting it.
	TimeoutSec *int64             `json:"timeoutSec,omitempty"`
	Type       OutputNewrelicType `json:"type"`
	// Enable to use round-robin DNS lookup. When a DNS server returns multiple addresses, this will cause Stream to cycle through them in the order returned.
	UseRoundRobinDNS *bool `json:"useRoundRobinDns,omitempty"`
}
