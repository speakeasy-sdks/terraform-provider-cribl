// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputSyslogFacility - Default value for message facility, will be overwritten by value of __facility if set. Defaults to user.
type OutputSyslogFacility int64

const (
	OutputSyslogFacilityZero      OutputSyslogFacility = 0
	OutputSyslogFacilityOne       OutputSyslogFacility = 1
	OutputSyslogFacilityTwo       OutputSyslogFacility = 2
	OutputSyslogFacilityThree     OutputSyslogFacility = 3
	OutputSyslogFacilityFour      OutputSyslogFacility = 4
	OutputSyslogFacilityFive      OutputSyslogFacility = 5
	OutputSyslogFacilitySix       OutputSyslogFacility = 6
	OutputSyslogFacilitySeven     OutputSyslogFacility = 7
	OutputSyslogFacilityEight     OutputSyslogFacility = 8
	OutputSyslogFacilityNine      OutputSyslogFacility = 9
	OutputSyslogFacilityTen       OutputSyslogFacility = 10
	OutputSyslogFacilityEleven    OutputSyslogFacility = 11
	OutputSyslogFacilityTwelve    OutputSyslogFacility = 12
	OutputSyslogFacilityThirteen  OutputSyslogFacility = 13
	OutputSyslogFacilityFourteen  OutputSyslogFacility = 14
	OutputSyslogFacilityFifteen   OutputSyslogFacility = 15
	OutputSyslogFacilitySixteen   OutputSyslogFacility = 16
	OutputSyslogFacilitySeventeen OutputSyslogFacility = 17
	OutputSyslogFacilityEighteen  OutputSyslogFacility = 18
	OutputSyslogFacilityNineteen  OutputSyslogFacility = 19
	OutputSyslogFacilityTwenty    OutputSyslogFacility = 20
	OutputSyslogFacilityTwentyOne OutputSyslogFacility = 21
)

func (e OutputSyslogFacility) ToPointer() *OutputSyslogFacility {
	return &e
}

func (e *OutputSyslogFacility) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		fallthrough
	case 7:
		fallthrough
	case 8:
		fallthrough
	case 9:
		fallthrough
	case 10:
		fallthrough
	case 11:
		fallthrough
	case 12:
		fallthrough
	case 13:
		fallthrough
	case 14:
		fallthrough
	case 15:
		fallthrough
	case 16:
		fallthrough
	case 17:
		fallthrough
	case 18:
		fallthrough
	case 19:
		fallthrough
	case 20:
		fallthrough
	case 21:
		*e = OutputSyslogFacility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogFacility: %v", v)
	}
}

// OutputSyslogMessageFormat - The syslog message format depending on the receiver's support
type OutputSyslogMessageFormat string

const (
	OutputSyslogMessageFormatRfc3164 OutputSyslogMessageFormat = "rfc3164"
	OutputSyslogMessageFormatRfc5424 OutputSyslogMessageFormat = "rfc5424"
)

func (e OutputSyslogMessageFormat) ToPointer() *OutputSyslogMessageFormat {
	return &e
}

func (e *OutputSyslogMessageFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rfc3164":
		fallthrough
	case "rfc5424":
		*e = OutputSyslogMessageFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogMessageFormat: %v", v)
	}
}

// OutputSyslogBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputSyslogBackpressureBehavior string

const (
	OutputSyslogBackpressureBehaviorQueue OutputSyslogBackpressureBehavior = "queue"
	OutputSyslogBackpressureBehaviorDrop  OutputSyslogBackpressureBehavior = "drop"
	OutputSyslogBackpressureBehaviorBlock OutputSyslogBackpressureBehavior = "block"
)

func (e OutputSyslogBackpressureBehavior) ToPointer() *OutputSyslogBackpressureBehavior {
	return &e
}

func (e *OutputSyslogBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue":
		fallthrough
	case "drop":
		fallthrough
	case "block":
		*e = OutputSyslogBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogBackpressureBehavior: %v", v)
	}
}

type OutputSyslogOptionalFieldsInGeneralSection string

const (
	OutputSyslogOptionalFieldsInGeneralSectionLoadBalanced OutputSyslogOptionalFieldsInGeneralSection = "loadBalanced"
	OutputSyslogOptionalFieldsInGeneralSectionProtocol     OutputSyslogOptionalFieldsInGeneralSection = "protocol"
)

func (e OutputSyslogOptionalFieldsInGeneralSection) ToPointer() *OutputSyslogOptionalFieldsInGeneralSection {
	return &e
}

func (e *OutputSyslogOptionalFieldsInGeneralSection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "loadBalanced":
		fallthrough
	case "protocol":
		*e = OutputSyslogOptionalFieldsInGeneralSection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogOptionalFieldsInGeneralSection: %v", v)
	}
}

// OutputSyslogCompression - Codec to use to compress the persisted data.
type OutputSyslogCompression string

const (
	OutputSyslogCompressionNone OutputSyslogCompression = "none"
	OutputSyslogCompressionGzip OutputSyslogCompression = "gzip"
)

func (e OutputSyslogCompression) ToPointer() *OutputSyslogCompression {
	return &e
}

func (e *OutputSyslogCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputSyslogCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogCompression: %v", v)
	}
}

type OutputSyslogPqControls struct {
}

// OutputSyslogQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputSyslogQueueFullBehavior string

const (
	OutputSyslogQueueFullBehaviorBlock OutputSyslogQueueFullBehavior = "block"
	OutputSyslogQueueFullBehaviorDrop  OutputSyslogQueueFullBehavior = "drop"
)

func (e OutputSyslogQueueFullBehavior) ToPointer() *OutputSyslogQueueFullBehavior {
	return &e
}

func (e *OutputSyslogQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputSyslogQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogQueueFullBehavior: %v", v)
	}
}

// OutputSyslogProtocol - The network protocol to use for sending out syslog messages
type OutputSyslogProtocol string

const (
	OutputSyslogProtocolUDP OutputSyslogProtocol = "udp"
)

func (e OutputSyslogProtocol) ToPointer() *OutputSyslogProtocol {
	return &e
}

func (e *OutputSyslogProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "udp":
		*e = OutputSyslogProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogProtocol: %v", v)
	}
}

// OutputSyslogSeverity - Default value for message severity, will be overwritten by value of __severity if set. Defaults to notice.
type OutputSyslogSeverity int64

const (
	OutputSyslogSeverityZero  OutputSyslogSeverity = 0
	OutputSyslogSeverityOne   OutputSyslogSeverity = 1
	OutputSyslogSeverityTwo   OutputSyslogSeverity = 2
	OutputSyslogSeverityThree OutputSyslogSeverity = 3
	OutputSyslogSeverityFour  OutputSyslogSeverity = 4
	OutputSyslogSeverityFive  OutputSyslogSeverity = 5
	OutputSyslogSeveritySix   OutputSyslogSeverity = 6
	OutputSyslogSeveritySeven OutputSyslogSeverity = 7
)

func (e OutputSyslogSeverity) ToPointer() *OutputSyslogSeverity {
	return &e
}

func (e *OutputSyslogSeverity) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		fallthrough
	case 7:
		*e = OutputSyslogSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogSeverity: %v", v)
	}
}

// OutputSyslogTimestampFormat - Timestamp format to use when serializing event's time field
type OutputSyslogTimestampFormat string

const (
	OutputSyslogTimestampFormatSyslog  OutputSyslogTimestampFormat = "syslog"
	OutputSyslogTimestampFormatIso8601 OutputSyslogTimestampFormat = "iso8601"
)

func (e OutputSyslogTimestampFormat) ToPointer() *OutputSyslogTimestampFormat {
	return &e
}

func (e *OutputSyslogTimestampFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		fallthrough
	case "iso8601":
		*e = OutputSyslogTimestampFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogTimestampFormat: %v", v)
	}
}

// OutputSyslogTLSSettingsClientSideMaximumTLSVersion - Maximum TLS version to use when connecting
type OutputSyslogTLSSettingsClientSideMaximumTLSVersion string

const (
	OutputSyslogTLSSettingsClientSideMaximumTLSVersionTlSv1  OutputSyslogTLSSettingsClientSideMaximumTLSVersion = "TLSv1"
	OutputSyslogTLSSettingsClientSideMaximumTLSVersionTlSv11 OutputSyslogTLSSettingsClientSideMaximumTLSVersion = "TLSv1.1"
	OutputSyslogTLSSettingsClientSideMaximumTLSVersionTlSv12 OutputSyslogTLSSettingsClientSideMaximumTLSVersion = "TLSv1.2"
	OutputSyslogTLSSettingsClientSideMaximumTLSVersionTlSv13 OutputSyslogTLSSettingsClientSideMaximumTLSVersion = "TLSv1.3"
)

func (e OutputSyslogTLSSettingsClientSideMaximumTLSVersion) ToPointer() *OutputSyslogTLSSettingsClientSideMaximumTLSVersion {
	return &e
}

func (e *OutputSyslogTLSSettingsClientSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputSyslogTLSSettingsClientSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogTLSSettingsClientSideMaximumTLSVersion: %v", v)
	}
}

// OutputSyslogTLSSettingsClientSideMinimumTLSVersion - Minimum TLS version to use when connecting
type OutputSyslogTLSSettingsClientSideMinimumTLSVersion string

const (
	OutputSyslogTLSSettingsClientSideMinimumTLSVersionTlSv1  OutputSyslogTLSSettingsClientSideMinimumTLSVersion = "TLSv1"
	OutputSyslogTLSSettingsClientSideMinimumTLSVersionTlSv11 OutputSyslogTLSSettingsClientSideMinimumTLSVersion = "TLSv1.1"
	OutputSyslogTLSSettingsClientSideMinimumTLSVersionTlSv12 OutputSyslogTLSSettingsClientSideMinimumTLSVersion = "TLSv1.2"
	OutputSyslogTLSSettingsClientSideMinimumTLSVersionTlSv13 OutputSyslogTLSSettingsClientSideMinimumTLSVersion = "TLSv1.3"
)

func (e OutputSyslogTLSSettingsClientSideMinimumTLSVersion) ToPointer() *OutputSyslogTLSSettingsClientSideMinimumTLSVersion {
	return &e
}

func (e *OutputSyslogTLSSettingsClientSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputSyslogTLSSettingsClientSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogTLSSettingsClientSideMinimumTLSVersion: %v", v)
	}
}

type OutputSyslogTLSSettingsClientSide struct {
	// Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	Disabled        *bool   `json:"disabled,omitempty"`
	// Maximum TLS version to use when connecting
	MaxVersion *OutputSyslogTLSSettingsClientSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to use when connecting
	MinVersion *OutputSyslogTLSSettingsClientSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another trusted CA (e.g., the system's CA). Defaults to No.
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
	Servername *string `json:"servername,omitempty"`
}

type OutputSyslogType string

const (
	OutputSyslogTypeSyslog OutputSyslogType = "syslog"
)

func (e OutputSyslogType) ToPointer() *OutputSyslogType {
	return &e
}

func (e *OutputSyslogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = OutputSyslogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSyslogType: %v", v)
	}
}

type OutputSyslog struct {
	// Default value for application name, will be overwritten by value of __appname if set. Defaults to Cribl.
	AppName *string `json:"appName,omitempty"`
	// Amount of time (milliseconds) to wait for the connection to establish before retrying
	ConnectionTimeout *int64 `json:"connectionTimeout,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Default value for message facility, will be overwritten by value of __facility if set. Defaults to user.
	Facility *OutputSyslogFacility `json:"facility,omitempty"`
	// The hostname of the receiver
	Host *string `json:"host,omitempty"`
	// Unique ID for this output
	ID string `json:"id"`
	// Use load-balanced destinations
	LoadBalanced *bool `json:"loadBalanced,omitempty"`
	// Maximum size of syslog messages. If max record size is > than MTU then UDP packets can be fragmented across, set this value  <= MTU to avoid fragmentation.
	MaxRecordSize *int64 `json:"maxRecordSize,omitempty"`
	// The syslog message format depending on the receiver's support
	MessageFormat *OutputSyslogMessageFormat `json:"messageFormat,omitempty"`
	// When enabled, messages will be prefixed with the byte count of the message. Otherwise, no prefix will be set, and the message will be appended with a \n.
	OctetCountFraming *bool `json:"octetCountFraming,omitempty"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure                 *OutputSyslogBackpressureBehavior           `json:"onBackpressure,omitempty"`
	OptionalFieldsInGeneralSection *OutputSyslogOptionalFieldsInGeneralSection `json:"optionalFieldsInGeneralSection,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// The port to connect to on the provided host
	Port *int64 `json:"port,omitempty"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputSyslogCompression `json:"pqCompress,omitempty"`
	PqControls *OutputSyslogPqControls  `json:"pqControls,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `json:"pqMaxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `json:"pqMaxSize,omitempty"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputSyslogQueueFullBehavior `json:"pqOnBackpressure,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `json:"pqPath,omitempty"`
	// Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out).
	PqStrictOrdering *bool `json:"pqStrictOrdering,omitempty"`
	// The network protocol to use for sending out syslog messages
	Protocol *OutputSyslogProtocol `json:"protocol,omitempty"`
	// Default value for message severity, will be overwritten by value of __severity if set. Defaults to notice.
	Severity *OutputSyslogSeverity `json:"severity,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string `json:"systemFields,omitempty"`
	// Rate (in bytes per second) to throttle while writing to an output. Also takes values with multiple-byte units, such as KB, MB, GB, etc. (E.g., 42 MB.) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string `json:"throttleRatePerSec,omitempty"`
	// Timestamp format to use when serializing event's time field
	TimestampFormat *OutputSyslogTimestampFormat       `json:"timestampFormat,omitempty"`
	TLS             *OutputSyslogTLSSettingsClientSide `json:"tls,omitempty"`
	Type            OutputSyslogType                   `json:"type"`
	// Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
	WriteTimeout *int64 `json:"writeTimeout,omitempty"`
}
