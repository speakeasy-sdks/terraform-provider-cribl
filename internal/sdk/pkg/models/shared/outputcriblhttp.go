// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputCriblHTTPCompression - Codec to use to compress the data before sending.
type OutputCriblHTTPCompression string

const (
	OutputCriblHTTPCompressionNone OutputCriblHTTPCompression = "none"
	OutputCriblHTTPCompressionGzip OutputCriblHTTPCompression = "gzip"
)

func (e OutputCriblHTTPCompression) ToPointer() *OutputCriblHTTPCompression {
	return &e
}

func (e *OutputCriblHTTPCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputCriblHTTPCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPCompression: %v", v)
	}
}

type OutputCriblHTTPExtraHTTPHeaders struct {
	// Field name
	Name *string `json:"name,omitempty"`
	// Field value
	Value string `json:"value"`
}

// OutputCriblHTTPFailedRequestLoggingMode - Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`.
type OutputCriblHTTPFailedRequestLoggingMode string

const (
	OutputCriblHTTPFailedRequestLoggingModePayload           OutputCriblHTTPFailedRequestLoggingMode = "payload"
	OutputCriblHTTPFailedRequestLoggingModePayloadAndHeaders OutputCriblHTTPFailedRequestLoggingMode = "payloadAndHeaders"
	OutputCriblHTTPFailedRequestLoggingModeNone              OutputCriblHTTPFailedRequestLoggingMode = "none"
)

func (e OutputCriblHTTPFailedRequestLoggingMode) ToPointer() *OutputCriblHTTPFailedRequestLoggingMode {
	return &e
}

func (e *OutputCriblHTTPFailedRequestLoggingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payload":
		fallthrough
	case "payloadAndHeaders":
		fallthrough
	case "none":
		*e = OutputCriblHTTPFailedRequestLoggingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPFailedRequestLoggingMode: %v", v)
	}
}

// OutputCriblHTTPBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputCriblHTTPBackpressureBehavior string

const (
	OutputCriblHTTPBackpressureBehaviorQueue OutputCriblHTTPBackpressureBehavior = "queue"
	OutputCriblHTTPBackpressureBehaviorDrop  OutputCriblHTTPBackpressureBehavior = "drop"
	OutputCriblHTTPBackpressureBehaviorBlock OutputCriblHTTPBackpressureBehavior = "block"
)

func (e OutputCriblHTTPBackpressureBehavior) ToPointer() *OutputCriblHTTPBackpressureBehavior {
	return &e
}

func (e *OutputCriblHTTPBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue":
		fallthrough
	case "drop":
		fallthrough
	case "block":
		*e = OutputCriblHTTPBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPBackpressureBehavior: %v", v)
	}
}

type OutputCriblHTTPOptionalFieldsInGeneralSection string

const (
	OutputCriblHTTPOptionalFieldsInGeneralSectionLoadBalanced OutputCriblHTTPOptionalFieldsInGeneralSection = "loadBalanced"
	OutputCriblHTTPOptionalFieldsInGeneralSectionUrls         OutputCriblHTTPOptionalFieldsInGeneralSection = "urls"
)

func (e OutputCriblHTTPOptionalFieldsInGeneralSection) ToPointer() *OutputCriblHTTPOptionalFieldsInGeneralSection {
	return &e
}

func (e *OutputCriblHTTPOptionalFieldsInGeneralSection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "loadBalanced":
		fallthrough
	case "urls":
		*e = OutputCriblHTTPOptionalFieldsInGeneralSection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPOptionalFieldsInGeneralSection: %v", v)
	}
}

type OutputCriblHTTPPqControls struct {
}

// OutputCriblHTTPQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputCriblHTTPQueueFullBehavior string

const (
	OutputCriblHTTPQueueFullBehaviorBlock OutputCriblHTTPQueueFullBehavior = "block"
	OutputCriblHTTPQueueFullBehaviorDrop  OutputCriblHTTPQueueFullBehavior = "drop"
)

func (e OutputCriblHTTPQueueFullBehavior) ToPointer() *OutputCriblHTTPQueueFullBehavior {
	return &e
}

func (e *OutputCriblHTTPQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputCriblHTTPQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPQueueFullBehavior: %v", v)
	}
}

// OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion - Maximum TLS version to use when connecting
type OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion string

const (
	OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersionTlSv1  OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion = "TLSv1"
	OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersionTlSv11 OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion = "TLSv1.1"
	OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersionTlSv12 OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion = "TLSv1.2"
	OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersionTlSv13 OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion = "TLSv1.3"
)

func (e OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion) ToPointer() *OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion {
	return &e
}

func (e *OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion: %v", v)
	}
}

// OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion - Minimum TLS version to use when connecting
type OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion string

const (
	OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersionTlSv1  OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion = "TLSv1"
	OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersionTlSv11 OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion = "TLSv1.1"
	OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersionTlSv12 OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion = "TLSv1.2"
	OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersionTlSv13 OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion = "TLSv1.3"
)

func (e OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion) ToPointer() *OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion {
	return &e
}

func (e *OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion: %v", v)
	}
}

type OutputCriblHTTPTLSSettingsClientSide struct {
	// Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	Disabled        *bool   `json:"disabled,omitempty"`
	// Maximum TLS version to use when connecting
	MaxVersion *OutputCriblHTTPTLSSettingsClientSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to use when connecting
	MinVersion *OutputCriblHTTPTLSSettingsClientSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another trusted CA (e.g., the system's CA). Defaults to No.
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
	Servername *string `json:"servername,omitempty"`
}

type OutputCriblHTTPType string

const (
	OutputCriblHTTPTypeCriblHTTP OutputCriblHTTPType = "cribl_http"
)

func (e OutputCriblHTTPType) ToPointer() *OutputCriblHTTPType {
	return &e
}

func (e *OutputCriblHTTPType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl_http":
		*e = OutputCriblHTTPType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPType: %v", v)
	}
}

type OutputCriblHTTPUrls struct {
	// URL of a Cribl Worker to send events to, e.g., http://localhost:10200
	URL string `json:"url"`
	// The weight to use for load-balancing purposes.
	Weight *int64 `json:"weight,omitempty"`
}

type OutputCriblHTTP struct {
	// Codec to use to compress the data before sending.
	Compression *OutputCriblHTTPCompression `json:"compression,omitempty"`
	// Maximum number of ongoing requests before blocking.
	Concurrency *int64 `json:"concurrency,omitempty"`
	// Re-resolve any hostnames every this many seconds and pick up destinations from A records.
	DNSResolvePeriodSec *int64 `json:"dnsResolvePeriodSec,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Fields to exclude from the event. By default, all internal fields except `__output` are sent. E.g.: `cribl_pipe`, `c*`. Wildcards supported.
	ExcludeFields []string `json:"excludeFields,omitempty"`
	// Exclude all IPs of the current host from the list of any resolved hostnames.
	ExcludeSelf *bool `json:"excludeSelf,omitempty"`
	// Headers to add to all events.
	ExtraHTTPHeaders []OutputCriblHTTPExtraHTTPHeaders `json:"extraHttpHeaders,omitempty"`
	// Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`.
	FailedRequestLoggingMode *OutputCriblHTTPFailedRequestLoggingMode `json:"failedRequestLoggingMode,omitempty"`
	// Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max body size.
	FlushPeriodSec *int64 `json:"flushPeriodSec,omitempty"`
	// Unique ID for this output
	ID string `json:"id"`
	// How far back in time to keep traffic stats for load balancing purposes.
	LoadBalanceStatsPeriodSec *int64 `json:"loadBalanceStatsPeriodSec,omitempty"`
	// Use load-balanced destinations
	LoadBalanced *bool `json:"loadBalanced,omitempty"`
	// Max number of events to include in the request body. Default is 0 (unlimited).
	MaxPayloadEvents *int64 `json:"maxPayloadEvents,omitempty"`
	// Maximum size, in KB, of the request body.
	MaxPayloadSizeKB *int64 `json:"maxPayloadSizeKB,omitempty"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure                 *OutputCriblHTTPBackpressureBehavior           `json:"onBackpressure,omitempty"`
	OptionalFieldsInGeneralSection *OutputCriblHTTPOptionalFieldsInGeneralSection `json:"optionalFieldsInGeneralSection,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputCriblHTTPCompression `json:"pqCompress,omitempty"`
	PqControls *OutputCriblHTTPPqControls  `json:"pqControls,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `json:"pqMaxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `json:"pqMaxSize,omitempty"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputCriblHTTPQueueFullBehavior `json:"pqOnBackpressure,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `json:"pqPath,omitempty"`
	// Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out).
	PqStrictOrdering *bool `json:"pqStrictOrdering,omitempty"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another trusted CA (e.g., the system's CA). Defaults to Yes.
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// List of headers that are safe to log in plain text.
	SafeHeaders []string `json:"safeHeaders,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string `json:"systemFields,omitempty"`
	// Amount of time, in seconds, to wait for a request to complete before aborting it.
	TimeoutSec *int64                                `json:"timeoutSec,omitempty"`
	TLS        *OutputCriblHTTPTLSSettingsClientSide `json:"tls,omitempty"`
	// The number of minutes before the internally generated authentication token expires, valid values between 1 and 60.
	TokenTTLMinutes *int64              `json:"tokenTTLMinutes,omitempty"`
	Type            OutputCriblHTTPType `json:"type"`
	// URL of a Cribl Worker to send events to, e.g., http://localhost:10200
	URL  *string               `json:"url,omitempty"`
	Urls []OutputCriblHTTPUrls `json:"urls,omitempty"`
	// Enable to use round-robin DNS lookup. When a DNS server returns multiple addresses, this will cause Stream to cycle through them in the order returned.
	UseRoundRobinDNS *bool `json:"useRoundRobinDns,omitempty"`
}
