// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputOpenTelemetryAuthenticationType - OpenTelemetry authentication type
type InputOpenTelemetryAuthenticationType string

const (
	InputOpenTelemetryAuthenticationTypeOauth             InputOpenTelemetryAuthenticationType = "oauth"
	InputOpenTelemetryAuthenticationTypeBasic             InputOpenTelemetryAuthenticationType = "basic"
	InputOpenTelemetryAuthenticationTypeCredentialsSecret InputOpenTelemetryAuthenticationType = "credentialsSecret"
	InputOpenTelemetryAuthenticationTypeToken             InputOpenTelemetryAuthenticationType = "token"
	InputOpenTelemetryAuthenticationTypeTextSecret        InputOpenTelemetryAuthenticationType = "textSecret"
)

func (e InputOpenTelemetryAuthenticationType) ToPointer() *InputOpenTelemetryAuthenticationType {
	return &e
}

func (e *InputOpenTelemetryAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		*e = InputOpenTelemetryAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOpenTelemetryAuthenticationType: %v", v)
	}
}

type InputOpenTelemetryConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputOpenTelemetryMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

type InputOpenTelemetryOauthHeaders struct {
	// OAuth header name
	Name string `json:"name"`
	// OAuth header value
	Value string `json:"value"`
}

type InputOpenTelemetryOauthParams struct {
	// OAuth parameter name
	Name string `json:"name"`
	// OAuth parameter value
	Value string `json:"value"`
}

// InputOpenTelemetryPqCompression - Codec to use to compress the persisted data.
type InputOpenTelemetryPqCompression string

const (
	InputOpenTelemetryPqCompressionNone InputOpenTelemetryPqCompression = "none"
	InputOpenTelemetryPqCompressionGzip InputOpenTelemetryPqCompression = "gzip"
)

func (e InputOpenTelemetryPqCompression) ToPointer() *InputOpenTelemetryPqCompression {
	return &e
}

func (e *InputOpenTelemetryPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputOpenTelemetryPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOpenTelemetryPqCompression: %v", v)
	}
}

// InputOpenTelemetryPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputOpenTelemetryPqMode string

const (
	InputOpenTelemetryPqModeSmart  InputOpenTelemetryPqMode = "smart"
	InputOpenTelemetryPqModeAlways InputOpenTelemetryPqMode = "always"
)

func (e InputOpenTelemetryPqMode) ToPointer() *InputOpenTelemetryPqMode {
	return &e
}

func (e *InputOpenTelemetryPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputOpenTelemetryPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOpenTelemetryPqMode: %v", v)
	}
}

type InputOpenTelemetryPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputOpenTelemetryPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputOpenTelemetryPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

// InputOpenTelemetryProtocol - Select whether to leverage gRPC or HTTP for OpenTelemetry
type InputOpenTelemetryProtocol string

const (
	InputOpenTelemetryProtocolGrpc InputOpenTelemetryProtocol = "grpc"
	InputOpenTelemetryProtocolHTTP InputOpenTelemetryProtocol = "http"
)

func (e InputOpenTelemetryProtocol) ToPointer() *InputOpenTelemetryProtocol {
	return &e
}

func (e *InputOpenTelemetryProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "http":
		*e = InputOpenTelemetryProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOpenTelemetryProtocol: %v", v)
	}
}

// InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion - Maximum TLS version to accept from connections.
type InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion string

const (
	InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersionTlSv1  InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion = "TLSv1"
	InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersionTlSv11 InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion = "TLSv1.1"
	InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersionTlSv12 InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion = "TLSv1.2"
	InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersionTlSv13 InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion = "TLSv1.3"
)

func (e InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion) ToPointer() *InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion {
	return &e
}

func (e *InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion: %v", v)
	}
}

// InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion - Minimum TLS version to accept from connections.
type InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion string

const (
	InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersionTlSv1  InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion = "TLSv1"
	InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersionTlSv11 InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion = "TLSv1.1"
	InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersionTlSv12 InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion = "TLSv1.2"
	InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersionTlSv13 InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion = "TLSv1.3"
)

func (e InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion) ToPointer() *InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion {
	return &e
}

func (e *InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion: %v", v)
	}
}

type InputOpenTelemetryTLSSettingsServerSide struct {
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string     `json:"certificateName,omitempty"`
	CommonNameRegex interface{} `json:"commonNameRegex,omitempty"`
	Disabled        *bool       `json:"disabled,omitempty"`
	// Maximum TLS version to accept from connections.
	MaxVersion *InputOpenTelemetryTLSSettingsServerSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to accept from connections.
	MinVersion *InputOpenTelemetryTLSSettingsServerSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath        *string     `json:"privKeyPath,omitempty"`
	RejectUnauthorized interface{} `json:"rejectUnauthorized,omitempty"`
	// Whether to require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert *bool `json:"requestCert,omitempty"`
}

type InputOpenTelemetryType string

const (
	InputOpenTelemetryTypeOpenTelemetry InputOpenTelemetryType = "open_telemetry"
)

func (e InputOpenTelemetryType) ToPointer() *InputOpenTelemetryType {
	return &e
}

func (e *InputOpenTelemetryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open_telemetry":
		*e = InputOpenTelemetryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOpenTelemetryType: %v", v)
	}
}

type InputOpenTelemetry struct {
	ActivityLogSampleRate interface{} `json:"activityLogSampleRate,omitempty"`
	// JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
	AuthHeaderExpr *string `json:"authHeaderExpr,omitempty"`
	// OpenTelemetry authentication type
	AuthType       *InputOpenTelemetryAuthenticationType `json:"authType,omitempty"`
	CaptureHeaders interface{}                           `json:"captureHeaders,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputOpenTelemetryConnections `json:"connections,omitempty"`
	// Select (or create) a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// Enable/disable this input
	Disabled          *bool       `json:"disabled,omitempty"`
	EnableProxyHeader interface{} `json:"enableProxyHeader,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Toggle to Yes to extract each incoming Gauge or IntGauge metric to multiple events, one per data point.
	ExtractMetrics *bool `json:"extractMetrics,omitempty"`
	// Toggle to Yes to extract each incoming span to a separate event.
	ExtractSpans *bool `json:"extractSpans,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses). IPv6 addresses must be enclosed by square brackets.
	Host string `json:"host"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 sec.; maximum 600 sec. (10 min.).
	KeepAliveTimeout *int64 `json:"keepAliveTimeout,omitempty"`
	// URL for OAuth
	LoginURL *string `json:"loginUrl,omitempty"`
	// Maximum number of active connections allowed per Worker Process, use 0 for unlimited
	MaxActiveCxn *int64 `json:"maxActiveCxn,omitempty"`
	// Maximum number of active requests per Worker Process. Use 0 for unlimited.
	MaxActiveReq *int64 `json:"maxActiveReq,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputOpenTelemetryMetadata `json:"metadata,omitempty"`
	// Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthHeaders []InputOpenTelemetryOauthHeaders `json:"oauthHeaders,omitempty"`
	// Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthParams []InputOpenTelemetryOauthParams `json:"oauthParams,omitempty"`
	// Password for Basic authentication
	Password *string `json:"password,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// Port to listen on.
	Port int64                 `json:"port"`
	Pq   *InputOpenTelemetryPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to leverage gRPC or HTTP for OpenTelemetry
	Protocol *InputOpenTelemetryProtocol `json:"protocol,omitempty"`
	// How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
	RequestTimeout *int64 `json:"requestTimeout,omitempty"`
	// Secret parameter value to pass in request body
	Secret *string `json:"secret,omitempty"`
	// Secret parameter name to pass in request body
	SecretParamName *string `json:"secretParamName,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
	SocketTimeout *int64  `json:"socketTimeout,omitempty"`
	Spacer        *string `json:"spacer,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Select (or create) a stored text secret
	TextSecret *string                                  `json:"textSecret,omitempty"`
	TLS        *InputOpenTelemetryTLSSettingsServerSide `json:"tls,omitempty"`
	// Bearer token to include in the authorization header
	Token *string `json:"token,omitempty"`
	// Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
	TokenAttributeName *string `json:"tokenAttributeName,omitempty"`
	// How often the OAuth token should be refreshed.
	TokenTimeoutSecs *int64                  `json:"tokenTimeoutSecs,omitempty"`
	Type             *InputOpenTelemetryType `json:"type,omitempty"`
	// Username for Basic authentication
	Username *string `json:"username,omitempty"`
}
