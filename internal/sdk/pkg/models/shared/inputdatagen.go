// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputDatagenConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputDatagenMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputDatagenPqCompression - Codec to use to compress the persisted data.
type InputDatagenPqCompression string

const (
	InputDatagenPqCompressionNone InputDatagenPqCompression = "none"
	InputDatagenPqCompressionGzip InputDatagenPqCompression = "gzip"
)

func (e InputDatagenPqCompression) ToPointer() *InputDatagenPqCompression {
	return &e
}

func (e *InputDatagenPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputDatagenPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputDatagenPqCompression: %v", v)
	}
}

// InputDatagenPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputDatagenPqMode string

const (
	InputDatagenPqModeSmart  InputDatagenPqMode = "smart"
	InputDatagenPqModeAlways InputDatagenPqMode = "always"
)

func (e InputDatagenPqMode) ToPointer() *InputDatagenPqMode {
	return &e
}

func (e *InputDatagenPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputDatagenPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputDatagenPqMode: %v", v)
	}
}

type InputDatagenPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputDatagenPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputDatagenPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputDatagenSamples struct {
	// Maximum no. of events to generate per second per worker node. Defaults to 10.
	EventsPerSec int64 `json:"eventsPerSec"`
	// Name of the datagen file
	Sample string `json:"sample"`
}

type InputDatagenInputType string

const (
	InputDatagenInputTypeSplunk            InputDatagenInputType = "splunk"
	InputDatagenInputTypeSplunkHec         InputDatagenInputType = "splunk_hec"
	InputDatagenInputTypeSyslog            InputDatagenInputType = "syslog"
	InputDatagenInputTypeTcpjson           InputDatagenInputType = "tcpjson"
	InputDatagenInputTypeGrafana           InputDatagenInputType = "grafana"
	InputDatagenInputTypeLoki              InputDatagenInputType = "loki"
	InputDatagenInputTypeHTTP              InputDatagenInputType = "http"
	InputDatagenInputTypeHTTPRaw           InputDatagenInputType = "http_raw"
	InputDatagenInputTypeFirehose          InputDatagenInputType = "firehose"
	InputDatagenInputTypeElastic           InputDatagenInputType = "elastic"
	InputDatagenInputTypeKafka             InputDatagenInputType = "kafka"
	InputDatagenInputTypeConfluentCloud    InputDatagenInputType = "confluent_cloud"
	InputDatagenInputTypeMsk               InputDatagenInputType = "msk"
	InputDatagenInputTypeKinesis           InputDatagenInputType = "kinesis"
	InputDatagenInputTypeEventhub          InputDatagenInputType = "eventhub"
	InputDatagenInputTypeAzureBlob         InputDatagenInputType = "azure_blob"
	InputDatagenInputTypeMetrics           InputDatagenInputType = "metrics"
	InputDatagenInputTypeSqs               InputDatagenInputType = "sqs"
	InputDatagenInputTypeS3                InputDatagenInputType = "s3"
	InputDatagenInputTypeSnmp              InputDatagenInputType = "snmp"
	InputDatagenInputTypeCrowdstrike       InputDatagenInputType = "crowdstrike"
	InputDatagenInputTypeTCP               InputDatagenInputType = "tcp"
	InputDatagenInputTypeRawUDP            InputDatagenInputType = "raw_udp"
	InputDatagenInputTypeOffice365Service  InputDatagenInputType = "office365_service"
	InputDatagenInputTypeOffice365Mgmt     InputDatagenInputType = "office365_mgmt"
	InputDatagenInputTypeOffice365MsgTrace InputDatagenInputType = "office365_msg_trace"
	InputDatagenInputTypePrometheus        InputDatagenInputType = "prometheus"
	InputDatagenInputTypeEdgePrometheus    InputDatagenInputType = "edge_prometheus"
	InputDatagenInputTypePrometheusRw      InputDatagenInputType = "prometheus_rw"
	InputDatagenInputTypeAppscope          InputDatagenInputType = "appscope"
	InputDatagenInputTypeGooglePubsub      InputDatagenInputType = "google_pubsub"
	InputDatagenInputTypeOpenTelemetry     InputDatagenInputType = "open_telemetry"
	InputDatagenInputTypeDatadogAgent      InputDatagenInputType = "datadog_agent"
	InputDatagenInputTypeWef               InputDatagenInputType = "wef"
	InputDatagenInputTypeDatagen           InputDatagenInputType = "datagen"
	InputDatagenInputTypeCribl             InputDatagenInputType = "cribl"
	InputDatagenInputTypeCriblmetrics      InputDatagenInputType = "criblmetrics"
	InputDatagenInputTypeCriblHTTP         InputDatagenInputType = "cribl_http"
	InputDatagenInputTypeCriblTCP          InputDatagenInputType = "cribl_tcp"
	InputDatagenInputTypeWinEventLogs      InputDatagenInputType = "win_event_logs"
	InputDatagenInputTypeSystemMetrics     InputDatagenInputType = "system_metrics"
	InputDatagenInputTypeWindowsMetrics    InputDatagenInputType = "windows_metrics"
	InputDatagenInputTypeSystemState       InputDatagenInputType = "system_state"
	InputDatagenInputTypeKubeMetrics       InputDatagenInputType = "kube_metrics"
	InputDatagenInputTypeKubeLogs          InputDatagenInputType = "kube_logs"
	InputDatagenInputTypeKubeEvents        InputDatagenInputType = "kube_events"
	InputDatagenInputTypeExec              InputDatagenInputType = "exec"
	InputDatagenInputTypeSplunkSearch      InputDatagenInputType = "splunk_search"
	InputDatagenInputTypeFile              InputDatagenInputType = "file"
	InputDatagenInputTypeJournalFiles      InputDatagenInputType = "journal_files"
)

func (e InputDatagenInputType) ToPointer() *InputDatagenInputType {
	return &e
}

func (e *InputDatagenInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		*e = InputDatagenInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputDatagenInputType: %v", v)
	}
}

type InputDatagen struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputDatagenConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputDatagenMetadata `json:"metadata,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string         `json:"pipeline,omitempty"`
	Pq       *InputDatagenPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// List of datagens
	Samples []InputDatagenSamples `json:"samples"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string              `json:"streamtags,omitempty"`
	Type       InputDatagenInputType `json:"type"`
}
