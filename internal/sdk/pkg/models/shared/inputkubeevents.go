// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputKubeEventsConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputKubeEventsMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputKubeEventsPqCompression - Codec to use to compress the persisted data.
type InputKubeEventsPqCompression string

const (
	InputKubeEventsPqCompressionNone InputKubeEventsPqCompression = "none"
	InputKubeEventsPqCompressionGzip InputKubeEventsPqCompression = "gzip"
)

func (e InputKubeEventsPqCompression) ToPointer() *InputKubeEventsPqCompression {
	return &e
}

func (e *InputKubeEventsPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputKubeEventsPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeEventsPqCompression: %v", v)
	}
}

// InputKubeEventsPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputKubeEventsPqMode string

const (
	InputKubeEventsPqModeSmart  InputKubeEventsPqMode = "smart"
	InputKubeEventsPqModeAlways InputKubeEventsPqMode = "always"
)

func (e InputKubeEventsPqMode) ToPointer() *InputKubeEventsPqMode {
	return &e
}

func (e *InputKubeEventsPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputKubeEventsPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeEventsPqMode: %v", v)
	}
}

type InputKubeEventsPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputKubeEventsPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputKubeEventsPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputKubeEventsRules struct {
	// Optional description of this rule's purpose
	Description *string `json:"description,omitempty"`
	// JavaScript expression applied to Kubernetes objects. Return 'true' to include it.
	Filter string `json:"filter"`
}

type InputKubeEventsInputType string

const (
	InputKubeEventsInputTypeSplunk            InputKubeEventsInputType = "splunk"
	InputKubeEventsInputTypeSplunkHec         InputKubeEventsInputType = "splunk_hec"
	InputKubeEventsInputTypeSyslog            InputKubeEventsInputType = "syslog"
	InputKubeEventsInputTypeTcpjson           InputKubeEventsInputType = "tcpjson"
	InputKubeEventsInputTypeGrafana           InputKubeEventsInputType = "grafana"
	InputKubeEventsInputTypeLoki              InputKubeEventsInputType = "loki"
	InputKubeEventsInputTypeHTTP              InputKubeEventsInputType = "http"
	InputKubeEventsInputTypeHTTPRaw           InputKubeEventsInputType = "http_raw"
	InputKubeEventsInputTypeFirehose          InputKubeEventsInputType = "firehose"
	InputKubeEventsInputTypeElastic           InputKubeEventsInputType = "elastic"
	InputKubeEventsInputTypeKafka             InputKubeEventsInputType = "kafka"
	InputKubeEventsInputTypeConfluentCloud    InputKubeEventsInputType = "confluent_cloud"
	InputKubeEventsInputTypeMsk               InputKubeEventsInputType = "msk"
	InputKubeEventsInputTypeKinesis           InputKubeEventsInputType = "kinesis"
	InputKubeEventsInputTypeEventhub          InputKubeEventsInputType = "eventhub"
	InputKubeEventsInputTypeAzureBlob         InputKubeEventsInputType = "azure_blob"
	InputKubeEventsInputTypeMetrics           InputKubeEventsInputType = "metrics"
	InputKubeEventsInputTypeSqs               InputKubeEventsInputType = "sqs"
	InputKubeEventsInputTypeS3                InputKubeEventsInputType = "s3"
	InputKubeEventsInputTypeSnmp              InputKubeEventsInputType = "snmp"
	InputKubeEventsInputTypeCrowdstrike       InputKubeEventsInputType = "crowdstrike"
	InputKubeEventsInputTypeTCP               InputKubeEventsInputType = "tcp"
	InputKubeEventsInputTypeRawUDP            InputKubeEventsInputType = "raw_udp"
	InputKubeEventsInputTypeOffice365Service  InputKubeEventsInputType = "office365_service"
	InputKubeEventsInputTypeOffice365Mgmt     InputKubeEventsInputType = "office365_mgmt"
	InputKubeEventsInputTypeOffice365MsgTrace InputKubeEventsInputType = "office365_msg_trace"
	InputKubeEventsInputTypePrometheus        InputKubeEventsInputType = "prometheus"
	InputKubeEventsInputTypeEdgePrometheus    InputKubeEventsInputType = "edge_prometheus"
	InputKubeEventsInputTypePrometheusRw      InputKubeEventsInputType = "prometheus_rw"
	InputKubeEventsInputTypeAppscope          InputKubeEventsInputType = "appscope"
	InputKubeEventsInputTypeGooglePubsub      InputKubeEventsInputType = "google_pubsub"
	InputKubeEventsInputTypeOpenTelemetry     InputKubeEventsInputType = "open_telemetry"
	InputKubeEventsInputTypeDatadogAgent      InputKubeEventsInputType = "datadog_agent"
	InputKubeEventsInputTypeWef               InputKubeEventsInputType = "wef"
	InputKubeEventsInputTypeDatagen           InputKubeEventsInputType = "datagen"
	InputKubeEventsInputTypeCribl             InputKubeEventsInputType = "cribl"
	InputKubeEventsInputTypeCriblmetrics      InputKubeEventsInputType = "criblmetrics"
	InputKubeEventsInputTypeCriblHTTP         InputKubeEventsInputType = "cribl_http"
	InputKubeEventsInputTypeCriblTCP          InputKubeEventsInputType = "cribl_tcp"
	InputKubeEventsInputTypeWinEventLogs      InputKubeEventsInputType = "win_event_logs"
	InputKubeEventsInputTypeSystemMetrics     InputKubeEventsInputType = "system_metrics"
	InputKubeEventsInputTypeWindowsMetrics    InputKubeEventsInputType = "windows_metrics"
	InputKubeEventsInputTypeSystemState       InputKubeEventsInputType = "system_state"
	InputKubeEventsInputTypeKubeMetrics       InputKubeEventsInputType = "kube_metrics"
	InputKubeEventsInputTypeKubeLogs          InputKubeEventsInputType = "kube_logs"
	InputKubeEventsInputTypeKubeEvents        InputKubeEventsInputType = "kube_events"
	InputKubeEventsInputTypeExec              InputKubeEventsInputType = "exec"
	InputKubeEventsInputTypeSplunkSearch      InputKubeEventsInputType = "splunk_search"
	InputKubeEventsInputTypeFile              InputKubeEventsInputType = "file"
	InputKubeEventsInputTypeJournalFiles      InputKubeEventsInputType = "journal_files"
)

func (e InputKubeEventsInputType) ToPointer() *InputKubeEventsInputType {
	return &e
}

func (e *InputKubeEventsInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		*e = InputKubeEventsInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeEventsInputType: %v", v)
	}
}

type InputKubeEvents struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputKubeEventsConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this input
	ID string `json:"id"`
	// Fields to add to events from this input.
	Metadata []InputKubeEventsMetadata `json:"metadata,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string            `json:"pipeline,omitempty"`
	Pq       *InputKubeEventsPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Filtering on event fields
	Rules []InputKubeEventsRules `json:"rules,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                 `json:"streamtags,omitempty"`
	Type       InputKubeEventsInputType `json:"type"`
}
