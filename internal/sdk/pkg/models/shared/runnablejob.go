// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type RunnableJobType string

const (
	RunnableJobTypeRunnableJobCollection      RunnableJobType = "RunnableJobCollection"
	RunnableJobTypeRunnableJobExecutor        RunnableJobType = "RunnableJobExecutor"
	RunnableJobTypeRunnableJobScheduledSearch RunnableJobType = "RunnableJobScheduledSearch"
)

type RunnableJob struct {
	RunnableJobCollection      *RunnableJobCollection
	RunnableJobExecutor        *RunnableJobExecutor
	RunnableJobScheduledSearch *RunnableJobScheduledSearch

	Type RunnableJobType
}

func CreateRunnableJobRunnableJobCollection(runnableJobCollection RunnableJobCollection) RunnableJob {
	typ := RunnableJobTypeRunnableJobCollection

	return RunnableJob{
		RunnableJobCollection: &runnableJobCollection,
		Type:                  typ,
	}
}

func CreateRunnableJobRunnableJobExecutor(runnableJobExecutor RunnableJobExecutor) RunnableJob {
	typ := RunnableJobTypeRunnableJobExecutor

	return RunnableJob{
		RunnableJobExecutor: &runnableJobExecutor,
		Type:                typ,
	}
}

func CreateRunnableJobRunnableJobScheduledSearch(runnableJobScheduledSearch RunnableJobScheduledSearch) RunnableJob {
	typ := RunnableJobTypeRunnableJobScheduledSearch

	return RunnableJob{
		RunnableJobScheduledSearch: &runnableJobScheduledSearch,
		Type:                       typ,
	}
}

func (u *RunnableJob) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	runnableJobCollection := new(RunnableJobCollection)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&runnableJobCollection); err == nil {
		u.RunnableJobCollection = runnableJobCollection
		u.Type = RunnableJobTypeRunnableJobCollection
		return nil
	}

	runnableJobExecutor := new(RunnableJobExecutor)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&runnableJobExecutor); err == nil {
		u.RunnableJobExecutor = runnableJobExecutor
		u.Type = RunnableJobTypeRunnableJobExecutor
		return nil
	}

	runnableJobScheduledSearch := new(RunnableJobScheduledSearch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&runnableJobScheduledSearch); err == nil {
		u.RunnableJobScheduledSearch = runnableJobScheduledSearch
		u.Type = RunnableJobTypeRunnableJobScheduledSearch
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RunnableJob) MarshalJSON() ([]byte, error) {
	if u.RunnableJobCollection != nil {
		return json.Marshal(u.RunnableJobCollection)
	}

	if u.RunnableJobExecutor != nil {
		return json.Marshal(u.RunnableJobExecutor)
	}

	if u.RunnableJobScheduledSearch != nil {
		return json.Marshal(u.RunnableJobScheduledSearch)
	}

	return nil, nil
}
