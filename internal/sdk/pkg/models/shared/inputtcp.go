// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputTCPAuthenticationMethod - Enter a token directly, or provide a secret referencing a token
type InputTCPAuthenticationMethod string

const (
	InputTCPAuthenticationMethodSecret InputTCPAuthenticationMethod = "secret"
	InputTCPAuthenticationMethodManual InputTCPAuthenticationMethod = "manual"
)

func (e InputTCPAuthenticationMethod) ToPointer() *InputTCPAuthenticationMethod {
	return &e
}

func (e *InputTCPAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputTCPAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputTCPAuthenticationMethod: %v", v)
	}
}

type InputTCPConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputTCPMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

type InputTCPOptionalFieldsInGeneralSection string

const (
	InputTCPOptionalFieldsInGeneralSectionEnableHeader InputTCPOptionalFieldsInGeneralSection = "enableHeader"
)

func (e InputTCPOptionalFieldsInGeneralSection) ToPointer() *InputTCPOptionalFieldsInGeneralSection {
	return &e
}

func (e *InputTCPOptionalFieldsInGeneralSection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enableHeader":
		*e = InputTCPOptionalFieldsInGeneralSection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputTCPOptionalFieldsInGeneralSection: %v", v)
	}
}

// InputTCPPqCompression - Codec to use to compress the persisted data.
type InputTCPPqCompression string

const (
	InputTCPPqCompressionNone InputTCPPqCompression = "none"
	InputTCPPqCompressionGzip InputTCPPqCompression = "gzip"
)

func (e InputTCPPqCompression) ToPointer() *InputTCPPqCompression {
	return &e
}

func (e *InputTCPPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputTCPPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputTCPPqCompression: %v", v)
	}
}

// InputTCPPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputTCPPqMode string

const (
	InputTCPPqModeSmart  InputTCPPqMode = "smart"
	InputTCPPqModeAlways InputTCPPqMode = "always"
)

func (e InputTCPPqMode) ToPointer() *InputTCPPqMode {
	return &e
}

func (e *InputTCPPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputTCPPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputTCPPqMode: %v", v)
	}
}

type InputTCPPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputTCPPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputTCPPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputTCPPreprocess struct {
	// Arguments
	Args []string `json:"args,omitempty"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Enable Custom Command
	Disabled bool `json:"disabled"`
}

// InputTCPTLSSettingsServerSideMaximumTLSVersion - Maximum TLS version to accept from connections.
type InputTCPTLSSettingsServerSideMaximumTLSVersion string

const (
	InputTCPTLSSettingsServerSideMaximumTLSVersionTlSv1  InputTCPTLSSettingsServerSideMaximumTLSVersion = "TLSv1"
	InputTCPTLSSettingsServerSideMaximumTLSVersionTlSv11 InputTCPTLSSettingsServerSideMaximumTLSVersion = "TLSv1.1"
	InputTCPTLSSettingsServerSideMaximumTLSVersionTlSv12 InputTCPTLSSettingsServerSideMaximumTLSVersion = "TLSv1.2"
	InputTCPTLSSettingsServerSideMaximumTLSVersionTlSv13 InputTCPTLSSettingsServerSideMaximumTLSVersion = "TLSv1.3"
)

func (e InputTCPTLSSettingsServerSideMaximumTLSVersion) ToPointer() *InputTCPTLSSettingsServerSideMaximumTLSVersion {
	return &e
}

func (e *InputTCPTLSSettingsServerSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputTCPTLSSettingsServerSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputTCPTLSSettingsServerSideMaximumTLSVersion: %v", v)
	}
}

// InputTCPTLSSettingsServerSideMinimumTLSVersion - Minimum TLS version to accept from connections.
type InputTCPTLSSettingsServerSideMinimumTLSVersion string

const (
	InputTCPTLSSettingsServerSideMinimumTLSVersionTlSv1  InputTCPTLSSettingsServerSideMinimumTLSVersion = "TLSv1"
	InputTCPTLSSettingsServerSideMinimumTLSVersionTlSv11 InputTCPTLSSettingsServerSideMinimumTLSVersion = "TLSv1.1"
	InputTCPTLSSettingsServerSideMinimumTLSVersionTlSv12 InputTCPTLSSettingsServerSideMinimumTLSVersion = "TLSv1.2"
	InputTCPTLSSettingsServerSideMinimumTLSVersionTlSv13 InputTCPTLSSettingsServerSideMinimumTLSVersion = "TLSv1.3"
)

func (e InputTCPTLSSettingsServerSideMinimumTLSVersion) ToPointer() *InputTCPTLSSettingsServerSideMinimumTLSVersion {
	return &e
}

func (e *InputTCPTLSSettingsServerSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputTCPTLSSettingsServerSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputTCPTLSSettingsServerSideMinimumTLSVersion: %v", v)
	}
}

type InputTCPTLSSettingsServerSide struct {
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string     `json:"certificateName,omitempty"`
	CommonNameRegex interface{} `json:"commonNameRegex,omitempty"`
	Disabled        *bool       `json:"disabled,omitempty"`
	// Maximum TLS version to accept from connections.
	MaxVersion *InputTCPTLSSettingsServerSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to accept from connections.
	MinVersion *InputTCPTLSSettingsServerSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath        *string     `json:"privKeyPath,omitempty"`
	RejectUnauthorized interface{} `json:"rejectUnauthorized,omitempty"`
	// Whether to require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert *bool `json:"requestCert,omitempty"`
}

type InputTCPType string

const (
	InputTCPTypeTCP InputTCPType = "tcp"
)

func (e InputTCPType) ToPointer() *InputTCPType {
	return &e
}

func (e *InputTCPType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		*e = InputTCPType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputTCPType: %v", v)
	}
}

type InputTCP struct {
	// Enter a token directly, or provide a secret referencing a token
	AuthType *InputTCPAuthenticationMethod `json:"authType,omitempty"`
	// A list of event breaking rulesets that will be applied, in order, to the input data stream.
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputTCPConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// If enabled, client will pass the header record with every new connection. The header can contain an authToken, and an object with a list of fields and values to add to every event. These fields can be used to simplify Event Breaker selection, routing, etc. Header has this format, and must be followed by a newline: { "authToken" : "myToken", "fields": { "field1": "value1", "field2": "value2" } }
	EnableHeader *bool `json:"enableHeader,omitempty"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2.
	EnableProxyHeader *bool `json:"enableProxyHeader,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host string `json:"host"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// Regex matching IP addresses that are allowed to establish a connection.
	IPWhitelistRegex *string `json:"ipWhitelistRegex,omitempty"`
	// Maximum number of active connections allowed per Worker Process, use 0 for unlimited
	MaxActiveCxn *int64 `json:"maxActiveCxn,omitempty"`
	// Fields to add to events from this input.
	Metadata                       []InputTCPMetadata                      `json:"metadata,omitempty"`
	OptionalFieldsInGeneralSection *InputTCPOptionalFieldsInGeneralSection `json:"optionalFieldsInGeneralSection,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// Port to listen on.
	Port int64       `json:"port"`
	Pq   *InputTCPPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled  *bool               `json:"pqEnabled,omitempty"`
	Preprocess *InputTCPPreprocess `json:"preprocess,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// The amount of time (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel, before flushing the data stream out, as-is, to the Pipelines.
	StaleChannelFlushMs *int64 `json:"staleChannelFlushMs,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                       `json:"streamtags,omitempty"`
	TLS        *InputTCPTLSSettingsServerSide `json:"tls,omitempty"`
	Type       *InputTCPType                  `json:"type,omitempty"`
}
