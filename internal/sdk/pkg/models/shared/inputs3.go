// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputS3AuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputS3AuthenticationMethod string

const (
	InputS3AuthenticationMethodSecret InputS3AuthenticationMethod = "secret"
	InputS3AuthenticationMethodManual InputS3AuthenticationMethod = "manual"
)

func (e InputS3AuthenticationMethod) ToPointer() *InputS3AuthenticationMethod {
	return &e
}

func (e *InputS3AuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputS3AuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3AuthenticationMethod: %v", v)
	}
}

type InputS3Connections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputS3Metadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputS3PqCompression - Codec to use to compress the persisted data.
type InputS3PqCompression string

const (
	InputS3PqCompressionNone InputS3PqCompression = "none"
	InputS3PqCompressionGzip InputS3PqCompression = "gzip"
)

func (e InputS3PqCompression) ToPointer() *InputS3PqCompression {
	return &e
}

func (e *InputS3PqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputS3PqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3PqCompression: %v", v)
	}
}

// InputS3PqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputS3PqMode string

const (
	InputS3PqModeSmart  InputS3PqMode = "smart"
	InputS3PqModeAlways InputS3PqMode = "always"
)

func (e InputS3PqMode) ToPointer() *InputS3PqMode {
	return &e
}

func (e *InputS3PqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputS3PqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3PqMode: %v", v)
	}
}

type InputS3Pq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputS3PqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputS3PqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputS3Preprocess struct {
	// Arguments
	Args []string `json:"args,omitempty"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Enable Custom Command
	Disabled bool `json:"disabled"`
}

// InputS3Region - AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
type InputS3Region string

const (
	InputS3RegionUsEast1      InputS3Region = "us-east-1"
	InputS3RegionUsEast2      InputS3Region = "us-east-2"
	InputS3RegionUsWest1      InputS3Region = "us-west-1"
	InputS3RegionUsWest2      InputS3Region = "us-west-2"
	InputS3RegionAfSouth1     InputS3Region = "af-south-1"
	InputS3RegionCaCentral1   InputS3Region = "ca-central-1"
	InputS3RegionEuWest1      InputS3Region = "eu-west-1"
	InputS3RegionEuCentral1   InputS3Region = "eu-central-1"
	InputS3RegionEuWest2      InputS3Region = "eu-west-2"
	InputS3RegionEuSouth1     InputS3Region = "eu-south-1"
	InputS3RegionEuWest3      InputS3Region = "eu-west-3"
	InputS3RegionEuNorth1     InputS3Region = "eu-north-1"
	InputS3RegionApEast1      InputS3Region = "ap-east-1"
	InputS3RegionApNortheast1 InputS3Region = "ap-northeast-1"
	InputS3RegionApNortheast2 InputS3Region = "ap-northeast-2"
	InputS3RegionApSoutheast1 InputS3Region = "ap-southeast-1"
	InputS3RegionApSoutheast2 InputS3Region = "ap-southeast-2"
	InputS3RegionApSouth1     InputS3Region = "ap-south-1"
	InputS3RegionMeSouth1     InputS3Region = "me-south-1"
	InputS3RegionSaEast1      InputS3Region = "sa-east-1"
	InputS3RegionUsGovEast1   InputS3Region = "us-gov-east-1"
	InputS3RegionUsGovWest1   InputS3Region = "us-gov-west-1"
)

func (e InputS3Region) ToPointer() *InputS3Region {
	return &e
}

func (e *InputS3Region) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = InputS3Region(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3Region: %v", v)
	}
}

// InputS3SignatureVersion - Signature version to use for signing S3 requests.
type InputS3SignatureVersion string

const (
	InputS3SignatureVersionV2 InputS3SignatureVersion = "v2"
	InputS3SignatureVersionV4 InputS3SignatureVersion = "v4"
)

func (e InputS3SignatureVersion) ToPointer() *InputS3SignatureVersion {
	return &e
}

func (e *InputS3SignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputS3SignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3SignatureVersion: %v", v)
	}
}

type InputS3Type string

const (
	InputS3TypeS3 InputS3Type = "s3"
)

func (e InputS3Type) ToPointer() *InputS3Type {
	return &e
}

func (e *InputS3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "s3":
		*e = InputS3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3Type: %v", v)
	}
}

type InputS3 struct {
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
	AwsAccountID *string `json:"awsAccountId,omitempty"`
	// Access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputS3AuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// Select (or create) a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// A list of event breaking rulesets that will be applied, in order, to the input data stream.
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputS3Connections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Use Assume Role credentials to access S3
	EnableAssumeRole *bool `json:"enableAssumeRole,omitempty"`
	// Use Assume Role credentials when accessing SQS.
	EnableSQSAssumeRole *bool `json:"enableSQSAssumeRole,omitempty"`
	// S3 service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Regex matching file names to download and process. Defaults to: .*
	FileFilter *string `json:"fileFilter,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
	MaxMessages *int64 `json:"maxMessages,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputS3Metadata `json:"metadata,omitempty"`
	// The Number of receiver processes to run, the higher the number the better throughput at the expense of CPU overhead
	NumReceivers *int64 `json:"numReceivers,omitempty"`
	// The maximum time to wait for a Parquet file's chunk to be downloaded. Processing will end if a required chunk could not be downloaded within the time imposed by this setting.
	ParquetChunkDownloadTimeout *int64 `json:"parquetChunkDownloadTimeout,omitempty"`
	// Maximum file size for each Parquet chunk.
	ParquetChunkSizeMB *int64 `json:"parquetChunkSizeMB,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// The amount of time to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
	PollTimeout *int64     `json:"pollTimeout,omitempty"`
	Pq          *InputS3Pq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled  *bool              `json:"pqEnabled,omitempty"`
	Preprocess *InputS3Preprocess `json:"preprocess,omitempty"`
	// The name, URL, or ARN of the SQS queue to read notifications from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. E.g., 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. E.g., referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	QueueName string `json:"queueName"`
	// AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
	Region *InputS3Region `json:"region,omitempty"`
	// Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Whether to reuse connections between requests, which can improve performance.
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Signature version to use for signing S3 requests.
	SignatureVersion *InputS3SignatureVersion `json:"signatureVersion,omitempty"`
	// Toggle to Yes to skip files that trigger a processing error. Defaults to No, which enables retries after processing errors.
	SkipOnError *bool `json:"skipOnError,omitempty"`
	// Socket inactivity timeout (in seconds). Increase this value if timeouts occur due to backpressure.
	SocketTimeout *int64 `json:"socketTimeout,omitempty"`
	// The amount of time (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel, before flushing the data stream out, as-is, to the Pipelines.
	StaleChannelFlushMs *int64 `json:"staleChannelFlushMs,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string    `json:"streamtags,omitempty"`
	Type       InputS3Type `json:"type"`
	// After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
	VisibilityTimeout *int64 `json:"visibilityTimeout,omitempty"`
}
