// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputCriblTCPCompression - Codec to use to compress the data before sending
type OutputCriblTCPCompression string

const (
	OutputCriblTCPCompressionNone OutputCriblTCPCompression = "none"
	OutputCriblTCPCompressionGzip OutputCriblTCPCompression = "gzip"
)

func (e OutputCriblTCPCompression) ToPointer() *OutputCriblTCPCompression {
	return &e
}

func (e *OutputCriblTCPCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputCriblTCPCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPCompression: %v", v)
	}
}

// OutputCriblTCPHostsTLS - Whether to inherit TLS configs from group setting or disable TLS.
type OutputCriblTCPHostsTLS string

const (
	OutputCriblTCPHostsTLSInherit OutputCriblTCPHostsTLS = "inherit"
	OutputCriblTCPHostsTLSOff     OutputCriblTCPHostsTLS = "off"
)

func (e OutputCriblTCPHostsTLS) ToPointer() *OutputCriblTCPHostsTLS {
	return &e
}

func (e *OutputCriblTCPHostsTLS) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inherit":
		fallthrough
	case "off":
		*e = OutputCriblTCPHostsTLS(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPHostsTLS: %v", v)
	}
}

type OutputCriblTCPHosts struct {
	// The hostname of the receiver.
	Host string `json:"host"`
	// The port to connect to on the provided host.
	Port int64 `json:"port"`
	// Servername to use if establishing a TLS connection. If not specified, defaults to connection host (iff not an IP); otherwise, to the global TLS settings.
	Servername *string `json:"servername,omitempty"`
	// Whether to inherit TLS configs from group setting or disable TLS.
	TLS *OutputCriblTCPHostsTLS `json:"tls,omitempty"`
	// The weight to use for load-balancing purposes.
	Weight *int64 `json:"weight,omitempty"`
}

// OutputCriblTCPBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputCriblTCPBackpressureBehavior string

const (
	OutputCriblTCPBackpressureBehaviorQueue OutputCriblTCPBackpressureBehavior = "queue"
	OutputCriblTCPBackpressureBehaviorDrop  OutputCriblTCPBackpressureBehavior = "drop"
	OutputCriblTCPBackpressureBehaviorBlock OutputCriblTCPBackpressureBehavior = "block"
)

func (e OutputCriblTCPBackpressureBehavior) ToPointer() *OutputCriblTCPBackpressureBehavior {
	return &e
}

func (e *OutputCriblTCPBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue":
		fallthrough
	case "drop":
		fallthrough
	case "block":
		*e = OutputCriblTCPBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPBackpressureBehavior: %v", v)
	}
}

type OutputCriblTCPOptionalFieldsInGeneralSection string

const (
	OutputCriblTCPOptionalFieldsInGeneralSectionLoadBalanced OutputCriblTCPOptionalFieldsInGeneralSection = "loadBalanced"
	OutputCriblTCPOptionalFieldsInGeneralSectionHosts        OutputCriblTCPOptionalFieldsInGeneralSection = "hosts"
)

func (e OutputCriblTCPOptionalFieldsInGeneralSection) ToPointer() *OutputCriblTCPOptionalFieldsInGeneralSection {
	return &e
}

func (e *OutputCriblTCPOptionalFieldsInGeneralSection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "loadBalanced":
		fallthrough
	case "hosts":
		*e = OutputCriblTCPOptionalFieldsInGeneralSection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPOptionalFieldsInGeneralSection: %v", v)
	}
}

type OutputCriblTCPPqControls struct {
}

// OutputCriblTCPQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputCriblTCPQueueFullBehavior string

const (
	OutputCriblTCPQueueFullBehaviorBlock OutputCriblTCPQueueFullBehavior = "block"
	OutputCriblTCPQueueFullBehaviorDrop  OutputCriblTCPQueueFullBehavior = "drop"
)

func (e OutputCriblTCPQueueFullBehavior) ToPointer() *OutputCriblTCPQueueFullBehavior {
	return &e
}

func (e *OutputCriblTCPQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputCriblTCPQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPQueueFullBehavior: %v", v)
	}
}

// OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion - Maximum TLS version to use when connecting
type OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion string

const (
	OutputCriblTCPTLSSettingsClientSideMaximumTLSVersionTlSv1  OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion = "TLSv1"
	OutputCriblTCPTLSSettingsClientSideMaximumTLSVersionTlSv11 OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion = "TLSv1.1"
	OutputCriblTCPTLSSettingsClientSideMaximumTLSVersionTlSv12 OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion = "TLSv1.2"
	OutputCriblTCPTLSSettingsClientSideMaximumTLSVersionTlSv13 OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion = "TLSv1.3"
)

func (e OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion) ToPointer() *OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion {
	return &e
}

func (e *OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion: %v", v)
	}
}

// OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion - Minimum TLS version to use when connecting
type OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion string

const (
	OutputCriblTCPTLSSettingsClientSideMinimumTLSVersionTlSv1  OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion = "TLSv1"
	OutputCriblTCPTLSSettingsClientSideMinimumTLSVersionTlSv11 OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion = "TLSv1.1"
	OutputCriblTCPTLSSettingsClientSideMinimumTLSVersionTlSv12 OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion = "TLSv1.2"
	OutputCriblTCPTLSSettingsClientSideMinimumTLSVersionTlSv13 OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion = "TLSv1.3"
)

func (e OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion) ToPointer() *OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion {
	return &e
}

func (e *OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion: %v", v)
	}
}

type OutputCriblTCPTLSSettingsClientSide struct {
	// Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	Disabled        *bool   `json:"disabled,omitempty"`
	// Maximum TLS version to use when connecting
	MaxVersion *OutputCriblTCPTLSSettingsClientSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to use when connecting
	MinVersion *OutputCriblTCPTLSSettingsClientSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another trusted CA (e.g., the system's CA). Defaults to No.
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
	Servername *string `json:"servername,omitempty"`
}

type OutputCriblTCPType string

const (
	OutputCriblTCPTypeCriblTCP OutputCriblTCPType = "cribl_tcp"
)

func (e OutputCriblTCPType) ToPointer() *OutputCriblTCPType {
	return &e
}

func (e *OutputCriblTCPType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl_tcp":
		*e = OutputCriblTCPType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPType: %v", v)
	}
}

type OutputCriblTCP struct {
	// Codec to use to compress the data before sending
	Compression *OutputCriblTCPCompression `json:"compression,omitempty"`
	// Amount of time (milliseconds) to wait for the connection to establish before retrying
	ConnectionTimeout *int64 `json:"connectionTimeout,omitempty"`
	// Re-resolve any hostnames every this many seconds and pick up destinations from A records.
	DNSResolvePeriodSec *int64 `json:"dnsResolvePeriodSec,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Fields to exclude from the event. By default, all internal fields except `__output` are sent. E.g.: `cribl_pipe`, `c*`. Wildcards supported.
	ExcludeFields []string `json:"excludeFields,omitempty"`
	// Exclude all IPs of the current host from the list of any resolved hostnames.
	ExcludeSelf *bool `json:"excludeSelf,omitempty"`
	// The hostname of the receiver
	Host *string `json:"host,omitempty"`
	// Set of hosts to load-balance data to.
	Hosts []OutputCriblTCPHosts `json:"hosts,omitempty"`
	// Unique ID for this output
	ID string `json:"id"`
	// How far back in time to keep traffic stats for load balancing purposes.
	LoadBalanceStatsPeriodSec *int64 `json:"loadBalanceStatsPeriodSec,omitempty"`
	// Use load-balanced destinations
	LoadBalanced *bool `json:"loadBalanced,omitempty"`
	// Maximum number of concurrent connections (per worker process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited.
	MaxConcurrentSenders *int64 `json:"maxConcurrentSenders,omitempty"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure                 *OutputCriblTCPBackpressureBehavior           `json:"onBackpressure,omitempty"`
	OptionalFieldsInGeneralSection *OutputCriblTCPOptionalFieldsInGeneralSection `json:"optionalFieldsInGeneralSection,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// The port to connect to on the provided host
	Port *int64 `json:"port,omitempty"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputCriblTCPCompression `json:"pqCompress,omitempty"`
	PqControls *OutputCriblTCPPqControls  `json:"pqControls,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `json:"pqMaxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `json:"pqMaxSize,omitempty"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputCriblTCPQueueFullBehavior `json:"pqOnBackpressure,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `json:"pqPath,omitempty"`
	// Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out).
	PqStrictOrdering *bool `json:"pqStrictOrdering,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string `json:"systemFields,omitempty"`
	// Rate (in bytes per second) to throttle while writing to an output. Also takes values with multiple-byte units, such as KB, MB, GB, etc. (E.g., 42 MB.) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string                              `json:"throttleRatePerSec,omitempty"`
	TLS                *OutputCriblTCPTLSSettingsClientSide `json:"tls,omitempty"`
	// The number of minutes before the internally generated authentication token expires, valid values between 1 and 60
	TokenTTLMinutes *int64             `json:"tokenTTLMinutes,omitempty"`
	Type            OutputCriblTCPType `json:"type"`
	// Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
	WriteTimeout *int64 `json:"writeTimeout,omitempty"`
}
