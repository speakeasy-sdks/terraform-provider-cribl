// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputSnsAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type OutputSnsAuthenticationMethod string

const (
	OutputSnsAuthenticationMethodSecret OutputSnsAuthenticationMethod = "secret"
	OutputSnsAuthenticationMethodManual OutputSnsAuthenticationMethod = "manual"
)

func (e OutputSnsAuthenticationMethod) ToPointer() *OutputSnsAuthenticationMethod {
	return &e
}

func (e *OutputSnsAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = OutputSnsAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSnsAuthenticationMethod: %v", v)
	}
}

// OutputSnsBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputSnsBackpressureBehavior string

const (
	OutputSnsBackpressureBehaviorQueue OutputSnsBackpressureBehavior = "queue"
	OutputSnsBackpressureBehaviorDrop  OutputSnsBackpressureBehavior = "drop"
	OutputSnsBackpressureBehaviorBlock OutputSnsBackpressureBehavior = "block"
)

func (e OutputSnsBackpressureBehavior) ToPointer() *OutputSnsBackpressureBehavior {
	return &e
}

func (e *OutputSnsBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue":
		fallthrough
	case "drop":
		fallthrough
	case "block":
		*e = OutputSnsBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSnsBackpressureBehavior: %v", v)
	}
}

// OutputSnsCompression - Codec to use to compress the persisted data.
type OutputSnsCompression string

const (
	OutputSnsCompressionNone OutputSnsCompression = "none"
	OutputSnsCompressionGzip OutputSnsCompression = "gzip"
)

func (e OutputSnsCompression) ToPointer() *OutputSnsCompression {
	return &e
}

func (e *OutputSnsCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputSnsCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSnsCompression: %v", v)
	}
}

type OutputSnsPqControls struct {
}

// OutputSnsQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputSnsQueueFullBehavior string

const (
	OutputSnsQueueFullBehaviorBlock OutputSnsQueueFullBehavior = "block"
	OutputSnsQueueFullBehaviorDrop  OutputSnsQueueFullBehavior = "drop"
)

func (e OutputSnsQueueFullBehavior) ToPointer() *OutputSnsQueueFullBehavior {
	return &e
}

func (e *OutputSnsQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputSnsQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSnsQueueFullBehavior: %v", v)
	}
}

// OutputSnsRegion - Region where the SNS is located
type OutputSnsRegion string

const (
	OutputSnsRegionUsEast1      OutputSnsRegion = "us-east-1"
	OutputSnsRegionUsEast2      OutputSnsRegion = "us-east-2"
	OutputSnsRegionUsWest1      OutputSnsRegion = "us-west-1"
	OutputSnsRegionUsWest2      OutputSnsRegion = "us-west-2"
	OutputSnsRegionAfSouth1     OutputSnsRegion = "af-south-1"
	OutputSnsRegionCaCentral1   OutputSnsRegion = "ca-central-1"
	OutputSnsRegionEuWest1      OutputSnsRegion = "eu-west-1"
	OutputSnsRegionEuCentral1   OutputSnsRegion = "eu-central-1"
	OutputSnsRegionEuWest2      OutputSnsRegion = "eu-west-2"
	OutputSnsRegionEuSouth1     OutputSnsRegion = "eu-south-1"
	OutputSnsRegionEuWest3      OutputSnsRegion = "eu-west-3"
	OutputSnsRegionEuNorth1     OutputSnsRegion = "eu-north-1"
	OutputSnsRegionApEast1      OutputSnsRegion = "ap-east-1"
	OutputSnsRegionApNortheast1 OutputSnsRegion = "ap-northeast-1"
	OutputSnsRegionApNortheast2 OutputSnsRegion = "ap-northeast-2"
	OutputSnsRegionApSoutheast1 OutputSnsRegion = "ap-southeast-1"
	OutputSnsRegionApSoutheast2 OutputSnsRegion = "ap-southeast-2"
	OutputSnsRegionApSouth1     OutputSnsRegion = "ap-south-1"
	OutputSnsRegionMeSouth1     OutputSnsRegion = "me-south-1"
	OutputSnsRegionSaEast1      OutputSnsRegion = "sa-east-1"
	OutputSnsRegionUsGovEast1   OutputSnsRegion = "us-gov-east-1"
	OutputSnsRegionUsGovWest1   OutputSnsRegion = "us-gov-west-1"
)

func (e OutputSnsRegion) ToPointer() *OutputSnsRegion {
	return &e
}

func (e *OutputSnsRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = OutputSnsRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSnsRegion: %v", v)
	}
}

// OutputSnsSignatureVersion - Signature version to use for signing SNS requests.
type OutputSnsSignatureVersion string

const (
	OutputSnsSignatureVersionV2 OutputSnsSignatureVersion = "v2"
	OutputSnsSignatureVersionV4 OutputSnsSignatureVersion = "v4"
)

func (e OutputSnsSignatureVersion) ToPointer() *OutputSnsSignatureVersion {
	return &e
}

func (e *OutputSnsSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = OutputSnsSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSnsSignatureVersion: %v", v)
	}
}

type OutputSnsType string

const (
	OutputSnsTypeSns OutputSnsType = "sns"
)

func (e OutputSnsType) ToPointer() *OutputSnsType {
	return &e
}

func (e *OutputSnsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sns":
		*e = OutputSnsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSnsType: %v", v)
	}
}

type OutputSns struct {
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// Access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *OutputSnsAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// Select (or create) a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// Use Assume Role credentials to access SNS
	EnableAssumeRole *bool `json:"enableAssumeRole,omitempty"`
	// SNS service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to SNS-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this output
	ID *string `json:"id,omitempty"`
	// Maximum number of retries before the output returns an error. Note that not all errors are retryable. The retries use an exponential backoff policy.
	MaxRetries *int64 `json:"maxRetries,omitempty"`
	// The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. E.g., referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	MessageGroupID string `json:"messageGroupId"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure *OutputSnsBackpressureBehavior `json:"onBackpressure,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputSnsCompression `json:"pqCompress,omitempty"`
	PqControls *OutputSnsPqControls  `json:"pqControls,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `json:"pqMaxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `json:"pqMaxSize,omitempty"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputSnsQueueFullBehavior `json:"pqOnBackpressure,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `json:"pqPath,omitempty"`
	// Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out).
	PqStrictOrdering *bool `json:"pqStrictOrdering,omitempty"`
	// Region where the SNS is located
	Region *OutputSnsRegion `json:"region,omitempty"`
	// Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Whether to reuse connections between requests, which can improve performance.
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// Signature version to use for signing SNS requests.
	SignatureVersion *OutputSnsSignatureVersion `json:"signatureVersion,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string `json:"systemFields,omitempty"`
	// The ARN of the SNS topic to send events to. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. E.g., 'https://host:port/myQueueName'. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. E.g., referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	TopicArn string         `json:"topicArn"`
	Type     *OutputSnsType `json:"type,omitempty"`
}
