// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputDatadogAuthenticationMethod - Enter API key directly, or select a stored secret
type OutputDatadogAuthenticationMethod string

const (
	OutputDatadogAuthenticationMethodSecret OutputDatadogAuthenticationMethod = "secret"
	OutputDatadogAuthenticationMethodManual OutputDatadogAuthenticationMethod = "manual"
)

func (e OutputDatadogAuthenticationMethod) ToPointer() *OutputDatadogAuthenticationMethod {
	return &e
}

func (e *OutputDatadogAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = OutputDatadogAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogAuthenticationMethod: %v", v)
	}
}

// OutputDatadogSendLogsAs - The content type to use when sending logs.
type OutputDatadogSendLogsAs string

const (
	OutputDatadogSendLogsAsText OutputDatadogSendLogsAs = "text"
	OutputDatadogSendLogsAsJSON OutputDatadogSendLogsAs = "json"
)

func (e OutputDatadogSendLogsAs) ToPointer() *OutputDatadogSendLogsAs {
	return &e
}

func (e *OutputDatadogSendLogsAs) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "text":
		fallthrough
	case "json":
		*e = OutputDatadogSendLogsAs(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogSendLogsAs: %v", v)
	}
}

type OutputDatadogExtraHTTPHeaders struct {
	// Field name
	Name *string `json:"name,omitempty"`
	// Field value
	Value string `json:"value"`
}

// OutputDatadogFailedRequestLoggingMode - Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`.
type OutputDatadogFailedRequestLoggingMode string

const (
	OutputDatadogFailedRequestLoggingModePayload           OutputDatadogFailedRequestLoggingMode = "payload"
	OutputDatadogFailedRequestLoggingModePayloadAndHeaders OutputDatadogFailedRequestLoggingMode = "payloadAndHeaders"
	OutputDatadogFailedRequestLoggingModeNone              OutputDatadogFailedRequestLoggingMode = "none"
)

func (e OutputDatadogFailedRequestLoggingMode) ToPointer() *OutputDatadogFailedRequestLoggingMode {
	return &e
}

func (e *OutputDatadogFailedRequestLoggingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payload":
		fallthrough
	case "payloadAndHeaders":
		fallthrough
	case "none":
		*e = OutputDatadogFailedRequestLoggingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogFailedRequestLoggingMode: %v", v)
	}
}

// OutputDatadogBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputDatadogBackpressureBehavior string

const (
	OutputDatadogBackpressureBehaviorQueue OutputDatadogBackpressureBehavior = "queue"
	OutputDatadogBackpressureBehaviorDrop  OutputDatadogBackpressureBehavior = "drop"
	OutputDatadogBackpressureBehaviorBlock OutputDatadogBackpressureBehavior = "block"
)

func (e OutputDatadogBackpressureBehavior) ToPointer() *OutputDatadogBackpressureBehavior {
	return &e
}

func (e *OutputDatadogBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue":
		fallthrough
	case "drop":
		fallthrough
	case "block":
		*e = OutputDatadogBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogBackpressureBehavior: %v", v)
	}
}

// OutputDatadogCompression - Codec to use to compress the persisted data.
type OutputDatadogCompression string

const (
	OutputDatadogCompressionNone OutputDatadogCompression = "none"
	OutputDatadogCompressionGzip OutputDatadogCompression = "gzip"
)

func (e OutputDatadogCompression) ToPointer() *OutputDatadogCompression {
	return &e
}

func (e *OutputDatadogCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputDatadogCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogCompression: %v", v)
	}
}

type OutputDatadogPqControls struct {
}

// OutputDatadogQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputDatadogQueueFullBehavior string

const (
	OutputDatadogQueueFullBehaviorBlock OutputDatadogQueueFullBehavior = "block"
	OutputDatadogQueueFullBehaviorDrop  OutputDatadogQueueFullBehavior = "drop"
)

func (e OutputDatadogQueueFullBehavior) ToPointer() *OutputDatadogQueueFullBehavior {
	return &e
}

func (e *OutputDatadogQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputDatadogQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogQueueFullBehavior: %v", v)
	}
}

// OutputDatadogSeverity - Default value for message severity. When you send logs as JSON objects, the event's '__severity' field (if set) will override this value.
type OutputDatadogSeverity string

const (
	OutputDatadogSeverityEmergency OutputDatadogSeverity = "emergency"
	OutputDatadogSeverityAlert     OutputDatadogSeverity = "alert"
	OutputDatadogSeverityCritical  OutputDatadogSeverity = "critical"
	OutputDatadogSeverityError     OutputDatadogSeverity = "error"
	OutputDatadogSeverityWarning   OutputDatadogSeverity = "warning"
	OutputDatadogSeverityNotice    OutputDatadogSeverity = "notice"
	OutputDatadogSeverityInfo      OutputDatadogSeverity = "info"
	OutputDatadogSeverityDebug     OutputDatadogSeverity = "debug"
)

func (e OutputDatadogSeverity) ToPointer() *OutputDatadogSeverity {
	return &e
}

func (e *OutputDatadogSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "emergency":
		fallthrough
	case "alert":
		fallthrough
	case "critical":
		fallthrough
	case "error":
		fallthrough
	case "warning":
		fallthrough
	case "notice":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		*e = OutputDatadogSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogSeverity: %v", v)
	}
}

// OutputDatadogDatadogSite - Datadog site to which events should be sent
type OutputDatadogDatadogSite string

const (
	OutputDatadogDatadogSiteUs   OutputDatadogDatadogSite = "us"
	OutputDatadogDatadogSiteUs3  OutputDatadogDatadogSite = "us3"
	OutputDatadogDatadogSiteUs5  OutputDatadogDatadogSite = "us5"
	OutputDatadogDatadogSiteEu   OutputDatadogDatadogSite = "eu"
	OutputDatadogDatadogSiteFed1 OutputDatadogDatadogSite = "fed1"
	OutputDatadogDatadogSiteAp1  OutputDatadogDatadogSite = "ap1"
)

func (e OutputDatadogDatadogSite) ToPointer() *OutputDatadogDatadogSite {
	return &e
}

func (e *OutputDatadogDatadogSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us":
		fallthrough
	case "us3":
		fallthrough
	case "us5":
		fallthrough
	case "eu":
		fallthrough
	case "fed1":
		fallthrough
	case "ap1":
		*e = OutputDatadogDatadogSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogDatadogSite: %v", v)
	}
}

type OutputDatadogType string

const (
	OutputDatadogTypeDatadog OutputDatadogType = "datadog"
)

func (e OutputDatadogType) ToPointer() *OutputDatadogType {
	return &e
}

func (e *OutputDatadogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "datadog":
		*e = OutputDatadogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputDatadogType: %v", v)
	}
}

type OutputDatadog struct {
	// If enabled, the API key can be set from the event's '__agent_api_key' field.
	AllowAPIKeyFromEvents *bool `json:"allowApiKeyFromEvents,omitempty"`
	// Organization's API key in Datadog
	APIKey *string `json:"apiKey,omitempty"`
	// Enter API key directly, or select a stored secret
	AuthType *OutputDatadogAuthenticationMethod `json:"authType,omitempty"`
	// Whether to compress the payload body before sending.
	Compress *bool `json:"compress,omitempty"`
	// Maximum number of ongoing requests before blocking.
	Concurrency *int64 `json:"concurrency,omitempty"`
	// The content type to use when sending logs.
	ContentType *OutputDatadogSendLogsAs `json:"contentType,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Headers to add to all events.
	ExtraHTTPHeaders []OutputDatadogExtraHTTPHeaders `json:"extraHttpHeaders,omitempty"`
	// Determines which data should be logged when a request fails. Defaults to None.  All headers are redacted by default, except those listed under `Safe Headers`.
	FailedRequestLoggingMode *OutputDatadogFailedRequestLoggingMode `json:"failedRequestLoggingMode,omitempty"`
	// Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max body size.
	FlushPeriodSec *int64 `json:"flushPeriodSec,omitempty"`
	// Name of the host to send with logs. When you send logs as JSON objects, the event's 'host' field (if set) will override this value.
	Host *string `json:"host,omitempty"`
	// Unique ID for this output
	ID string `json:"id"`
	// Max number of events to include in the request body. Default is 0 (unlimited).
	MaxPayloadEvents *int64 `json:"maxPayloadEvents,omitempty"`
	// Maximum size, in KB, of the request body.
	MaxPayloadSizeKB *int64 `json:"maxPayloadSizeKB,omitempty"`
	// Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event.
	Message *string `json:"message,omitempty"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure *OutputDatadogBackpressureBehavior `json:"onBackpressure,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputDatadogCompression `json:"pqCompress,omitempty"`
	PqControls *OutputDatadogPqControls  `json:"pqControls,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `json:"pqMaxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `json:"pqMaxSize,omitempty"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputDatadogQueueFullBehavior `json:"pqOnBackpressure,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `json:"pqPath,omitempty"`
	// Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out).
	PqStrictOrdering *bool `json:"pqStrictOrdering,omitempty"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another trusted CA (e.g., the system's CA). Defaults to Yes.
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// List of headers that are safe to log in plain text.
	SafeHeaders []string `json:"safeHeaders,omitempty"`
	// Name of the service to send with logs. When you send logs as JSON objects, the event's '__service' field (if set) will override this value.
	Service *string `json:"service,omitempty"`
	// Default value for message severity. When you send logs as JSON objects, the event's '__severity' field (if set) will override this value.
	Severity *OutputDatadogSeverity `json:"severity,omitempty"`
	// Datadog site to which events should be sent
	Site *OutputDatadogDatadogSite `json:"site,omitempty"`
	// Name of the source to send with logs. When you send logs as JSON objects, the event's 'source' field (if set) will override this value.
	Source *string `json:"source,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string `json:"systemFields,omitempty"`
	// List of tags to send with logs (e.g., 'env:prod', 'env_staging:east').
	Tags []string `json:"tags,omitempty"`
	// Select (or create) a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// Amount of time, in seconds, to wait for a request to complete before aborting it.
	TimeoutSec *int64            `json:"timeoutSec,omitempty"`
	Type       OutputDatadogType `json:"type"`
	// Enable to use round-robin DNS lookup. When a DNS server returns multiple addresses, this will cause Stream to cycle through them in the order returned.
	UseRoundRobinDNS *bool `json:"useRoundRobinDns,omitempty"`
}
