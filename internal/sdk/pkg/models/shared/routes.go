// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

type RoutesComments struct {
	// Optional, short description of this Route's purpose
	Comment *string `json:"comment,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _RoutesComments RoutesComments

func (c *RoutesComments) UnmarshalJSON(bs []byte) error {
	data := _RoutesComments{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = RoutesComments(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "comment")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c RoutesComments) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_RoutesComments(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

type RoutesGroups struct {
	// Short description of this group
	Description *string `json:"description,omitempty"`
	// Whether this group is disabled
	Disabled *bool  `json:"disabled,omitempty"`
	Name     string `json:"name"`
}

// RoutesInput - Routes object
type RoutesInput struct {
	// Comments
	Comments []RoutesComments        `json:"comments,omitempty"`
	Groups   map[string]RoutesGroups `json:"groups,omitempty"`
	// Routes ID
	ID *string `json:"id,omitempty"`
	// Pipeline routing rules
	Routes []RoutesRouteInput `json:"routes"`
}

// Routes - a list of Routes objects
type Routes struct {
	// Comments
	Comments []RoutesComments        `json:"comments,omitempty"`
	Groups   map[string]RoutesGroups `json:"groups,omitempty"`
	// Routes ID
	ID *string `json:"id,omitempty"`
	// Pipeline routing rules
	Routes []RoutesRoute `json:"routes"`
}
