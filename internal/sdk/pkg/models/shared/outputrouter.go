// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OutputRouterRules struct {
	// Description of this rule's purpose
	Description *string `json:"description,omitempty"`
	// JavaScript expression to select events to send to output
	Filter string `json:"filter"`
	// Flag to control whether to stop the event from being checked against other rules
	Final *bool `json:"final,omitempty"`
	// Output to send matching events to
	Output string `json:"output"`
}

type OutputRouterType string

const (
	OutputRouterTypeRouter OutputRouterType = "router"
)

func (e OutputRouterType) ToPointer() *OutputRouterType {
	return &e
}

func (e *OutputRouterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "router":
		*e = OutputRouterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputRouterType: %v", v)
	}
}

type OutputRouter struct {
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this output
	ID *string `json:"id,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// Event routing rules
	Rules []OutputRouterRules `json:"rules"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string         `json:"systemFields,omitempty"`
	Type         OutputRouterType `json:"type"`
}
