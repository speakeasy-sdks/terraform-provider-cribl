// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputSystemStateCollectorsDisksAndFileSystems - Creates events for physical disks, partitions, and file systems
type InputSystemStateCollectorsDisksAndFileSystems struct {
	Enable *bool `json:"enable,omitempty"`
}

// InputSystemStateCollectorsDNS - Creates events for DNS resolvers and search entries
type InputSystemStateCollectorsDNS struct {
	Enable *bool `json:"enable,omitempty"`
}

// InputSystemStateCollectorsHostsFile - Creates events based on entries collected from the hosts file
type InputSystemStateCollectorsHostsFile struct {
	Enable *bool `json:"enable,omitempty"`
}

// InputSystemStateCollectorsInterfaces - Creates events for each of the host’s network interfaces
type InputSystemStateCollectorsInterfaces struct {
	Enable *bool `json:"enable,omitempty"`
}

// InputSystemStateCollectorsHostInfo - Creates events based on the host system’s current state
type InputSystemStateCollectorsHostInfo struct {
	Enable *bool `json:"enable,omitempty"`
}

// InputSystemStateCollectorsRoutes - Creates events based on entries collected from the host’s network routes
type InputSystemStateCollectorsRoutes struct {
	Enable *bool `json:"enable,omitempty"`
}

// InputSystemStateCollectorsUsersAndGroups - Creates events for local users and groups
type InputSystemStateCollectorsUsersAndGroups struct {
	Enable *bool `json:"enable,omitempty"`
}

type InputSystemStateCollectors struct {
	// Creates events for physical disks, partitions, and file systems
	Disk *InputSystemStateCollectorsDisksAndFileSystems `json:"disk,omitempty"`
	// Creates events for DNS resolvers and search entries
	DNS *InputSystemStateCollectorsDNS `json:"dns,omitempty"`
	// Creates events based on entries collected from the hosts file
	Hostsfile *InputSystemStateCollectorsHostsFile `json:"hostsfile,omitempty"`
	// Creates events for each of the host’s network interfaces
	Interfaces *InputSystemStateCollectorsInterfaces `json:"interfaces,omitempty"`
	// Creates events based on the host system’s current state
	Metadata *InputSystemStateCollectorsHostInfo `json:"metadata,omitempty"`
	// Creates events based on entries collected from the host’s network routes
	Routes *InputSystemStateCollectorsRoutes `json:"routes,omitempty"`
	// Creates events for local users and groups
	User *InputSystemStateCollectorsUsersAndGroups `json:"user,omitempty"`
}

type InputSystemStateConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

type InputSystemStateMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputSystemStatePersistenceCompression - Select data compression format. Optional.
type InputSystemStatePersistenceCompression string

const (
	InputSystemStatePersistenceCompressionNone InputSystemStatePersistenceCompression = "none"
	InputSystemStatePersistenceCompressionGzip InputSystemStatePersistenceCompression = "gzip"
)

func (e InputSystemStatePersistenceCompression) ToPointer() *InputSystemStatePersistenceCompression {
	return &e
}

func (e *InputSystemStatePersistenceCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSystemStatePersistenceCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemStatePersistenceCompression: %v", v)
	}
}

type InputSystemStatePersistence struct {
	// Select data compression format. Optional.
	Compress *InputSystemStatePersistenceCompression `json:"compress,omitempty"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/system_state
	DestPath *string `json:"destPath,omitempty"`
	// Spool metrics to disk for Cribl Edge and Search
	Enable *bool `json:"enable,omitempty"`
	// Maximum disk space allowed to be consumed (e.g., 420MB or 4GB). Once reached, older data will be deleted.
	MaxDataSize *string `json:"maxDataSize,omitempty"`
	// Maximum amount of time to retain data (e.g., 2h or 4d). Once reached, older data will be deleted.
	MaxDataTime *string `json:"maxDataTime,omitempty"`
	// Time span for each file bucket
	TimeWindow *string `json:"timeWindow,omitempty"`
}

// InputSystemStatePqCompression - Codec to use to compress the persisted data.
type InputSystemStatePqCompression string

const (
	InputSystemStatePqCompressionNone InputSystemStatePqCompression = "none"
	InputSystemStatePqCompressionGzip InputSystemStatePqCompression = "gzip"
)

func (e InputSystemStatePqCompression) ToPointer() *InputSystemStatePqCompression {
	return &e
}

func (e *InputSystemStatePqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSystemStatePqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemStatePqCompression: %v", v)
	}
}

// InputSystemStatePqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSystemStatePqMode string

const (
	InputSystemStatePqModeSmart  InputSystemStatePqMode = "smart"
	InputSystemStatePqModeAlways InputSystemStatePqMode = "always"
)

func (e InputSystemStatePqMode) ToPointer() *InputSystemStatePqMode {
	return &e
}

func (e *InputSystemStatePqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputSystemStatePqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemStatePqMode: %v", v)
	}
}

type InputSystemStatePq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputSystemStatePqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSystemStatePqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputSystemStateInputType string

const (
	InputSystemStateInputTypeSplunk            InputSystemStateInputType = "splunk"
	InputSystemStateInputTypeSplunkHec         InputSystemStateInputType = "splunk_hec"
	InputSystemStateInputTypeSyslog            InputSystemStateInputType = "syslog"
	InputSystemStateInputTypeTcpjson           InputSystemStateInputType = "tcpjson"
	InputSystemStateInputTypeGrafana           InputSystemStateInputType = "grafana"
	InputSystemStateInputTypeLoki              InputSystemStateInputType = "loki"
	InputSystemStateInputTypeHTTP              InputSystemStateInputType = "http"
	InputSystemStateInputTypeHTTPRaw           InputSystemStateInputType = "http_raw"
	InputSystemStateInputTypeFirehose          InputSystemStateInputType = "firehose"
	InputSystemStateInputTypeElastic           InputSystemStateInputType = "elastic"
	InputSystemStateInputTypeKafka             InputSystemStateInputType = "kafka"
	InputSystemStateInputTypeConfluentCloud    InputSystemStateInputType = "confluent_cloud"
	InputSystemStateInputTypeMsk               InputSystemStateInputType = "msk"
	InputSystemStateInputTypeKinesis           InputSystemStateInputType = "kinesis"
	InputSystemStateInputTypeEventhub          InputSystemStateInputType = "eventhub"
	InputSystemStateInputTypeAzureBlob         InputSystemStateInputType = "azure_blob"
	InputSystemStateInputTypeMetrics           InputSystemStateInputType = "metrics"
	InputSystemStateInputTypeSqs               InputSystemStateInputType = "sqs"
	InputSystemStateInputTypeS3                InputSystemStateInputType = "s3"
	InputSystemStateInputTypeSnmp              InputSystemStateInputType = "snmp"
	InputSystemStateInputTypeCrowdstrike       InputSystemStateInputType = "crowdstrike"
	InputSystemStateInputTypeTCP               InputSystemStateInputType = "tcp"
	InputSystemStateInputTypeRawUDP            InputSystemStateInputType = "raw_udp"
	InputSystemStateInputTypeOffice365Service  InputSystemStateInputType = "office365_service"
	InputSystemStateInputTypeOffice365Mgmt     InputSystemStateInputType = "office365_mgmt"
	InputSystemStateInputTypeOffice365MsgTrace InputSystemStateInputType = "office365_msg_trace"
	InputSystemStateInputTypePrometheus        InputSystemStateInputType = "prometheus"
	InputSystemStateInputTypeEdgePrometheus    InputSystemStateInputType = "edge_prometheus"
	InputSystemStateInputTypePrometheusRw      InputSystemStateInputType = "prometheus_rw"
	InputSystemStateInputTypeAppscope          InputSystemStateInputType = "appscope"
	InputSystemStateInputTypeGooglePubsub      InputSystemStateInputType = "google_pubsub"
	InputSystemStateInputTypeOpenTelemetry     InputSystemStateInputType = "open_telemetry"
	InputSystemStateInputTypeDatadogAgent      InputSystemStateInputType = "datadog_agent"
	InputSystemStateInputTypeWef               InputSystemStateInputType = "wef"
	InputSystemStateInputTypeDatagen           InputSystemStateInputType = "datagen"
	InputSystemStateInputTypeCribl             InputSystemStateInputType = "cribl"
	InputSystemStateInputTypeCriblmetrics      InputSystemStateInputType = "criblmetrics"
	InputSystemStateInputTypeCriblHTTP         InputSystemStateInputType = "cribl_http"
	InputSystemStateInputTypeCriblTCP          InputSystemStateInputType = "cribl_tcp"
	InputSystemStateInputTypeWinEventLogs      InputSystemStateInputType = "win_event_logs"
	InputSystemStateInputTypeSystemMetrics     InputSystemStateInputType = "system_metrics"
	InputSystemStateInputTypeWindowsMetrics    InputSystemStateInputType = "windows_metrics"
	InputSystemStateInputTypeSystemState       InputSystemStateInputType = "system_state"
	InputSystemStateInputTypeKubeMetrics       InputSystemStateInputType = "kube_metrics"
	InputSystemStateInputTypeKubeLogs          InputSystemStateInputType = "kube_logs"
	InputSystemStateInputTypeKubeEvents        InputSystemStateInputType = "kube_events"
	InputSystemStateInputTypeExec              InputSystemStateInputType = "exec"
	InputSystemStateInputTypeSplunkSearch      InputSystemStateInputType = "splunk_search"
	InputSystemStateInputTypeFile              InputSystemStateInputType = "file"
	InputSystemStateInputTypeJournalFiles      InputSystemStateInputType = "journal_files"
)

func (e InputSystemStateInputType) ToPointer() *InputSystemStateInputType {
	return &e
}

func (e *InputSystemStateInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		*e = InputSystemStateInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSystemStateInputType: %v", v)
	}
}

type InputSystemState struct {
	Collectors *InputSystemStateCollectors `json:"collectors,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputSystemStateConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this input
	ID string `json:"id"`
	// Time, in seconds, between consecutive state collections. Default is 300 seconds. (i.e. 5 minutes)
	Interval *int64 `json:"interval,omitempty"`
	// Fields to add to events from this input.
	Metadata    []InputSystemStateMetadata   `json:"metadata,omitempty"`
	Persistence *InputSystemStatePersistence `json:"persistence,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string             `json:"pipeline,omitempty"`
	Pq       *InputSystemStatePq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                  `json:"streamtags,omitempty"`
	Type       InputSystemStateInputType `json:"type"`
}
