// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputKinesisAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputKinesisAuthenticationMethod string

const (
	InputKinesisAuthenticationMethodSecret InputKinesisAuthenticationMethod = "secret"
	InputKinesisAuthenticationMethodManual InputKinesisAuthenticationMethod = "manual"
)

func (e InputKinesisAuthenticationMethod) ToPointer() *InputKinesisAuthenticationMethod {
	return &e
}

func (e *InputKinesisAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputKinesisAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisAuthenticationMethod: %v", v)
	}
}

type InputKinesisConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

// InputKinesisShardLoadBalancing - The load-balancing algorithm to use for spreading out shards across Workers and Worker Processes
type InputKinesisShardLoadBalancing string

const (
	InputKinesisShardLoadBalancingConsistentHashing InputKinesisShardLoadBalancing = "ConsistentHashing"
	InputKinesisShardLoadBalancingRoundRobin        InputKinesisShardLoadBalancing = "RoundRobin"
)

func (e InputKinesisShardLoadBalancing) ToPointer() *InputKinesisShardLoadBalancing {
	return &e
}

func (e *InputKinesisShardLoadBalancing) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ConsistentHashing":
		fallthrough
	case "RoundRobin":
		*e = InputKinesisShardLoadBalancing(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisShardLoadBalancing: %v", v)
	}
}

type InputKinesisMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputKinesisRecordDataFormat - Format of data inside the Kinesis Stream records. Gzip compression is automatically detected.
type InputKinesisRecordDataFormat string

const (
	InputKinesisRecordDataFormatCribl      InputKinesisRecordDataFormat = "cribl"
	InputKinesisRecordDataFormatNdjson     InputKinesisRecordDataFormat = "ndjson"
	InputKinesisRecordDataFormatCloudwatch InputKinesisRecordDataFormat = "cloudwatch"
	InputKinesisRecordDataFormatLine       InputKinesisRecordDataFormat = "line"
)

func (e InputKinesisRecordDataFormat) ToPointer() *InputKinesisRecordDataFormat {
	return &e
}

func (e *InputKinesisRecordDataFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl":
		fallthrough
	case "ndjson":
		fallthrough
	case "cloudwatch":
		fallthrough
	case "line":
		*e = InputKinesisRecordDataFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisRecordDataFormat: %v", v)
	}
}

// InputKinesisPqCompression - Codec to use to compress the persisted data.
type InputKinesisPqCompression string

const (
	InputKinesisPqCompressionNone InputKinesisPqCompression = "none"
	InputKinesisPqCompressionGzip InputKinesisPqCompression = "gzip"
)

func (e InputKinesisPqCompression) ToPointer() *InputKinesisPqCompression {
	return &e
}

func (e *InputKinesisPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputKinesisPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisPqCompression: %v", v)
	}
}

// InputKinesisPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputKinesisPqMode string

const (
	InputKinesisPqModeSmart  InputKinesisPqMode = "smart"
	InputKinesisPqModeAlways InputKinesisPqMode = "always"
)

func (e InputKinesisPqMode) ToPointer() *InputKinesisPqMode {
	return &e
}

func (e *InputKinesisPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputKinesisPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisPqMode: %v", v)
	}
}

type InputKinesisPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputKinesisPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputKinesisPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

// InputKinesisRegion - Region where the Kinesis stream is located
type InputKinesisRegion string

const (
	InputKinesisRegionUsEast1      InputKinesisRegion = "us-east-1"
	InputKinesisRegionUsEast2      InputKinesisRegion = "us-east-2"
	InputKinesisRegionUsWest1      InputKinesisRegion = "us-west-1"
	InputKinesisRegionUsWest2      InputKinesisRegion = "us-west-2"
	InputKinesisRegionAfSouth1     InputKinesisRegion = "af-south-1"
	InputKinesisRegionCaCentral1   InputKinesisRegion = "ca-central-1"
	InputKinesisRegionEuWest1      InputKinesisRegion = "eu-west-1"
	InputKinesisRegionEuCentral1   InputKinesisRegion = "eu-central-1"
	InputKinesisRegionEuWest2      InputKinesisRegion = "eu-west-2"
	InputKinesisRegionEuSouth1     InputKinesisRegion = "eu-south-1"
	InputKinesisRegionEuWest3      InputKinesisRegion = "eu-west-3"
	InputKinesisRegionEuNorth1     InputKinesisRegion = "eu-north-1"
	InputKinesisRegionApEast1      InputKinesisRegion = "ap-east-1"
	InputKinesisRegionApNortheast1 InputKinesisRegion = "ap-northeast-1"
	InputKinesisRegionApNortheast2 InputKinesisRegion = "ap-northeast-2"
	InputKinesisRegionApSoutheast1 InputKinesisRegion = "ap-southeast-1"
	InputKinesisRegionApSoutheast2 InputKinesisRegion = "ap-southeast-2"
	InputKinesisRegionApSouth1     InputKinesisRegion = "ap-south-1"
	InputKinesisRegionMeSouth1     InputKinesisRegion = "me-south-1"
	InputKinesisRegionSaEast1      InputKinesisRegion = "sa-east-1"
	InputKinesisRegionUsGovEast1   InputKinesisRegion = "us-gov-east-1"
	InputKinesisRegionUsGovWest1   InputKinesisRegion = "us-gov-west-1"
)

func (e InputKinesisRegion) ToPointer() *InputKinesisRegion {
	return &e
}

func (e *InputKinesisRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = InputKinesisRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisRegion: %v", v)
	}
}

// InputKinesisShardIteratorStart - Location at which to start reading a shard for the first time.
type InputKinesisShardIteratorStart string

const (
	InputKinesisShardIteratorStartTrimHorizon InputKinesisShardIteratorStart = "TRIM_HORIZON"
	InputKinesisShardIteratorStartLatest      InputKinesisShardIteratorStart = "LATEST"
)

func (e InputKinesisShardIteratorStart) ToPointer() *InputKinesisShardIteratorStart {
	return &e
}

func (e *InputKinesisShardIteratorStart) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRIM_HORIZON":
		fallthrough
	case "LATEST":
		*e = InputKinesisShardIteratorStart(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisShardIteratorStart: %v", v)
	}
}

// InputKinesisSignatureVersion - Signature version to use for signing Kinesis stream requests.
type InputKinesisSignatureVersion string

const (
	InputKinesisSignatureVersionV2 InputKinesisSignatureVersion = "v2"
	InputKinesisSignatureVersionV4 InputKinesisSignatureVersion = "v4"
)

func (e InputKinesisSignatureVersion) ToPointer() *InputKinesisSignatureVersion {
	return &e
}

func (e *InputKinesisSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputKinesisSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisSignatureVersion: %v", v)
	}
}

type InputKinesisType string

const (
	InputKinesisTypeKinesis InputKinesisType = "kinesis"
)

func (e InputKinesisType) ToPointer() *InputKinesisType {
	return &e
}

func (e *InputKinesisType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kinesis":
		*e = InputKinesisType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKinesisType: %v", v)
	}
}

type InputKinesis struct {
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// Yes means: when resuming streaming from a stored state, Stream will read the next available record, rather than rereading the last-read record. Enabling this can cause data loss after a Worker Node's unexpected shutdown or restart.
	AvoidDuplicates *bool `json:"avoidDuplicates,omitempty"`
	// Access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputKinesisAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// Select (or create) a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputKinesisConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Use Assume Role credentials to access Kinesis stream
	EnableAssumeRole *bool `json:"enableAssumeRole,omitempty"`
	// Kinesis stream service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to Kinesis stream-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Maximum number of records per getRecords call
	GetRecordsLimit *int64 `json:"getRecordsLimit,omitempty"`
	// Maximum number of records, across all shards, to pull down at once per Worker Process
	GetRecordsLimitTotal *int64 `json:"getRecordsLimitTotal,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// The load-balancing algorithm to use for spreading out shards across Workers and Worker Processes
	LoadBalancingAlgorithm *InputKinesisShardLoadBalancing `json:"loadBalancingAlgorithm,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputKinesisMetadata `json:"metadata,omitempty"`
	// Format of data inside the Kinesis Stream records. Gzip compression is automatically detected.
	PayloadFormat *InputKinesisRecordDataFormat `json:"payloadFormat,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string         `json:"pipeline,omitempty"`
	Pq       *InputKinesisPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Region where the Kinesis stream is located
	Region InputKinesisRegion `json:"region"`
	// Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Whether to reuse connections between requests, which can improve performance.
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Time interval in minutes between consecutive service calls
	ServiceInterval *int64 `json:"serviceInterval,omitempty"`
	// A JS expression to be called with each shardId for the stream, if the expression evalutates to a truthy value the shard will be processed.
	ShardExpr *string `json:"shardExpr,omitempty"`
	// Location at which to start reading a shard for the first time.
	ShardIteratorType *InputKinesisShardIteratorStart `json:"shardIteratorType,omitempty"`
	// Signature version to use for signing Kinesis stream requests.
	SignatureVersion *InputKinesisSignatureVersion `json:"signatureVersion,omitempty"`
	// Kinesis stream name to read data from.
	StreamName string `json:"streamName"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string          `json:"streamtags,omitempty"`
	Type       *InputKinesisType `json:"type,omitempty"`
	// Verify Kinesis Producer Library (KPL) event checksums
	VerifyKPLCheckSums *bool `json:"verifyKPLCheckSums,omitempty"`
}
