// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OutputSqsAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type OutputSqsAuthenticationMethod string

const (
	OutputSqsAuthenticationMethodSecret OutputSqsAuthenticationMethod = "secret"
	OutputSqsAuthenticationMethodManual OutputSqsAuthenticationMethod = "manual"
)

func (e OutputSqsAuthenticationMethod) ToPointer() *OutputSqsAuthenticationMethod {
	return &e
}

func (e *OutputSqsAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = OutputSqsAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsAuthenticationMethod: %v", v)
	}
}

// OutputSqsBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputSqsBackpressureBehavior string

const (
	OutputSqsBackpressureBehaviorQueue OutputSqsBackpressureBehavior = "queue"
	OutputSqsBackpressureBehaviorDrop  OutputSqsBackpressureBehavior = "drop"
	OutputSqsBackpressureBehaviorBlock OutputSqsBackpressureBehavior = "block"
)

func (e OutputSqsBackpressureBehavior) ToPointer() *OutputSqsBackpressureBehavior {
	return &e
}

func (e *OutputSqsBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue":
		fallthrough
	case "drop":
		fallthrough
	case "block":
		*e = OutputSqsBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsBackpressureBehavior: %v", v)
	}
}

// OutputSqsCompression - Codec to use to compress the persisted data.
type OutputSqsCompression string

const (
	OutputSqsCompressionNone OutputSqsCompression = "none"
	OutputSqsCompressionGzip OutputSqsCompression = "gzip"
)

func (e OutputSqsCompression) ToPointer() *OutputSqsCompression {
	return &e
}

func (e *OutputSqsCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputSqsCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsCompression: %v", v)
	}
}

type OutputSqsPqControls struct {
}

// OutputSqsQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputSqsQueueFullBehavior string

const (
	OutputSqsQueueFullBehaviorBlock OutputSqsQueueFullBehavior = "block"
	OutputSqsQueueFullBehaviorDrop  OutputSqsQueueFullBehavior = "drop"
)

func (e OutputSqsQueueFullBehavior) ToPointer() *OutputSqsQueueFullBehavior {
	return &e
}

func (e *OutputSqsQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputSqsQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsQueueFullBehavior: %v", v)
	}
}

// OutputSqsQueueType - The queue type used (or created). Defaults to Standard.
type OutputSqsQueueType string

const (
	OutputSqsQueueTypeStandard OutputSqsQueueType = "standard"
	OutputSqsQueueTypeFifo     OutputSqsQueueType = "fifo"
)

func (e OutputSqsQueueType) ToPointer() *OutputSqsQueueType {
	return &e
}

func (e *OutputSqsQueueType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "fifo":
		*e = OutputSqsQueueType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsQueueType: %v", v)
	}
}

// OutputSqsRegion - AWS Region where the SQS queue is located. Required, unless the Queue entry is a URL or ARN that includes a Region.
type OutputSqsRegion string

const (
	OutputSqsRegionUsEast1      OutputSqsRegion = "us-east-1"
	OutputSqsRegionUsEast2      OutputSqsRegion = "us-east-2"
	OutputSqsRegionUsWest1      OutputSqsRegion = "us-west-1"
	OutputSqsRegionUsWest2      OutputSqsRegion = "us-west-2"
	OutputSqsRegionAfSouth1     OutputSqsRegion = "af-south-1"
	OutputSqsRegionCaCentral1   OutputSqsRegion = "ca-central-1"
	OutputSqsRegionEuWest1      OutputSqsRegion = "eu-west-1"
	OutputSqsRegionEuCentral1   OutputSqsRegion = "eu-central-1"
	OutputSqsRegionEuWest2      OutputSqsRegion = "eu-west-2"
	OutputSqsRegionEuSouth1     OutputSqsRegion = "eu-south-1"
	OutputSqsRegionEuWest3      OutputSqsRegion = "eu-west-3"
	OutputSqsRegionEuNorth1     OutputSqsRegion = "eu-north-1"
	OutputSqsRegionApEast1      OutputSqsRegion = "ap-east-1"
	OutputSqsRegionApNortheast1 OutputSqsRegion = "ap-northeast-1"
	OutputSqsRegionApNortheast2 OutputSqsRegion = "ap-northeast-2"
	OutputSqsRegionApSoutheast1 OutputSqsRegion = "ap-southeast-1"
	OutputSqsRegionApSoutheast2 OutputSqsRegion = "ap-southeast-2"
	OutputSqsRegionApSouth1     OutputSqsRegion = "ap-south-1"
	OutputSqsRegionMeSouth1     OutputSqsRegion = "me-south-1"
	OutputSqsRegionSaEast1      OutputSqsRegion = "sa-east-1"
	OutputSqsRegionUsGovEast1   OutputSqsRegion = "us-gov-east-1"
	OutputSqsRegionUsGovWest1   OutputSqsRegion = "us-gov-west-1"
)

func (e OutputSqsRegion) ToPointer() *OutputSqsRegion {
	return &e
}

func (e *OutputSqsRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = OutputSqsRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsRegion: %v", v)
	}
}

// OutputSqsSignatureVersion - Signature version to use for signing SQS requests.
type OutputSqsSignatureVersion string

const (
	OutputSqsSignatureVersionV2 OutputSqsSignatureVersion = "v2"
	OutputSqsSignatureVersionV4 OutputSqsSignatureVersion = "v4"
)

func (e OutputSqsSignatureVersion) ToPointer() *OutputSqsSignatureVersion {
	return &e
}

func (e *OutputSqsSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = OutputSqsSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsSignatureVersion: %v", v)
	}
}

type OutputSqsType string

const (
	OutputSqsTypeSqs OutputSqsType = "sqs"
)

func (e OutputSqsType) ToPointer() *OutputSqsType {
	return &e
}

func (e *OutputSqsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sqs":
		*e = OutputSqsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputSqsType: %v", v)
	}
}

type OutputSqs struct {
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
	AwsAccountID *string `json:"awsAccountId,omitempty"`
	// Access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *OutputSqsAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// Select (or create) a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// Create queue if it does not exist.
	CreateQueue *bool `json:"createQueue,omitempty"`
	// Use Assume Role credentials to access SQS
	EnableAssumeRole *bool `json:"enableAssumeRole,omitempty"`
	// SQS service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to SQS-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size.
	FlushPeriodSec *int64 `json:"flushPeriodSec,omitempty"`
	// Unique ID for this output
	ID *string `json:"id,omitempty"`
	// The maximum number of in-progress API requests before backpressure is applied.
	MaxInProgress *int64 `json:"maxInProgress,omitempty"`
	// Maximum number of queued batches before blocking.
	MaxQueueSize *int64 `json:"maxQueueSize,omitempty"`
	// Maximum size (KB) of batches to send. Per the SQS spec, the max allowed value is 256 KB.
	MaxRecordSizeKB *int64 `json:"maxRecordSizeKB,omitempty"`
	// This parameter applies only to FIFO queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner. Use event field __messageGroupId to override this value.
	MessageGroupID *string `json:"messageGroupId,omitempty"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure *OutputSqsBackpressureBehavior `json:"onBackpressure,omitempty"`
	// Pipeline to process data before sending out to this output.
	Pipeline *string `json:"pipeline,omitempty"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputSqsCompression `json:"pqCompress,omitempty"`
	PqControls *OutputSqsPqControls  `json:"pqControls,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `json:"pqMaxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `json:"pqMaxSize,omitempty"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputSqsQueueFullBehavior `json:"pqOnBackpressure,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `json:"pqPath,omitempty"`
	// Toggle this off to forward new events to receiver(s) before queue is flushed. Otherwise, default drain behavior is FIFO (first in, first out).
	PqStrictOrdering *bool `json:"pqStrictOrdering,omitempty"`
	// The name, URL, or ARN of the SQS queue to send events to. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. E.g., 'https://host:port/myQueueName'. Must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. E.g., referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	QueueName string `json:"queueName"`
	// The queue type used (or created). Defaults to Standard.
	QueueType OutputSqsQueueType `json:"queueType"`
	// AWS Region where the SQS queue is located. Required, unless the Queue entry is a URL or ARN that includes a Region.
	Region *OutputSqsRegion `json:"region,omitempty"`
	// Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Whether to reuse connections between requests, which can improve performance.
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// Signature version to use for signing SQS requests.
	SignatureVersion *OutputSqsSignatureVersion `json:"signatureVersion,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Set of fields to automatically add to events using this output. E.g.: cribl_pipe, c*. Wildcards supported.
	SystemFields []string       `json:"systemFields,omitempty"`
	Type         *OutputSqsType `json:"type,omitempty"`
}
