// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputOffice365MgmtAuthenticationMethod - Enter client secret directly, or select a stored secret
type InputOffice365MgmtAuthenticationMethod string

const (
	InputOffice365MgmtAuthenticationMethodSecret InputOffice365MgmtAuthenticationMethod = "secret"
	InputOffice365MgmtAuthenticationMethodManual InputOffice365MgmtAuthenticationMethod = "manual"
)

func (e InputOffice365MgmtAuthenticationMethod) ToPointer() *InputOffice365MgmtAuthenticationMethod {
	return &e
}

func (e *InputOffice365MgmtAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputOffice365MgmtAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MgmtAuthenticationMethod: %v", v)
	}
}

type InputOffice365MgmtConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

// InputOffice365MgmtContentConfigLogLevel - Collector runtime Log Level
type InputOffice365MgmtContentConfigLogLevel string

const (
	InputOffice365MgmtContentConfigLogLevelError InputOffice365MgmtContentConfigLogLevel = "error"
	InputOffice365MgmtContentConfigLogLevelWarn  InputOffice365MgmtContentConfigLogLevel = "warn"
	InputOffice365MgmtContentConfigLogLevelInfo  InputOffice365MgmtContentConfigLogLevel = "info"
	InputOffice365MgmtContentConfigLogLevelDebug InputOffice365MgmtContentConfigLogLevel = "debug"
)

func (e InputOffice365MgmtContentConfigLogLevel) ToPointer() *InputOffice365MgmtContentConfigLogLevel {
	return &e
}

func (e *InputOffice365MgmtContentConfigLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		*e = InputOffice365MgmtContentConfigLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MgmtContentConfigLogLevel: %v", v)
	}
}

type InputOffice365MgmtContentConfig struct {
	// Office 365 Management Activity API Content Type
	ContentType *string `json:"contentType,omitempty"`
	// If interval type is minutes the value entered must evenly divisible by 60 or save will fail
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Interval    *int64  `json:"interval,omitempty"`
	// Collector runtime Log Level
	LogLevel *InputOffice365MgmtContentConfigLogLevel `json:"logLevel,omitempty"`
}

type InputOffice365MgmtMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputOffice365MgmtSubscriptionPlan - Office 365 subscription plan for your organization, typically Enterprise
type InputOffice365MgmtSubscriptionPlan string

const (
	InputOffice365MgmtSubscriptionPlanEnterpriseGcc InputOffice365MgmtSubscriptionPlan = "enterprise_gcc"
	InputOffice365MgmtSubscriptionPlanGcc           InputOffice365MgmtSubscriptionPlan = "gcc"
	InputOffice365MgmtSubscriptionPlanGccHigh       InputOffice365MgmtSubscriptionPlan = "gcc_high"
	InputOffice365MgmtSubscriptionPlanDod           InputOffice365MgmtSubscriptionPlan = "dod"
)

func (e InputOffice365MgmtSubscriptionPlan) ToPointer() *InputOffice365MgmtSubscriptionPlan {
	return &e
}

func (e *InputOffice365MgmtSubscriptionPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enterprise_gcc":
		fallthrough
	case "gcc":
		fallthrough
	case "gcc_high":
		fallthrough
	case "dod":
		*e = InputOffice365MgmtSubscriptionPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MgmtSubscriptionPlan: %v", v)
	}
}

// InputOffice365MgmtPqCompression - Codec to use to compress the persisted data.
type InputOffice365MgmtPqCompression string

const (
	InputOffice365MgmtPqCompressionNone InputOffice365MgmtPqCompression = "none"
	InputOffice365MgmtPqCompressionGzip InputOffice365MgmtPqCompression = "gzip"
)

func (e InputOffice365MgmtPqCompression) ToPointer() *InputOffice365MgmtPqCompression {
	return &e
}

func (e *InputOffice365MgmtPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputOffice365MgmtPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MgmtPqCompression: %v", v)
	}
}

// InputOffice365MgmtPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputOffice365MgmtPqMode string

const (
	InputOffice365MgmtPqModeSmart  InputOffice365MgmtPqMode = "smart"
	InputOffice365MgmtPqModeAlways InputOffice365MgmtPqMode = "always"
)

func (e InputOffice365MgmtPqMode) ToPointer() *InputOffice365MgmtPqMode {
	return &e
}

func (e *InputOffice365MgmtPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputOffice365MgmtPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MgmtPqMode: %v", v)
	}
}

type InputOffice365MgmtPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputOffice365MgmtPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputOffice365MgmtPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputOffice365MgmtType string

const (
	InputOffice365MgmtTypeOffice365Mgmt InputOffice365MgmtType = "office365_mgmt"
)

func (e InputOffice365MgmtType) ToPointer() *InputOffice365MgmtType {
	return &e
}

func (e *InputOffice365MgmtType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "office365_mgmt":
		*e = InputOffice365MgmtType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MgmtType: %v", v)
	}
}

type InputOffice365Mgmt struct {
	// Office 365 Azure Application ID
	AppID string `json:"appId"`
	// Enter client secret directly, or select a stored secret
	AuthType *InputOffice365MgmtAuthenticationMethod `json:"authType,omitempty"`
	// Office 365 Azure client secret
	ClientSecret *string `json:"clientSecret,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputOffice365MgmtConnections `json:"connections,omitempty"`
	// Enable Office 365 Management Activity API content types and polling intervals. Polling intervals are used to set up search date range and cron schedule, e.g.: */${interval} * * * *. Because of this, intervals entered must be evenly divisible by 60 to give a predictable schedule.
	ContentConfig []InputOffice365MgmtContentConfig `json:"contentConfig,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// Maximum time the job is allowed to run (e.g., 30, 45s or 15m). Units are seconds, if not specified. Enter 0 for unlimited time.
	JobTimeout *string `json:"jobTimeout,omitempty"`
	// How often workers should check in with the scheduler to keep job subscription alive
	KeepAliveTime *int64 `json:"keepAliveTime,omitempty"`
	// The number of Keep Alive Time periods before an inactive worker will have its job subscription revoked.
	MaxMissedKeepAlives *int64 `json:"maxMissedKeepAlives,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputOffice365MgmtMetadata `json:"metadata,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// Office 365 subscription plan for your organization, typically Enterprise
	PlanType InputOffice365MgmtSubscriptionPlan `json:"planType"`
	Pq       *InputOffice365MgmtPq              `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Optional Publisher Identifier to use in API requests, defaults to tenant id if not defined. For more information see [here](https://docs.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-reference#start-a-subscription)
	PublisherIdentifier *string `json:"publisherIdentifier,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Office 365 Azure Tenant ID
	TenantID string `json:"tenantId"`
	// Select (or create) a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// HTTP request inactivity timeout, use 0 to disable
	Timeout *int64                  `json:"timeout,omitempty"`
	Type    *InputOffice365MgmtType `json:"type,omitempty"`
}
