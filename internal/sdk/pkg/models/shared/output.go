// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type OutputType string

const (
	OutputTypeOutputDefault            OutputType = "OutputDefault"
	OutputTypeOutputWebhook            OutputType = "OutputWebhook"
	OutputTypeOutputDevnull            OutputType = "OutputDevnull"
	OutputTypeOutputSyslog             OutputType = "OutputSyslog"
	OutputTypeOutputSplunk             OutputType = "OutputSplunk"
	OutputTypeOutputSplunkLb           OutputType = "OutputSplunkLb"
	OutputTypeOutputSplunkHec          OutputType = "OutputSplunkHec"
	OutputTypeOutputTcpjson            OutputType = "OutputTcpjson"
	OutputTypeOutputWavefront          OutputType = "OutputWavefront"
	OutputTypeOutputSignalfx           OutputType = "OutputSignalfx"
	OutputTypeOutputFilesystem         OutputType = "OutputFilesystem"
	OutputTypeOutputS3                 OutputType = "OutputS3"
	OutputTypeOutputAzureBlob          OutputType = "OutputAzureBlob"
	OutputTypeOutputAzureLogs          OutputType = "OutputAzureLogs"
	OutputTypeOutputKinesis            OutputType = "OutputKinesis"
	OutputTypeOutputHoneycomb          OutputType = "OutputHoneycomb"
	OutputTypeOutputAzureEventhub      OutputType = "OutputAzureEventhub"
	OutputTypeOutputGoogleChronicle    OutputType = "OutputGoogleChronicle"
	OutputTypeOutputGoogleCloudStorage OutputType = "OutputGoogleCloudStorage"
	OutputTypeOutputGoogleCloudLogging OutputType = "OutputGoogleCloudLogging"
	OutputTypeOutputGooglePubsub       OutputType = "OutputGooglePubsub"
	OutputTypeOutputKafka              OutputType = "OutputKafka"
	OutputTypeOutputConfluentCloud     OutputType = "OutputConfluentCloud"
	OutputTypeOutputMsk                OutputType = "OutputMsk"
	OutputTypeOutputElastic            OutputType = "OutputElastic"
	OutputTypeOutputNewrelic           OutputType = "OutputNewrelic"
	OutputTypeOutputNewrelicEvents     OutputType = "OutputNewrelicEvents"
	OutputTypeOutputInfluxdb           OutputType = "OutputInfluxdb"
	OutputTypeOutputCloudwatch         OutputType = "OutputCloudwatch"
	OutputTypeOutputMinio              OutputType = "OutputMinio"
	OutputTypeOutputStatsd             OutputType = "OutputStatsd"
	OutputTypeOutputStatsdExt          OutputType = "OutputStatsdExt"
	OutputTypeOutputGraphite           OutputType = "OutputGraphite"
	OutputTypeOutputRouter             OutputType = "OutputRouter"
	OutputTypeOutputSns                OutputType = "OutputSns"
	OutputTypeOutputSqs                OutputType = "OutputSqs"
	OutputTypeOutputSnmp               OutputType = "OutputSnmp"
	OutputTypeOutputSumoLogic          OutputType = "OutputSumoLogic"
	OutputTypeOutputDatadog            OutputType = "OutputDatadog"
	OutputTypeOutputGrafanaCloud       OutputType = "OutputGrafanaCloud"
	OutputTypeOutputLoki               OutputType = "OutputLoki"
	OutputTypeOutputPrometheus         OutputType = "OutputPrometheus"
	OutputTypeOutputRing               OutputType = "OutputRing"
	OutputTypeOutputOpenTelemetry      OutputType = "OutputOpenTelemetry"
	OutputTypeOutputDataset            OutputType = "OutputDataset"
	OutputTypeOutputCriblTCP           OutputType = "OutputCriblTcp"
	OutputTypeOutputCriblHTTP          OutputType = "OutputCriblHttp"
	OutputTypeOutputHumioHec           OutputType = "OutputHumioHec"
	OutputTypeOutputDlS3               OutputType = "OutputDlS3"
	OutputTypeOutputSecurityLake       OutputType = "OutputSecurityLake"
)

type Output struct {
	OutputDefault            *OutputDefault
	OutputWebhook            *OutputWebhook
	OutputDevnull            *OutputDevnull
	OutputSyslog             *OutputSyslog
	OutputSplunk             *OutputSplunk
	OutputSplunkLb           *OutputSplunkLb
	OutputSplunkHec          *OutputSplunkHec
	OutputTcpjson            *OutputTcpjson
	OutputWavefront          *OutputWavefront
	OutputSignalfx           *OutputSignalfx
	OutputFilesystem         *OutputFilesystem
	OutputS3                 *OutputS3
	OutputAzureBlob          *OutputAzureBlob
	OutputAzureLogs          *OutputAzureLogs
	OutputKinesis            *OutputKinesis
	OutputHoneycomb          *OutputHoneycomb
	OutputAzureEventhub      *OutputAzureEventhub
	OutputGoogleChronicle    *OutputGoogleChronicle
	OutputGoogleCloudStorage *OutputGoogleCloudStorage
	OutputGoogleCloudLogging *OutputGoogleCloudLogging
	OutputGooglePubsub       *OutputGooglePubsub
	OutputKafka              *OutputKafka
	OutputConfluentCloud     *OutputConfluentCloud
	OutputMsk                *OutputMsk
	OutputElastic            *OutputElastic
	OutputNewrelic           *OutputNewrelic
	OutputNewrelicEvents     *OutputNewrelicEvents
	OutputInfluxdb           *OutputInfluxdb
	OutputCloudwatch         *OutputCloudwatch
	OutputMinio              *OutputMinio
	OutputStatsd             *OutputStatsd
	OutputStatsdExt          *OutputStatsdExt
	OutputGraphite           *OutputGraphite
	OutputRouter             *OutputRouter
	OutputSns                *OutputSns
	OutputSqs                *OutputSqs
	OutputSnmp               *OutputSnmp
	OutputSumoLogic          *OutputSumoLogic
	OutputDatadog            *OutputDatadog
	OutputGrafanaCloud       *OutputGrafanaCloud
	OutputLoki               *OutputLoki
	OutputPrometheus         *OutputPrometheus
	OutputRing               *OutputRing
	OutputOpenTelemetry      *OutputOpenTelemetry
	OutputDataset            *OutputDataset
	OutputCriblTCP           *OutputCriblTCP
	OutputCriblHTTP          *OutputCriblHTTP
	OutputHumioHec           *OutputHumioHec
	OutputDlS3               *OutputDlS3
	OutputSecurityLake       *OutputSecurityLake

	Type OutputType
}

func CreateOutputOutputDefault(outputDefault OutputDefault) Output {
	typ := OutputTypeOutputDefault

	return Output{
		OutputDefault: &outputDefault,
		Type:          typ,
	}
}

func CreateOutputOutputWebhook(outputWebhook OutputWebhook) Output {
	typ := OutputTypeOutputWebhook

	return Output{
		OutputWebhook: &outputWebhook,
		Type:          typ,
	}
}

func CreateOutputOutputDevnull(outputDevnull OutputDevnull) Output {
	typ := OutputTypeOutputDevnull

	return Output{
		OutputDevnull: &outputDevnull,
		Type:          typ,
	}
}

func CreateOutputOutputSyslog(outputSyslog OutputSyslog) Output {
	typ := OutputTypeOutputSyslog

	return Output{
		OutputSyslog: &outputSyslog,
		Type:         typ,
	}
}

func CreateOutputOutputSplunk(outputSplunk OutputSplunk) Output {
	typ := OutputTypeOutputSplunk

	return Output{
		OutputSplunk: &outputSplunk,
		Type:         typ,
	}
}

func CreateOutputOutputSplunkLb(outputSplunkLb OutputSplunkLb) Output {
	typ := OutputTypeOutputSplunkLb

	return Output{
		OutputSplunkLb: &outputSplunkLb,
		Type:           typ,
	}
}

func CreateOutputOutputSplunkHec(outputSplunkHec OutputSplunkHec) Output {
	typ := OutputTypeOutputSplunkHec

	return Output{
		OutputSplunkHec: &outputSplunkHec,
		Type:            typ,
	}
}

func CreateOutputOutputTcpjson(outputTcpjson OutputTcpjson) Output {
	typ := OutputTypeOutputTcpjson

	return Output{
		OutputTcpjson: &outputTcpjson,
		Type:          typ,
	}
}

func CreateOutputOutputWavefront(outputWavefront OutputWavefront) Output {
	typ := OutputTypeOutputWavefront

	return Output{
		OutputWavefront: &outputWavefront,
		Type:            typ,
	}
}

func CreateOutputOutputSignalfx(outputSignalfx OutputSignalfx) Output {
	typ := OutputTypeOutputSignalfx

	return Output{
		OutputSignalfx: &outputSignalfx,
		Type:           typ,
	}
}

func CreateOutputOutputFilesystem(outputFilesystem OutputFilesystem) Output {
	typ := OutputTypeOutputFilesystem

	return Output{
		OutputFilesystem: &outputFilesystem,
		Type:             typ,
	}
}

func CreateOutputOutputS3(outputS3 OutputS3) Output {
	typ := OutputTypeOutputS3

	return Output{
		OutputS3: &outputS3,
		Type:     typ,
	}
}

func CreateOutputOutputAzureBlob(outputAzureBlob OutputAzureBlob) Output {
	typ := OutputTypeOutputAzureBlob

	return Output{
		OutputAzureBlob: &outputAzureBlob,
		Type:            typ,
	}
}

func CreateOutputOutputAzureLogs(outputAzureLogs OutputAzureLogs) Output {
	typ := OutputTypeOutputAzureLogs

	return Output{
		OutputAzureLogs: &outputAzureLogs,
		Type:            typ,
	}
}

func CreateOutputOutputKinesis(outputKinesis OutputKinesis) Output {
	typ := OutputTypeOutputKinesis

	return Output{
		OutputKinesis: &outputKinesis,
		Type:          typ,
	}
}

func CreateOutputOutputHoneycomb(outputHoneycomb OutputHoneycomb) Output {
	typ := OutputTypeOutputHoneycomb

	return Output{
		OutputHoneycomb: &outputHoneycomb,
		Type:            typ,
	}
}

func CreateOutputOutputAzureEventhub(outputAzureEventhub OutputAzureEventhub) Output {
	typ := OutputTypeOutputAzureEventhub

	return Output{
		OutputAzureEventhub: &outputAzureEventhub,
		Type:                typ,
	}
}

func CreateOutputOutputGoogleChronicle(outputGoogleChronicle OutputGoogleChronicle) Output {
	typ := OutputTypeOutputGoogleChronicle

	return Output{
		OutputGoogleChronicle: &outputGoogleChronicle,
		Type:                  typ,
	}
}

func CreateOutputOutputGoogleCloudStorage(outputGoogleCloudStorage OutputGoogleCloudStorage) Output {
	typ := OutputTypeOutputGoogleCloudStorage

	return Output{
		OutputGoogleCloudStorage: &outputGoogleCloudStorage,
		Type:                     typ,
	}
}

func CreateOutputOutputGoogleCloudLogging(outputGoogleCloudLogging OutputGoogleCloudLogging) Output {
	typ := OutputTypeOutputGoogleCloudLogging

	return Output{
		OutputGoogleCloudLogging: &outputGoogleCloudLogging,
		Type:                     typ,
	}
}

func CreateOutputOutputGooglePubsub(outputGooglePubsub OutputGooglePubsub) Output {
	typ := OutputTypeOutputGooglePubsub

	return Output{
		OutputGooglePubsub: &outputGooglePubsub,
		Type:               typ,
	}
}

func CreateOutputOutputKafka(outputKafka OutputKafka) Output {
	typ := OutputTypeOutputKafka

	return Output{
		OutputKafka: &outputKafka,
		Type:        typ,
	}
}

func CreateOutputOutputConfluentCloud(outputConfluentCloud OutputConfluentCloud) Output {
	typ := OutputTypeOutputConfluentCloud

	return Output{
		OutputConfluentCloud: &outputConfluentCloud,
		Type:                 typ,
	}
}

func CreateOutputOutputMsk(outputMsk OutputMsk) Output {
	typ := OutputTypeOutputMsk

	return Output{
		OutputMsk: &outputMsk,
		Type:      typ,
	}
}

func CreateOutputOutputElastic(outputElastic OutputElastic) Output {
	typ := OutputTypeOutputElastic

	return Output{
		OutputElastic: &outputElastic,
		Type:          typ,
	}
}

func CreateOutputOutputNewrelic(outputNewrelic OutputNewrelic) Output {
	typ := OutputTypeOutputNewrelic

	return Output{
		OutputNewrelic: &outputNewrelic,
		Type:           typ,
	}
}

func CreateOutputOutputNewrelicEvents(outputNewrelicEvents OutputNewrelicEvents) Output {
	typ := OutputTypeOutputNewrelicEvents

	return Output{
		OutputNewrelicEvents: &outputNewrelicEvents,
		Type:                 typ,
	}
}

func CreateOutputOutputInfluxdb(outputInfluxdb OutputInfluxdb) Output {
	typ := OutputTypeOutputInfluxdb

	return Output{
		OutputInfluxdb: &outputInfluxdb,
		Type:           typ,
	}
}

func CreateOutputOutputCloudwatch(outputCloudwatch OutputCloudwatch) Output {
	typ := OutputTypeOutputCloudwatch

	return Output{
		OutputCloudwatch: &outputCloudwatch,
		Type:             typ,
	}
}

func CreateOutputOutputMinio(outputMinio OutputMinio) Output {
	typ := OutputTypeOutputMinio

	return Output{
		OutputMinio: &outputMinio,
		Type:        typ,
	}
}

func CreateOutputOutputStatsd(outputStatsd OutputStatsd) Output {
	typ := OutputTypeOutputStatsd

	return Output{
		OutputStatsd: &outputStatsd,
		Type:         typ,
	}
}

func CreateOutputOutputStatsdExt(outputStatsdExt OutputStatsdExt) Output {
	typ := OutputTypeOutputStatsdExt

	return Output{
		OutputStatsdExt: &outputStatsdExt,
		Type:            typ,
	}
}

func CreateOutputOutputGraphite(outputGraphite OutputGraphite) Output {
	typ := OutputTypeOutputGraphite

	return Output{
		OutputGraphite: &outputGraphite,
		Type:           typ,
	}
}

func CreateOutputOutputRouter(outputRouter OutputRouter) Output {
	typ := OutputTypeOutputRouter

	return Output{
		OutputRouter: &outputRouter,
		Type:         typ,
	}
}

func CreateOutputOutputSns(outputSns OutputSns) Output {
	typ := OutputTypeOutputSns

	return Output{
		OutputSns: &outputSns,
		Type:      typ,
	}
}

func CreateOutputOutputSqs(outputSqs OutputSqs) Output {
	typ := OutputTypeOutputSqs

	return Output{
		OutputSqs: &outputSqs,
		Type:      typ,
	}
}

func CreateOutputOutputSnmp(outputSnmp OutputSnmp) Output {
	typ := OutputTypeOutputSnmp

	return Output{
		OutputSnmp: &outputSnmp,
		Type:       typ,
	}
}

func CreateOutputOutputSumoLogic(outputSumoLogic OutputSumoLogic) Output {
	typ := OutputTypeOutputSumoLogic

	return Output{
		OutputSumoLogic: &outputSumoLogic,
		Type:            typ,
	}
}

func CreateOutputOutputDatadog(outputDatadog OutputDatadog) Output {
	typ := OutputTypeOutputDatadog

	return Output{
		OutputDatadog: &outputDatadog,
		Type:          typ,
	}
}

func CreateOutputOutputGrafanaCloud(outputGrafanaCloud OutputGrafanaCloud) Output {
	typ := OutputTypeOutputGrafanaCloud

	return Output{
		OutputGrafanaCloud: &outputGrafanaCloud,
		Type:               typ,
	}
}

func CreateOutputOutputLoki(outputLoki OutputLoki) Output {
	typ := OutputTypeOutputLoki

	return Output{
		OutputLoki: &outputLoki,
		Type:       typ,
	}
}

func CreateOutputOutputPrometheus(outputPrometheus OutputPrometheus) Output {
	typ := OutputTypeOutputPrometheus

	return Output{
		OutputPrometheus: &outputPrometheus,
		Type:             typ,
	}
}

func CreateOutputOutputRing(outputRing OutputRing) Output {
	typ := OutputTypeOutputRing

	return Output{
		OutputRing: &outputRing,
		Type:       typ,
	}
}

func CreateOutputOutputOpenTelemetry(outputOpenTelemetry OutputOpenTelemetry) Output {
	typ := OutputTypeOutputOpenTelemetry

	return Output{
		OutputOpenTelemetry: &outputOpenTelemetry,
		Type:                typ,
	}
}

func CreateOutputOutputDataset(outputDataset OutputDataset) Output {
	typ := OutputTypeOutputDataset

	return Output{
		OutputDataset: &outputDataset,
		Type:          typ,
	}
}

func CreateOutputOutputCriblTCP(outputCriblTCP OutputCriblTCP) Output {
	typ := OutputTypeOutputCriblTCP

	return Output{
		OutputCriblTCP: &outputCriblTCP,
		Type:           typ,
	}
}

func CreateOutputOutputCriblHTTP(outputCriblHTTP OutputCriblHTTP) Output {
	typ := OutputTypeOutputCriblHTTP

	return Output{
		OutputCriblHTTP: &outputCriblHTTP,
		Type:            typ,
	}
}

func CreateOutputOutputHumioHec(outputHumioHec OutputHumioHec) Output {
	typ := OutputTypeOutputHumioHec

	return Output{
		OutputHumioHec: &outputHumioHec,
		Type:           typ,
	}
}

func CreateOutputOutputDlS3(outputDlS3 OutputDlS3) Output {
	typ := OutputTypeOutputDlS3

	return Output{
		OutputDlS3: &outputDlS3,
		Type:       typ,
	}
}

func CreateOutputOutputSecurityLake(outputSecurityLake OutputSecurityLake) Output {
	typ := OutputTypeOutputSecurityLake

	return Output{
		OutputSecurityLake: &outputSecurityLake,
		Type:               typ,
	}
}

func (u *Output) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	outputDefault := new(OutputDefault)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputDefault); err == nil {
		u.OutputDefault = outputDefault
		u.Type = OutputTypeOutputDefault
		return nil
	}

	outputWebhook := new(OutputWebhook)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputWebhook); err == nil {
		u.OutputWebhook = outputWebhook
		u.Type = OutputTypeOutputWebhook
		return nil
	}

	outputDevnull := new(OutputDevnull)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputDevnull); err == nil {
		u.OutputDevnull = outputDevnull
		u.Type = OutputTypeOutputDevnull
		return nil
	}

	outputSyslog := new(OutputSyslog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSyslog); err == nil {
		u.OutputSyslog = outputSyslog
		u.Type = OutputTypeOutputSyslog
		return nil
	}

	outputSplunk := new(OutputSplunk)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSplunk); err == nil {
		u.OutputSplunk = outputSplunk
		u.Type = OutputTypeOutputSplunk
		return nil
	}

	outputSplunkLb := new(OutputSplunkLb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSplunkLb); err == nil {
		u.OutputSplunkLb = outputSplunkLb
		u.Type = OutputTypeOutputSplunkLb
		return nil
	}

	outputSplunkHec := new(OutputSplunkHec)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSplunkHec); err == nil {
		u.OutputSplunkHec = outputSplunkHec
		u.Type = OutputTypeOutputSplunkHec
		return nil
	}

	outputTcpjson := new(OutputTcpjson)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputTcpjson); err == nil {
		u.OutputTcpjson = outputTcpjson
		u.Type = OutputTypeOutputTcpjson
		return nil
	}

	outputWavefront := new(OutputWavefront)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputWavefront); err == nil {
		u.OutputWavefront = outputWavefront
		u.Type = OutputTypeOutputWavefront
		return nil
	}

	outputSignalfx := new(OutputSignalfx)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSignalfx); err == nil {
		u.OutputSignalfx = outputSignalfx
		u.Type = OutputTypeOutputSignalfx
		return nil
	}

	outputFilesystem := new(OutputFilesystem)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputFilesystem); err == nil {
		u.OutputFilesystem = outputFilesystem
		u.Type = OutputTypeOutputFilesystem
		return nil
	}

	outputS3 := new(OutputS3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputS3); err == nil {
		u.OutputS3 = outputS3
		u.Type = OutputTypeOutputS3
		return nil
	}

	outputAzureBlob := new(OutputAzureBlob)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputAzureBlob); err == nil {
		u.OutputAzureBlob = outputAzureBlob
		u.Type = OutputTypeOutputAzureBlob
		return nil
	}

	outputAzureLogs := new(OutputAzureLogs)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputAzureLogs); err == nil {
		u.OutputAzureLogs = outputAzureLogs
		u.Type = OutputTypeOutputAzureLogs
		return nil
	}

	outputKinesis := new(OutputKinesis)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputKinesis); err == nil {
		u.OutputKinesis = outputKinesis
		u.Type = OutputTypeOutputKinesis
		return nil
	}

	outputHoneycomb := new(OutputHoneycomb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputHoneycomb); err == nil {
		u.OutputHoneycomb = outputHoneycomb
		u.Type = OutputTypeOutputHoneycomb
		return nil
	}

	outputAzureEventhub := new(OutputAzureEventhub)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputAzureEventhub); err == nil {
		u.OutputAzureEventhub = outputAzureEventhub
		u.Type = OutputTypeOutputAzureEventhub
		return nil
	}

	outputGoogleChronicle := new(OutputGoogleChronicle)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputGoogleChronicle); err == nil {
		u.OutputGoogleChronicle = outputGoogleChronicle
		u.Type = OutputTypeOutputGoogleChronicle
		return nil
	}

	outputGoogleCloudStorage := new(OutputGoogleCloudStorage)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputGoogleCloudStorage); err == nil {
		u.OutputGoogleCloudStorage = outputGoogleCloudStorage
		u.Type = OutputTypeOutputGoogleCloudStorage
		return nil
	}

	outputGoogleCloudLogging := new(OutputGoogleCloudLogging)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputGoogleCloudLogging); err == nil {
		u.OutputGoogleCloudLogging = outputGoogleCloudLogging
		u.Type = OutputTypeOutputGoogleCloudLogging
		return nil
	}

	outputGooglePubsub := new(OutputGooglePubsub)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputGooglePubsub); err == nil {
		u.OutputGooglePubsub = outputGooglePubsub
		u.Type = OutputTypeOutputGooglePubsub
		return nil
	}

	outputKafka := new(OutputKafka)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputKafka); err == nil {
		u.OutputKafka = outputKafka
		u.Type = OutputTypeOutputKafka
		return nil
	}

	outputConfluentCloud := new(OutputConfluentCloud)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputConfluentCloud); err == nil {
		u.OutputConfluentCloud = outputConfluentCloud
		u.Type = OutputTypeOutputConfluentCloud
		return nil
	}

	outputMsk := new(OutputMsk)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputMsk); err == nil {
		u.OutputMsk = outputMsk
		u.Type = OutputTypeOutputMsk
		return nil
	}

	outputElastic := new(OutputElastic)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputElastic); err == nil {
		u.OutputElastic = outputElastic
		u.Type = OutputTypeOutputElastic
		return nil
	}

	outputNewrelic := new(OutputNewrelic)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputNewrelic); err == nil {
		u.OutputNewrelic = outputNewrelic
		u.Type = OutputTypeOutputNewrelic
		return nil
	}

	outputNewrelicEvents := new(OutputNewrelicEvents)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputNewrelicEvents); err == nil {
		u.OutputNewrelicEvents = outputNewrelicEvents
		u.Type = OutputTypeOutputNewrelicEvents
		return nil
	}

	outputInfluxdb := new(OutputInfluxdb)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputInfluxdb); err == nil {
		u.OutputInfluxdb = outputInfluxdb
		u.Type = OutputTypeOutputInfluxdb
		return nil
	}

	outputCloudwatch := new(OutputCloudwatch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputCloudwatch); err == nil {
		u.OutputCloudwatch = outputCloudwatch
		u.Type = OutputTypeOutputCloudwatch
		return nil
	}

	outputMinio := new(OutputMinio)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputMinio); err == nil {
		u.OutputMinio = outputMinio
		u.Type = OutputTypeOutputMinio
		return nil
	}

	outputStatsd := new(OutputStatsd)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputStatsd); err == nil {
		u.OutputStatsd = outputStatsd
		u.Type = OutputTypeOutputStatsd
		return nil
	}

	outputStatsdExt := new(OutputStatsdExt)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputStatsdExt); err == nil {
		u.OutputStatsdExt = outputStatsdExt
		u.Type = OutputTypeOutputStatsdExt
		return nil
	}

	outputGraphite := new(OutputGraphite)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputGraphite); err == nil {
		u.OutputGraphite = outputGraphite
		u.Type = OutputTypeOutputGraphite
		return nil
	}

	outputRouter := new(OutputRouter)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputRouter); err == nil {
		u.OutputRouter = outputRouter
		u.Type = OutputTypeOutputRouter
		return nil
	}

	outputSns := new(OutputSns)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSns); err == nil {
		u.OutputSns = outputSns
		u.Type = OutputTypeOutputSns
		return nil
	}

	outputSqs := new(OutputSqs)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSqs); err == nil {
		u.OutputSqs = outputSqs
		u.Type = OutputTypeOutputSqs
		return nil
	}

	outputSnmp := new(OutputSnmp)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSnmp); err == nil {
		u.OutputSnmp = outputSnmp
		u.Type = OutputTypeOutputSnmp
		return nil
	}

	outputSumoLogic := new(OutputSumoLogic)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSumoLogic); err == nil {
		u.OutputSumoLogic = outputSumoLogic
		u.Type = OutputTypeOutputSumoLogic
		return nil
	}

	outputDatadog := new(OutputDatadog)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputDatadog); err == nil {
		u.OutputDatadog = outputDatadog
		u.Type = OutputTypeOutputDatadog
		return nil
	}

	outputGrafanaCloud := new(OutputGrafanaCloud)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputGrafanaCloud); err == nil {
		u.OutputGrafanaCloud = outputGrafanaCloud
		u.Type = OutputTypeOutputGrafanaCloud
		return nil
	}

	outputLoki := new(OutputLoki)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputLoki); err == nil {
		u.OutputLoki = outputLoki
		u.Type = OutputTypeOutputLoki
		return nil
	}

	outputPrometheus := new(OutputPrometheus)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputPrometheus); err == nil {
		u.OutputPrometheus = outputPrometheus
		u.Type = OutputTypeOutputPrometheus
		return nil
	}

	outputRing := new(OutputRing)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputRing); err == nil {
		u.OutputRing = outputRing
		u.Type = OutputTypeOutputRing
		return nil
	}

	outputOpenTelemetry := new(OutputOpenTelemetry)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputOpenTelemetry); err == nil {
		u.OutputOpenTelemetry = outputOpenTelemetry
		u.Type = OutputTypeOutputOpenTelemetry
		return nil
	}

	outputDataset := new(OutputDataset)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputDataset); err == nil {
		u.OutputDataset = outputDataset
		u.Type = OutputTypeOutputDataset
		return nil
	}

	outputCriblTCP := new(OutputCriblTCP)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputCriblTCP); err == nil {
		u.OutputCriblTCP = outputCriblTCP
		u.Type = OutputTypeOutputCriblTCP
		return nil
	}

	outputCriblHTTP := new(OutputCriblHTTP)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputCriblHTTP); err == nil {
		u.OutputCriblHTTP = outputCriblHTTP
		u.Type = OutputTypeOutputCriblHTTP
		return nil
	}

	outputHumioHec := new(OutputHumioHec)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputHumioHec); err == nil {
		u.OutputHumioHec = outputHumioHec
		u.Type = OutputTypeOutputHumioHec
		return nil
	}

	outputDlS3 := new(OutputDlS3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputDlS3); err == nil {
		u.OutputDlS3 = outputDlS3
		u.Type = OutputTypeOutputDlS3
		return nil
	}

	outputSecurityLake := new(OutputSecurityLake)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&outputSecurityLake); err == nil {
		u.OutputSecurityLake = outputSecurityLake
		u.Type = OutputTypeOutputSecurityLake
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Output) MarshalJSON() ([]byte, error) {
	if u.OutputDefault != nil {
		return json.Marshal(u.OutputDefault)
	}

	if u.OutputWebhook != nil {
		return json.Marshal(u.OutputWebhook)
	}

	if u.OutputDevnull != nil {
		return json.Marshal(u.OutputDevnull)
	}

	if u.OutputSyslog != nil {
		return json.Marshal(u.OutputSyslog)
	}

	if u.OutputSplunk != nil {
		return json.Marshal(u.OutputSplunk)
	}

	if u.OutputSplunkLb != nil {
		return json.Marshal(u.OutputSplunkLb)
	}

	if u.OutputSplunkHec != nil {
		return json.Marshal(u.OutputSplunkHec)
	}

	if u.OutputTcpjson != nil {
		return json.Marshal(u.OutputTcpjson)
	}

	if u.OutputWavefront != nil {
		return json.Marshal(u.OutputWavefront)
	}

	if u.OutputSignalfx != nil {
		return json.Marshal(u.OutputSignalfx)
	}

	if u.OutputFilesystem != nil {
		return json.Marshal(u.OutputFilesystem)
	}

	if u.OutputS3 != nil {
		return json.Marshal(u.OutputS3)
	}

	if u.OutputAzureBlob != nil {
		return json.Marshal(u.OutputAzureBlob)
	}

	if u.OutputAzureLogs != nil {
		return json.Marshal(u.OutputAzureLogs)
	}

	if u.OutputKinesis != nil {
		return json.Marshal(u.OutputKinesis)
	}

	if u.OutputHoneycomb != nil {
		return json.Marshal(u.OutputHoneycomb)
	}

	if u.OutputAzureEventhub != nil {
		return json.Marshal(u.OutputAzureEventhub)
	}

	if u.OutputGoogleChronicle != nil {
		return json.Marshal(u.OutputGoogleChronicle)
	}

	if u.OutputGoogleCloudStorage != nil {
		return json.Marshal(u.OutputGoogleCloudStorage)
	}

	if u.OutputGoogleCloudLogging != nil {
		return json.Marshal(u.OutputGoogleCloudLogging)
	}

	if u.OutputGooglePubsub != nil {
		return json.Marshal(u.OutputGooglePubsub)
	}

	if u.OutputKafka != nil {
		return json.Marshal(u.OutputKafka)
	}

	if u.OutputConfluentCloud != nil {
		return json.Marshal(u.OutputConfluentCloud)
	}

	if u.OutputMsk != nil {
		return json.Marshal(u.OutputMsk)
	}

	if u.OutputElastic != nil {
		return json.Marshal(u.OutputElastic)
	}

	if u.OutputNewrelic != nil {
		return json.Marshal(u.OutputNewrelic)
	}

	if u.OutputNewrelicEvents != nil {
		return json.Marshal(u.OutputNewrelicEvents)
	}

	if u.OutputInfluxdb != nil {
		return json.Marshal(u.OutputInfluxdb)
	}

	if u.OutputCloudwatch != nil {
		return json.Marshal(u.OutputCloudwatch)
	}

	if u.OutputMinio != nil {
		return json.Marshal(u.OutputMinio)
	}

	if u.OutputStatsd != nil {
		return json.Marshal(u.OutputStatsd)
	}

	if u.OutputStatsdExt != nil {
		return json.Marshal(u.OutputStatsdExt)
	}

	if u.OutputGraphite != nil {
		return json.Marshal(u.OutputGraphite)
	}

	if u.OutputRouter != nil {
		return json.Marshal(u.OutputRouter)
	}

	if u.OutputSns != nil {
		return json.Marshal(u.OutputSns)
	}

	if u.OutputSqs != nil {
		return json.Marshal(u.OutputSqs)
	}

	if u.OutputSnmp != nil {
		return json.Marshal(u.OutputSnmp)
	}

	if u.OutputSumoLogic != nil {
		return json.Marshal(u.OutputSumoLogic)
	}

	if u.OutputDatadog != nil {
		return json.Marshal(u.OutputDatadog)
	}

	if u.OutputGrafanaCloud != nil {
		return json.Marshal(u.OutputGrafanaCloud)
	}

	if u.OutputLoki != nil {
		return json.Marshal(u.OutputLoki)
	}

	if u.OutputPrometheus != nil {
		return json.Marshal(u.OutputPrometheus)
	}

	if u.OutputRing != nil {
		return json.Marshal(u.OutputRing)
	}

	if u.OutputOpenTelemetry != nil {
		return json.Marshal(u.OutputOpenTelemetry)
	}

	if u.OutputDataset != nil {
		return json.Marshal(u.OutputDataset)
	}

	if u.OutputCriblTCP != nil {
		return json.Marshal(u.OutputCriblTCP)
	}

	if u.OutputCriblHTTP != nil {
		return json.Marshal(u.OutputCriblHTTP)
	}

	if u.OutputHumioHec != nil {
		return json.Marshal(u.OutputHumioHec)
	}

	if u.OutputDlS3 != nil {
		return json.Marshal(u.OutputDlS3)
	}

	if u.OutputSecurityLake != nil {
		return json.Marshal(u.OutputSecurityLake)
	}

	return nil, nil
}
