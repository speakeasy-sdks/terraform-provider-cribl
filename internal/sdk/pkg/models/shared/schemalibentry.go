// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// SchemaLibEntry - New Schema object
type SchemaLibEntry struct {
	// Brief description of this schema. Optional.
	Description *string `json:"description,omitempty"`
	// Schema ID.
	ID string `json:"id"`
	// JSON schema matching standards of draft version 2019-09.
	Schema string `json:"schema"`

	AdditionalProperties interface{} `json:"-"`
}
type _SchemaLibEntry SchemaLibEntry

func (c *SchemaLibEntry) UnmarshalJSON(bs []byte) error {
	data := _SchemaLibEntry{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SchemaLibEntry(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "description")
	delete(additionalFields, "id")
	delete(additionalFields, "schema")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SchemaLibEntry) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SchemaLibEntry(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
