// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// ScriptLibEntry - New Script object
type ScriptLibEntry struct {
	// Arguments to pass when executing this script
	Args []string `json:"args,omitempty"`
	// Command to execute for this script
	Command string `json:"command"`
	// Brief description of this script. Optional.
	Description *string `json:"description,omitempty"`
	// Extra environment variables to set when executing script
	Env map[string]string `json:"env,omitempty"`
	ID  string            `json:"id"`

	AdditionalProperties interface{} `json:"-"`
}
type _ScriptLibEntry ScriptLibEntry

func (c *ScriptLibEntry) UnmarshalJSON(bs []byte) error {
	data := _ScriptLibEntry{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ScriptLibEntry(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "args")
	delete(additionalFields, "command")
	delete(additionalFields, "description")
	delete(additionalFields, "env")
	delete(additionalFields, "id")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ScriptLibEntry) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ScriptLibEntry(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
