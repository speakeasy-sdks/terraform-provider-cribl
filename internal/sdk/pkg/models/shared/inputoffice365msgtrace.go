// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputOffice365MsgTraceAuthenticationMethod - Select authentication method.
type InputOffice365MsgTraceAuthenticationMethod string

const (
	InputOffice365MsgTraceAuthenticationMethodOauthCert   InputOffice365MsgTraceAuthenticationMethod = "oauthCert"
	InputOffice365MsgTraceAuthenticationMethodSecret      InputOffice365MsgTraceAuthenticationMethod = "secret"
	InputOffice365MsgTraceAuthenticationMethodOauth       InputOffice365MsgTraceAuthenticationMethod = "oauth"
	InputOffice365MsgTraceAuthenticationMethodOauthSecret InputOffice365MsgTraceAuthenticationMethod = "oauthSecret"
)

func (e InputOffice365MsgTraceAuthenticationMethod) ToPointer() *InputOffice365MsgTraceAuthenticationMethod {
	return &e
}

func (e *InputOffice365MsgTraceAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauthCert":
		fallthrough
	case "secret":
		fallthrough
	case "oauth":
		fallthrough
	case "oauthSecret":
		*e = InputOffice365MsgTraceAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceAuthenticationMethod: %v", v)
	}
}

type InputOffice365MsgTraceCertOptions struct {
	// Path to the certificate to use. Certificate should be in PEM format. Can reference $ENV_VARS.
	CertPath string `json:"certPath"`
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	// Passphrase to use to decrypt the private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path to the private key to use. Key should be in PEM format. Can reference $ENV_VARS.
	PrivKeyPath string `json:"privKeyPath"`
}

type InputOffice365MsgTraceConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

// InputOffice365MsgTraceLogLevel - Log Level (verbosity) for collection runtime behavior.
type InputOffice365MsgTraceLogLevel string

const (
	InputOffice365MsgTraceLogLevelError InputOffice365MsgTraceLogLevel = "error"
	InputOffice365MsgTraceLogLevelWarn  InputOffice365MsgTraceLogLevel = "warn"
	InputOffice365MsgTraceLogLevelInfo  InputOffice365MsgTraceLogLevel = "info"
	InputOffice365MsgTraceLogLevelDebug InputOffice365MsgTraceLogLevel = "debug"
)

func (e InputOffice365MsgTraceLogLevel) ToPointer() *InputOffice365MsgTraceLogLevel {
	return &e
}

func (e *InputOffice365MsgTraceLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		*e = InputOffice365MsgTraceLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceLogLevel: %v", v)
	}
}

type InputOffice365MsgTraceMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputOffice365MsgTracePqCompression - Codec to use to compress the persisted data.
type InputOffice365MsgTracePqCompression string

const (
	InputOffice365MsgTracePqCompressionNone InputOffice365MsgTracePqCompression = "none"
	InputOffice365MsgTracePqCompressionGzip InputOffice365MsgTracePqCompression = "gzip"
)

func (e InputOffice365MsgTracePqCompression) ToPointer() *InputOffice365MsgTracePqCompression {
	return &e
}

func (e *InputOffice365MsgTracePqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputOffice365MsgTracePqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTracePqCompression: %v", v)
	}
}

// InputOffice365MsgTracePqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputOffice365MsgTracePqMode string

const (
	InputOffice365MsgTracePqModeSmart  InputOffice365MsgTracePqMode = "smart"
	InputOffice365MsgTracePqModeAlways InputOffice365MsgTracePqMode = "always"
)

func (e InputOffice365MsgTracePqMode) ToPointer() *InputOffice365MsgTracePqMode {
	return &e
}

func (e *InputOffice365MsgTracePqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputOffice365MsgTracePqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTracePqMode: %v", v)
	}
}

type InputOffice365MsgTracePq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputOffice365MsgTracePqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputOffice365MsgTracePqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

type InputOffice365MsgTraceInputType string

const (
	InputOffice365MsgTraceInputTypeSplunk            InputOffice365MsgTraceInputType = "splunk"
	InputOffice365MsgTraceInputTypeSplunkHec         InputOffice365MsgTraceInputType = "splunk_hec"
	InputOffice365MsgTraceInputTypeSyslog            InputOffice365MsgTraceInputType = "syslog"
	InputOffice365MsgTraceInputTypeTcpjson           InputOffice365MsgTraceInputType = "tcpjson"
	InputOffice365MsgTraceInputTypeGrafana           InputOffice365MsgTraceInputType = "grafana"
	InputOffice365MsgTraceInputTypeLoki              InputOffice365MsgTraceInputType = "loki"
	InputOffice365MsgTraceInputTypeHTTP              InputOffice365MsgTraceInputType = "http"
	InputOffice365MsgTraceInputTypeHTTPRaw           InputOffice365MsgTraceInputType = "http_raw"
	InputOffice365MsgTraceInputTypeFirehose          InputOffice365MsgTraceInputType = "firehose"
	InputOffice365MsgTraceInputTypeElastic           InputOffice365MsgTraceInputType = "elastic"
	InputOffice365MsgTraceInputTypeKafka             InputOffice365MsgTraceInputType = "kafka"
	InputOffice365MsgTraceInputTypeConfluentCloud    InputOffice365MsgTraceInputType = "confluent_cloud"
	InputOffice365MsgTraceInputTypeMsk               InputOffice365MsgTraceInputType = "msk"
	InputOffice365MsgTraceInputTypeKinesis           InputOffice365MsgTraceInputType = "kinesis"
	InputOffice365MsgTraceInputTypeEventhub          InputOffice365MsgTraceInputType = "eventhub"
	InputOffice365MsgTraceInputTypeAzureBlob         InputOffice365MsgTraceInputType = "azure_blob"
	InputOffice365MsgTraceInputTypeMetrics           InputOffice365MsgTraceInputType = "metrics"
	InputOffice365MsgTraceInputTypeSqs               InputOffice365MsgTraceInputType = "sqs"
	InputOffice365MsgTraceInputTypeS3                InputOffice365MsgTraceInputType = "s3"
	InputOffice365MsgTraceInputTypeSnmp              InputOffice365MsgTraceInputType = "snmp"
	InputOffice365MsgTraceInputTypeCrowdstrike       InputOffice365MsgTraceInputType = "crowdstrike"
	InputOffice365MsgTraceInputTypeTCP               InputOffice365MsgTraceInputType = "tcp"
	InputOffice365MsgTraceInputTypeRawUDP            InputOffice365MsgTraceInputType = "raw_udp"
	InputOffice365MsgTraceInputTypeOffice365Service  InputOffice365MsgTraceInputType = "office365_service"
	InputOffice365MsgTraceInputTypeOffice365Mgmt     InputOffice365MsgTraceInputType = "office365_mgmt"
	InputOffice365MsgTraceInputTypeOffice365MsgTrace InputOffice365MsgTraceInputType = "office365_msg_trace"
	InputOffice365MsgTraceInputTypePrometheus        InputOffice365MsgTraceInputType = "prometheus"
	InputOffice365MsgTraceInputTypeEdgePrometheus    InputOffice365MsgTraceInputType = "edge_prometheus"
	InputOffice365MsgTraceInputTypePrometheusRw      InputOffice365MsgTraceInputType = "prometheus_rw"
	InputOffice365MsgTraceInputTypeAppscope          InputOffice365MsgTraceInputType = "appscope"
	InputOffice365MsgTraceInputTypeGooglePubsub      InputOffice365MsgTraceInputType = "google_pubsub"
	InputOffice365MsgTraceInputTypeOpenTelemetry     InputOffice365MsgTraceInputType = "open_telemetry"
	InputOffice365MsgTraceInputTypeDatadogAgent      InputOffice365MsgTraceInputType = "datadog_agent"
	InputOffice365MsgTraceInputTypeWef               InputOffice365MsgTraceInputType = "wef"
	InputOffice365MsgTraceInputTypeDatagen           InputOffice365MsgTraceInputType = "datagen"
	InputOffice365MsgTraceInputTypeCribl             InputOffice365MsgTraceInputType = "cribl"
	InputOffice365MsgTraceInputTypeCriblmetrics      InputOffice365MsgTraceInputType = "criblmetrics"
	InputOffice365MsgTraceInputTypeCriblHTTP         InputOffice365MsgTraceInputType = "cribl_http"
	InputOffice365MsgTraceInputTypeCriblTCP          InputOffice365MsgTraceInputType = "cribl_tcp"
	InputOffice365MsgTraceInputTypeWinEventLogs      InputOffice365MsgTraceInputType = "win_event_logs"
	InputOffice365MsgTraceInputTypeSystemMetrics     InputOffice365MsgTraceInputType = "system_metrics"
	InputOffice365MsgTraceInputTypeWindowsMetrics    InputOffice365MsgTraceInputType = "windows_metrics"
	InputOffice365MsgTraceInputTypeSystemState       InputOffice365MsgTraceInputType = "system_state"
	InputOffice365MsgTraceInputTypeKubeMetrics       InputOffice365MsgTraceInputType = "kube_metrics"
	InputOffice365MsgTraceInputTypeKubeLogs          InputOffice365MsgTraceInputType = "kube_logs"
	InputOffice365MsgTraceInputTypeKubeEvents        InputOffice365MsgTraceInputType = "kube_events"
	InputOffice365MsgTraceInputTypeExec              InputOffice365MsgTraceInputType = "exec"
	InputOffice365MsgTraceInputTypeSplunkSearch      InputOffice365MsgTraceInputType = "splunk_search"
	InputOffice365MsgTraceInputTypeFile              InputOffice365MsgTraceInputType = "file"
	InputOffice365MsgTraceInputTypeJournalFiles      InputOffice365MsgTraceInputType = "journal_files"
)

func (e InputOffice365MsgTraceInputType) ToPointer() *InputOffice365MsgTraceInputType {
	return &e
}

func (e *InputOffice365MsgTraceInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		*e = InputOffice365MsgTraceInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceInputType: %v", v)
	}
}

type InputOffice365MsgTrace struct {
	// Select authentication method.
	AuthType    *InputOffice365MsgTraceAuthenticationMethod `json:"authType,omitempty"`
	CertOptions *InputOffice365MsgTraceCertOptions          `json:"certOptions,omitempty"`
	// client_id to pass in the OAuth request parameter.
	ClientID *string `json:"clientId,omitempty"`
	// client_secret to pass in the OAuth request parameter.
	ClientSecret *string `json:"clientSecret,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputOffice365MsgTraceConnections `json:"connections,omitempty"`
	// Select (or create) a secret that references your credentials.
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// Disables time filtering of events when a date range is specified.
	DisableTimeFilter *bool `json:"disableTimeFilter,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Backward offset for the search range's tail. (E.g.: -2h@h) Message Trace data is delayed; this parameter (with Date range start) compensates for delay and gaps.
	EndDate *string `json:"endDate,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// How often (in minutes) to run the report. Must divide evenly into 60 minutes to create a predictable schedule, or Save will fail.
	Interval int64 `json:"interval"`
	// Maximum time the job is allowed to run (e.g., 30, 45s or 15m). Units are seconds, if not specified. Enter 0 for unlimited time.
	JobTimeout *string `json:"jobTimeout,omitempty"`
	// How often workers should check in with the scheduler to keep job subscription alive
	KeepAliveTime *int64 `json:"keepAliveTime,omitempty"`
	// Log Level (verbosity) for collection runtime behavior.
	LogLevel *InputOffice365MsgTraceLogLevel `json:"logLevel,omitempty"`
	// The number of Keep Alive Time periods before an inactive worker will have its job subscription revoked.
	MaxMissedKeepAlives *int64 `json:"maxMissedKeepAlives,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputOffice365MsgTraceMetadata `json:"metadata,omitempty"`
	// Password to run Message Trace API call.
	Password *string `json:"password,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string                   `json:"pipeline,omitempty"`
	Pq       *InputOffice365MsgTracePq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Resource to pass in the OAuth request parameter.
	Resource *string `json:"resource,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Backward offset for the search range's head. (E.g.: -3h@h) Message Trace data is delayed; this parameter (with Date range end) compensates for delay and gaps.
	StartDate *string `json:"startDate,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Directory ID (tenant identifier) in Azure Active Directory.
	TenantID *string `json:"tenantId,omitempty"`
	// Select (or create) a secret that references your client_secret to pass in the OAuth request parameter.
	TextSecret *string `json:"textSecret,omitempty"`
	// HTTP request inactivity timeout. Maximum is 2400 (40 minutes); enter 0 to wait indefinitely.
	Timeout *int64                           `json:"timeout,omitempty"`
	Type    *InputOffice365MsgTraceInputType `json:"type,omitempty"`
	// URL to use when retrieving report data.
	URL string `json:"url"`
	// Username to run Message Trace API call.
	Username *string `json:"username,omitempty"`
}
