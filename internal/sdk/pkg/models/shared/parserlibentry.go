// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ParserLibEntryType - Parser/Formatter type to use.
type ParserLibEntryType string

const (
	ParserLibEntryTypeCsv   ParserLibEntryType = "csv"
	ParserLibEntryTypeElff  ParserLibEntryType = "elff"
	ParserLibEntryTypeClf   ParserLibEntryType = "clf"
	ParserLibEntryTypeKvp   ParserLibEntryType = "kvp"
	ParserLibEntryTypeJSON  ParserLibEntryType = "json"
	ParserLibEntryTypeDelim ParserLibEntryType = "delim"
	ParserLibEntryTypeRegex ParserLibEntryType = "regex"
	ParserLibEntryTypeGrok  ParserLibEntryType = "grok"
)

func (e ParserLibEntryType) ToPointer() *ParserLibEntryType {
	return &e
}

func (e *ParserLibEntryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "csv":
		fallthrough
	case "elff":
		fallthrough
	case "clf":
		fallthrough
	case "kvp":
		fallthrough
	case "json":
		fallthrough
	case "delim":
		fallthrough
	case "regex":
		fallthrough
	case "grok":
		*e = ParserLibEntryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParserLibEntryType: %v", v)
	}
}

// ParserLibEntry - New Parser object
type ParserLibEntry struct {
	// Brief description of this parser. Optional.
	Description *string `json:"description,omitempty"`
	ID          string  `json:"id"`
	Lib         *string `json:"lib,omitempty"`
	// One or more tags related to this parser. Optional.
	Tags *string `json:"tags,omitempty"`
	// Parser/Formatter type to use.
	Type ParserLibEntryType `json:"type"`

	AdditionalProperties interface{} `json:"-"`
}
type _ParserLibEntry ParserLibEntry

func (c *ParserLibEntry) UnmarshalJSON(bs []byte) error {
	data := _ParserLibEntry{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = ParserLibEntry(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "description")
	delete(additionalFields, "id")
	delete(additionalFields, "lib")
	delete(additionalFields, "tags")
	delete(additionalFields, "type")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c ParserLibEntry) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_ParserLibEntry(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
