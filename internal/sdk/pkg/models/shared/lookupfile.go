// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type LookupFile2 struct {
	// File content.
	Content *string `json:"content,omitempty"`
	// Brief description of this lookup. Optional.
	Description *string `json:"description,omitempty"`
	// Filename with the lookup table. Required.
	ID string `json:"id"`
	// File size. Optional.
	Size *int64 `json:"size,omitempty"`
	// One or more tags related to this lookup. Optional.
	Tags *string `json:"tags,omitempty"`
}

// LookupFile1FileInfo - Uploaded file information
type LookupFile1FileInfo struct {
	Filename string `json:"filename"`
}

type LookupFile1 struct {
	// Brief description of this lookup. Optional.
	Description *string `json:"description,omitempty"`
	// Uploaded file information
	FileInfo *LookupFile1FileInfo `json:"fileInfo,omitempty"`
	// Filename with the lookup table. Required.
	ID string `json:"id"`
	// File size. Optional.
	Size *int64 `json:"size,omitempty"`
	// One or more tags related to this lookup. Optional.
	Tags *string `json:"tags,omitempty"`
}

type LookupFileType string

const (
	LookupFileTypeLookupFile1 LookupFileType = "LookupFile_1"
	LookupFileTypeLookupFile2 LookupFileType = "LookupFile_2"
)

type LookupFile struct {
	LookupFile1 *LookupFile1
	LookupFile2 *LookupFile2

	Type LookupFileType
}

func CreateLookupFileLookupFile1(lookupFile1 LookupFile1) LookupFile {
	typ := LookupFileTypeLookupFile1

	return LookupFile{
		LookupFile1: &lookupFile1,
		Type:        typ,
	}
}

func CreateLookupFileLookupFile2(lookupFile2 LookupFile2) LookupFile {
	typ := LookupFileTypeLookupFile2

	return LookupFile{
		LookupFile2: &lookupFile2,
		Type:        typ,
	}
}

func (u *LookupFile) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	lookupFile1 := new(LookupFile1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&lookupFile1); err == nil {
		u.LookupFile1 = lookupFile1
		u.Type = LookupFileTypeLookupFile1
		return nil
	}

	lookupFile2 := new(LookupFile2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&lookupFile2); err == nil {
		u.LookupFile2 = lookupFile2
		u.Type = LookupFileTypeLookupFile2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u LookupFile) MarshalJSON() ([]byte, error) {
	if u.LookupFile1 != nil {
		return json.Marshal(u.LookupFile1)
	}

	if u.LookupFile2 != nil {
		return json.Marshal(u.LookupFile2)
	}

	return nil, nil
}
