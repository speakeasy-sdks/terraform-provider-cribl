// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
)

// DataSample - New DataSample object
type DataSample struct {
	// Brief description of this sample file. Optional.
	Description *string `json:"description,omitempty"`
	ID          string  `json:"id"`
	// Select a pipeline to associate with sample with. Select GLOBAL if not sure. Deprecated.
	PipelineID *string `json:"pipelineId,omitempty"`
	// Filename to save the sample as. Required.
	SampleName string `json:"sampleName"`
	// One or more tags related to this sample file. Optional.
	Tags *string `json:"tags,omitempty"`
	// Time to live for the sample, the TTL is reset after each use of the sample. Leave empty to never expire.
	TTL *int64 `json:"ttl,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _DataSample DataSample

func (c *DataSample) UnmarshalJSON(bs []byte) error {
	data := _DataSample{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = DataSample(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "description")
	delete(additionalFields, "id")
	delete(additionalFields, "pipelineId")
	delete(additionalFields, "sampleName")
	delete(additionalFields, "tags")
	delete(additionalFields, "ttl")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c DataSample) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_DataSample(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
