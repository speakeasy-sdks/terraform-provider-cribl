// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputGooglePubsubConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

// InputGooglePubsubAuthenticationMethod - Google authentication method. Choose Auto to use environment variables PUBSUB_PROJECT and PUBSUB_CREDENTIALS..
type InputGooglePubsubAuthenticationMethod string

const (
	InputGooglePubsubAuthenticationMethodSecret InputGooglePubsubAuthenticationMethod = "secret"
	InputGooglePubsubAuthenticationMethodManual InputGooglePubsubAuthenticationMethod = "manual"
)

func (e InputGooglePubsubAuthenticationMethod) ToPointer() *InputGooglePubsubAuthenticationMethod {
	return &e
}

func (e *InputGooglePubsubAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputGooglePubsubAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGooglePubsubAuthenticationMethod: %v", v)
	}
}

type InputGooglePubsubMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

// InputGooglePubsubPqCompression - Codec to use to compress the persisted data.
type InputGooglePubsubPqCompression string

const (
	InputGooglePubsubPqCompressionNone InputGooglePubsubPqCompression = "none"
	InputGooglePubsubPqCompressionGzip InputGooglePubsubPqCompression = "gzip"
)

func (e InputGooglePubsubPqCompression) ToPointer() *InputGooglePubsubPqCompression {
	return &e
}

func (e *InputGooglePubsubPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputGooglePubsubPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGooglePubsubPqCompression: %v", v)
	}
}

// InputGooglePubsubPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputGooglePubsubPqMode string

const (
	InputGooglePubsubPqModeSmart  InputGooglePubsubPqMode = "smart"
	InputGooglePubsubPqModeAlways InputGooglePubsubPqMode = "always"
)

func (e InputGooglePubsubPqMode) ToPointer() *InputGooglePubsubPqMode {
	return &e
}

func (e *InputGooglePubsubPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputGooglePubsubPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGooglePubsubPqMode: %v", v)
	}
}

type InputGooglePubsubPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputGooglePubsubPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputGooglePubsubPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

// InputGooglePubsubRegion - Region to retrieve messages from. Select 'default' to allow Google to auto-select the nearest region. When using ordered delivery, the selected region must be allowed by message storage policy.
type InputGooglePubsubRegion string

const (
	InputGooglePubsubRegionPubsubGoogleapisCom                       InputGooglePubsubRegion = "pubsub.googleapis.com"
	InputGooglePubsubRegionUsEast1PubsubGoogleapisCom                InputGooglePubsubRegion = "us-east1-pubsub.googleapis.com"
	InputGooglePubsubRegionUsEast4PubsubGoogleapisCom                InputGooglePubsubRegion = "us-east4-pubsub.googleapis.com"
	InputGooglePubsubRegionUsCentral1PubsubGoogleapisCom             InputGooglePubsubRegion = "us-central1-pubsub.googleapis.com"
	InputGooglePubsubRegionUsCentral2PubsubGoogleapisCom             InputGooglePubsubRegion = "us-central2-pubsub.googleapis.com"
	InputGooglePubsubRegionUsWest1PubsubGoogleapisCom                InputGooglePubsubRegion = "us-west1-pubsub.googleapis.com"
	InputGooglePubsubRegionUsWest2PubsubGoogleapisCom                InputGooglePubsubRegion = "us-west2-pubsub.googleapis.com"
	InputGooglePubsubRegionUsWest3PubsubGoogleapisCom                InputGooglePubsubRegion = "us-west3-pubsub.googleapis.com"
	InputGooglePubsubRegionSouthamericaEast1PubsubGoogleapisCom      InputGooglePubsubRegion = "southamerica-east1-pubsub.googleapis.com"
	InputGooglePubsubRegionNorthamericaNortheast1PubsubGoogleapisCom InputGooglePubsubRegion = "northamerica-northeast1-pubsub.googleapis.com"
	InputGooglePubsubRegionEuropeWest6PubsubGoogleapisCom            InputGooglePubsubRegion = "europe-west6-pubsub.googleapis.com"
	InputGooglePubsubRegionEuropeWest4PubsubGoogleapisCom            InputGooglePubsubRegion = "europe-west4-pubsub.googleapis.com"
	InputGooglePubsubRegionEuropeWest3PubsubGoogleapisCom            InputGooglePubsubRegion = "europe-west3-pubsub.googleapis.com"
	InputGooglePubsubRegionEuropeWest2PubsubGoogleapisCom            InputGooglePubsubRegion = "europe-west2-pubsub.googleapis.com"
	InputGooglePubsubRegionEuropeWest1PubsubGoogleapisCom            InputGooglePubsubRegion = "europe-west1-pubsub.googleapis.com"
	InputGooglePubsubRegionEuropeNorth1PubsubGoogleapisCom           InputGooglePubsubRegion = "europe-north1-pubsub.googleapis.com"
	InputGooglePubsubRegionAustraliaSoutheast1PubsubGoogleapisCom    InputGooglePubsubRegion = "australia-southeast1-pubsub.googleapis.com"
	InputGooglePubsubRegionAsiaSoutheast1PubsubGoogleapisCom         InputGooglePubsubRegion = "asia-southeast1-pubsub.googleapis.com"
	InputGooglePubsubRegionAsiaSouth1PubsubGoogleapisCom             InputGooglePubsubRegion = "asia-south1-pubsub.googleapis.com"
	InputGooglePubsubRegionAsiaNortheast3PubsubGoogleapisCom         InputGooglePubsubRegion = "asia-northeast3-pubsub.googleapis.com"
	InputGooglePubsubRegionAsiaNortheast2PubsubGoogleapisCom         InputGooglePubsubRegion = "asia-northeast2-pubsub.googleapis.com"
	InputGooglePubsubRegionAsiaNortheast1PubsubGoogleapisCom         InputGooglePubsubRegion = "asia-northeast1-pubsub.googleapis.com"
	InputGooglePubsubRegionAsiaEast2PubsubGoogleapisCom              InputGooglePubsubRegion = "asia-east2-pubsub.googleapis.com"
	InputGooglePubsubRegionAsiaEast1PubsubGoogleapisCom              InputGooglePubsubRegion = "asia-east1-pubsub.googleapis.com"
)

func (e InputGooglePubsubRegion) ToPointer() *InputGooglePubsubRegion {
	return &e
}

func (e *InputGooglePubsubRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pubsub.googleapis.com":
		fallthrough
	case "us-east1-pubsub.googleapis.com":
		fallthrough
	case "us-east4-pubsub.googleapis.com":
		fallthrough
	case "us-central1-pubsub.googleapis.com":
		fallthrough
	case "us-central2-pubsub.googleapis.com":
		fallthrough
	case "us-west1-pubsub.googleapis.com":
		fallthrough
	case "us-west2-pubsub.googleapis.com":
		fallthrough
	case "us-west3-pubsub.googleapis.com":
		fallthrough
	case "southamerica-east1-pubsub.googleapis.com":
		fallthrough
	case "northamerica-northeast1-pubsub.googleapis.com":
		fallthrough
	case "europe-west6-pubsub.googleapis.com":
		fallthrough
	case "europe-west4-pubsub.googleapis.com":
		fallthrough
	case "europe-west3-pubsub.googleapis.com":
		fallthrough
	case "europe-west2-pubsub.googleapis.com":
		fallthrough
	case "europe-west1-pubsub.googleapis.com":
		fallthrough
	case "europe-north1-pubsub.googleapis.com":
		fallthrough
	case "australia-southeast1-pubsub.googleapis.com":
		fallthrough
	case "asia-southeast1-pubsub.googleapis.com":
		fallthrough
	case "asia-south1-pubsub.googleapis.com":
		fallthrough
	case "asia-northeast3-pubsub.googleapis.com":
		fallthrough
	case "asia-northeast2-pubsub.googleapis.com":
		fallthrough
	case "asia-northeast1-pubsub.googleapis.com":
		fallthrough
	case "asia-east2-pubsub.googleapis.com":
		fallthrough
	case "asia-east1-pubsub.googleapis.com":
		*e = InputGooglePubsubRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGooglePubsubRegion: %v", v)
	}
}

type InputGooglePubsubType string

const (
	InputGooglePubsubTypeGooglePubsub InputGooglePubsubType = "google_pubsub"
)

func (e InputGooglePubsubType) ToPointer() *InputGooglePubsubType {
	return &e
}

func (e *InputGooglePubsubType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "google_pubsub":
		*e = InputGooglePubsubType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGooglePubsubType: %v", v)
	}
}

type InputGooglePubsub struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputGooglePubsubConnections `json:"connections,omitempty"`
	// If enabled, create subscription if it does not exist
	CreateSubscription *bool `json:"createSubscription,omitempty"`
	// If enabled, create topic if it does not exist
	CreateTopic *bool `json:"createTopic,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Google authentication method. Choose Auto to use environment variables PUBSUB_PROJECT and PUBSUB_CREDENTIALS..
	GoogleAuthMethod *InputGooglePubsubAuthenticationMethod `json:"googleAuthMethod,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// If Destination exerts backpressure, this setting limits how many inbound events Stream will queue for processing before it stops retrieving events.
	MaxBacklog *int64 `json:"maxBacklog,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputGooglePubsubMetadata `json:"metadata,omitempty"`
	// If enabled, receive events in the order they were added to the queue. For this to work correctly, the process sending events must have ordering enabled.
	OrderedDelivery *bool `json:"orderedDelivery,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string              `json:"pipeline,omitempty"`
	Pq       *InputGooglePubsubPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Region to retrieve messages from. Select 'default' to allow Google to auto-select the nearest region. When using ordered delivery, the selected region must be allowed by message storage policy.
	Region *InputGooglePubsubRegion `json:"region,omitempty"`
	// Pull request timeout, in milliseconds.
	RequestTimeout *int64 `json:"requestTimeout,omitempty"`
	// Select (or create) a stored text secret
	Secret *string `json:"secret,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Contents of service account credentials (JSON keys) file downloaded from Google Cloud. To upload a file, click the upload button at this field's upper right. As an alternative, you can use environment variables (see [here](https://googleapis.dev/ruby/google-cloud-pubsub/latest/file.AUTHENTICATION.html)).
	ServiceAccountCredentials *string `json:"serviceAccountCredentials,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// ID of the subscription to use when receiving events.
	SubscriptionName string `json:"subscriptionName"`
	// ID of the topic to receive events from.
	TopicName string                 `json:"topicName"`
	Type      *InputGooglePubsubType `json:"type,omitempty"`
}
